-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_kernel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bufw_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufw_EN_A : OUT STD_LOGIC;
    bufw_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufw_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufw_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufw_Clk_A : OUT STD_LOGIC;
    bufw_Rst_A : OUT STD_LOGIC;
    bufi_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufi_EN_A : OUT STD_LOGIC;
    bufi_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufi_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufi_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufi_Clk_A : OUT STD_LOGIC;
    bufi_Rst_A : OUT STD_LOGIC;
    bufo_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufo_EN_A : OUT STD_LOGIC;
    bufo_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufo_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufo_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufo_Clk_A : OUT STD_LOGIC;
    bufo_Rst_A : OUT STD_LOGIC );
end;


architecture behav of convolve_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_kernel,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.353000,HLS_SYN_LAT=38509,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1433,HLS_SYN_LUT=1252}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal to_b_V_fu_201_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal to_b_V_reg_479 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_16_cast_fu_229_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_cast_reg_484 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ti_b_V_fu_239_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ti_b_V_reg_493 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_249_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_reg_498 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_266_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_504 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_286_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_21_cast_fu_292_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_cast_reg_514 : STD_LOGIC_VECTOR (6 downto 0);
    signal row_b_V_fu_301_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_b_V_reg_522 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_17_fu_311_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_reg_527 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_321_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_reg_533 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_7_cast_fu_326_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_cast_reg_538 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_b_V_fu_336_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_b_V_reg_546 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal bufo_addr_reg_551 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_356_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_reg_556 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_V_fu_366_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_V_reg_569 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_22_fu_381_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_reg_574 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_3_fu_360_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_reg_579 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_24_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_24_reg_589 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_25_fu_409_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_25_reg_594 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_26_fu_414_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_reg_599 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_reg_604 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal j_V_fu_440_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_V_reg_612 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_28_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_reg_617 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_455_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_reg_622 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_29_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_reg_627 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bufw_load_reg_642 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bufi_load_reg_647 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_191_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_652 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal p_s_reg_95 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_1_reg_106 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_2_reg_117 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_3_reg_129 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_4_reg_141 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_reg_152 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_5_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp_1_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_cast_fu_468_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal bufo_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal tmp_s_fu_211_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_cast_fu_219_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_cast_fu_207_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_223_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_245_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_254_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl1_cast_fu_262_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_275_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_cast_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl2_fu_282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast8_fu_307_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_316_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast7_fu_342_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_376_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl5_cast_fu_394_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_cast_cast_fu_406_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl4_cast_fu_421_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_29_cast_fu_418_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_cast_fu_446_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_cast_cast_fu_460_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);

    component convolve_kernel_fbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_kernel_fcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    convolve_kernel_fbkb_U0 : component convolve_kernel_fbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_1_reg_173,
        din1 => tmp_13_reg_652,
        ce => ap_const_logic_1,
        dout => grp_fu_186_p2);

    convolve_kernel_fcud_U1 : component convolve_kernel_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => bufw_load_reg_642,
        din1 => bufi_load_reg_647,
        ce => ap_const_logic_1,
        dout => grp_fu_191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_1_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_fu_295_p2 = ap_const_lv1_1))) then 
                p_1_reg_106 <= ti_b_V_reg_493;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_195_p2 = ap_const_lv1_0))) then 
                p_1_reg_106 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_2_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_8_fu_330_p2 = ap_const_lv1_1))) then 
                p_2_reg_117 <= row_b_V_reg_522;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_2_reg_117 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_3_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_3_fu_360_p2 = ap_const_lv1_1))) then 
                p_3_reg_129 <= col_b_V_reg_546;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_3_reg_129 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_4_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_10_fu_434_p2 = ap_const_lv1_1))) then 
                p_4_reg_141 <= i_V_reg_569;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                p_4_reg_141 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_5_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                p_5_reg_162 <= j_V_reg_612;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                p_5_reg_162 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_s_reg_95_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_233_p2 = ap_const_lv1_1))) then 
                p_s_reg_95 <= to_b_V_reg_479;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_s_reg_95 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    temp1_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_10_fu_434_p2 = ap_const_lv1_1))) then 
                temp1_reg_152 <= temp_1_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                temp1_reg_152 <= bufo_Dout_A;
            end if; 
        end if;
    end process;

    temp_1_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                temp_1_reg_173 <= grp_fu_186_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                temp_1_reg_173 <= temp1_reg_152;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                bufi_load_reg_647 <= bufi_Dout_A;
                bufw_load_reg_642 <= bufw_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = tmp_8_fu_330_p2))) then
                bufo_addr_reg_551 <= tmp_25_cast_fu_351_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                col_b_V_reg_546 <= col_b_V_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                i_V_reg_569 <= i_V_fu_366_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                j_V_reg_612 <= j_V_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                row_b_V_reg_522 <= row_b_V_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                ti_b_V_reg_493 <= ti_b_V_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_11_reg_509 <= tmp_11_fu_286_p2;
                tmp_21_cast_reg_514 <= tmp_21_cast_fu_292_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = tmp_10_fu_434_p2))) then
                tmp_12_reg_622 <= tmp_12_fu_455_p2;
                tmp_28_reg_617 <= tmp_28_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_13_reg_652 <= grp_fu_191_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_195_p2 = ap_const_lv1_0))) then
                tmp_16_cast_reg_484 <= tmp_16_cast_fu_229_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_2_fu_233_p2))) then
                tmp_16_reg_504 <= tmp_16_fu_266_p2;
                tmp_4_reg_498 <= tmp_4_fu_249_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = tmp_5_fu_295_p2))) then
                tmp_17_reg_527 <= tmp_17_fu_311_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_19_reg_533 <= tmp_19_fu_321_p2;
                    tmp_7_cast_reg_538(1 downto 0) <= tmp_7_cast_fu_326_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = tmp_3_fu_360_p2))) then
                tmp_22_reg_574 <= tmp_22_fu_381_p1;
                tmp_23_reg_579 <= tmp_23_fu_385_p1;
                tmp_9_reg_584 <= tmp_9_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                tmp_24_reg_589 <= tmp_24_fu_401_p2;
                tmp_25_reg_594 <= tmp_25_fu_409_p2;
                tmp_26_reg_599 <= tmp_26_fu_414_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_27_reg_604 <= tmp_27_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                tmp_29_reg_627 <= tmp_29_fu_463_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                    tmp_cast_reg_556(1 downto 0) <= tmp_cast_fu_356_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                to_b_V_reg_479 <= to_b_V_fu_201_p2;
            end if;
        end if;
    end process;
    tmp_7_cast_reg_538(2) <= '0';
    tmp_cast_reg_556(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_195_p2, ap_CS_fsm_state3, tmp_2_fu_233_p2, ap_CS_fsm_state5, tmp_5_fu_295_p2, ap_CS_fsm_state7, tmp_8_fu_330_p2, ap_CS_fsm_state10, tmp_3_fu_360_p2, ap_CS_fsm_state13, tmp_10_fu_434_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_195_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_2_fu_233_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_5_fu_295_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_8_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_3_fu_360_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_10_fu_434_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_195_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_195_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_fu_195_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bufi_Addr_A <= std_logic_vector(shift_left(unsigned(tmp_33_cast_fu_472_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufi_Clk_A <= ap_clk;
    bufi_Din_A <= ap_const_lv32_0;

    bufi_EN_A_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bufi_EN_A <= ap_const_logic_1;
        else 
            bufi_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufi_Rst_A <= ap_rst;
    bufi_WEN_A <= ap_const_lv4_0;
    bufo_Addr_A <= std_logic_vector(shift_left(unsigned(bufo_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufo_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bufo_addr_reg_551),32));
    bufo_Clk_A <= ap_clk;
    bufo_Din_A <= temp_1_reg_173;

    bufo_EN_A_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            bufo_EN_A <= ap_const_logic_1;
        else 
            bufo_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufo_Rst_A <= ap_rst;

    bufo_WEN_A_assign_proc : process(ap_CS_fsm_state13, tmp_10_fu_434_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (tmp_10_fu_434_p2 = ap_const_lv1_1))) then 
            bufo_WEN_A <= ap_const_lv4_F;
        else 
            bufo_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    bufw_Addr_A <= std_logic_vector(shift_left(unsigned(tmp_32_cast_fu_468_p1),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufw_Clk_A <= ap_clk;
    bufw_Din_A <= ap_const_lv32_0;

    bufw_EN_A_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            bufw_EN_A <= ap_const_logic_1;
        else 
            bufw_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufw_Rst_A <= ap_rst;
    bufw_WEN_A <= ap_const_lv4_0;
    col_b_V_fu_336_p2 <= std_logic_vector(unsigned(p_3_reg_129) + unsigned(ap_const_lv2_1));
    i_V_fu_366_p2 <= std_logic_vector(unsigned(p_4_reg_141) + unsigned(ap_const_lv3_1));
    j_V_fu_440_p2 <= std_logic_vector(unsigned(p_5_reg_162) + unsigned(ap_const_lv3_1));
    p_shl1_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_254_p3),6));
        p_shl2_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_275_p3),32));

    p_shl4_cast_fu_421_p3 <= (tmp_26_reg_599 & ap_const_lv3_0);
    p_shl5_cast_fu_394_p3 <= (tmp_23_reg_579 & ap_const_lv2_0);
    p_shl_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_211_p3),5));
    row_b_V_fu_301_p2 <= std_logic_vector(unsigned(p_2_reg_117) + unsigned(ap_const_lv2_1));
    ti_b_V_fu_239_p2 <= std_logic_vector(unsigned(p_1_reg_106) + unsigned(ap_const_lv2_1));
    tmp_10_fu_434_p2 <= "1" when (p_5_reg_162 = ap_const_lv3_5) else "0";
    tmp_11_cast_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_5_reg_162),9));
    tmp_11_fu_286_p2 <= std_logic_vector(signed(tmp_17_cast_fu_272_p1) + signed(p_shl2_fu_282_p1));
    tmp_12_cast_cast_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_622),9));
    tmp_12_fu_455_p2 <= std_logic_vector(unsigned(tmp_cast_reg_556) + unsigned(p_5_reg_162));
    tmp_15_fu_254_p3 <= (p_1_reg_106 & ap_const_lv3_0);
        tmp_16_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_223_p2),6));

    tmp_16_fu_266_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_262_p1) - unsigned(tmp_4_cast_fu_245_p1));
        tmp_17_cast_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_reg_498),32));

    tmp_17_fu_311_p2 <= std_logic_vector(unsigned(tmp_7_cast8_fu_307_p1) + unsigned(tmp_16_cast_reg_484));
    tmp_18_fu_316_p2 <= std_logic_vector(shift_left(unsigned(tmp_17_reg_527),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    tmp_19_fu_321_p2 <= std_logic_vector(unsigned(tmp_18_fu_316_p2) - unsigned(tmp_17_reg_527));
    tmp_1_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_s_reg_95),5));
    tmp_1_fu_223_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_219_p1) - unsigned(tmp_1_cast_fu_207_p1));
    tmp_20_fu_346_p2 <= std_logic_vector(unsigned(tmp_19_reg_533) + unsigned(tmp_cast7_fu_342_p1));
        tmp_21_cast_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_reg_504),7));

    tmp_21_fu_376_p2 <= std_logic_vector(unsigned(tmp_6_fu_372_p1) + unsigned(tmp_11_reg_509));
    tmp_22_fu_381_p1 <= tmp_21_fu_376_p2(9 - 1 downto 0);
    tmp_23_fu_385_p1 <= tmp_21_fu_376_p2(7 - 1 downto 0);
    tmp_24_fu_401_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_394_p3) + unsigned(tmp_22_reg_574));
    tmp_25_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_346_p2),32));
    tmp_25_fu_409_p2 <= std_logic_vector(unsigned(tmp_9_cast_cast_fu_406_p1) + unsigned(tmp_21_cast_reg_514));
    tmp_26_fu_414_p1 <= tmp_25_fu_409_p2(6 - 1 downto 0);
    tmp_27_fu_428_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_421_p3) - unsigned(tmp_29_cast_fu_418_p1));
    tmp_28_fu_450_p2 <= std_logic_vector(unsigned(tmp_24_reg_589) + unsigned(tmp_11_cast_fu_446_p1));
        tmp_29_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_reg_594),9));

    tmp_29_fu_463_p2 <= std_logic_vector(unsigned(tmp_27_reg_604) + unsigned(tmp_12_cast_cast_fu_460_p1));
    tmp_2_fu_233_p2 <= "1" when (p_1_reg_106 = ap_const_lv2_3) else "0";
    tmp_32_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_reg_617),32));
    tmp_33_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_reg_627),32));
    tmp_3_fu_360_p2 <= "1" when (p_4_reg_141 = ap_const_lv3_5) else "0";
    tmp_4_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_1_reg_106),6));
    tmp_4_fu_249_p2 <= std_logic_vector(signed(tmp_16_cast_reg_484) + signed(tmp_4_cast_fu_245_p1));
    tmp_5_fu_295_p2 <= "1" when (p_2_reg_117 = ap_const_lv2_3) else "0";
    tmp_6_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_4_reg_141),32));
    tmp_7_cast8_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_reg_117),6));
    tmp_7_cast_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_2_reg_117),3));
    tmp_7_fu_275_p3 <= (tmp_4_reg_498 & ap_const_lv2_0);
    tmp_8_fu_330_p2 <= "1" when (p_3_reg_129 = ap_const_lv2_3) else "0";
    tmp_9_cast_cast_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_584),7));
    tmp_9_fu_389_p2 <= std_logic_vector(unsigned(p_4_reg_141) + unsigned(tmp_7_cast_reg_538));
    tmp_cast7_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_3_reg_129),6));
    tmp_cast_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_3_reg_129),3));
    tmp_fu_195_p2 <= "1" when (p_s_reg_95 = ap_const_lv2_3) else "0";
    tmp_s_fu_211_p3 <= (p_s_reg_95 & ap_const_lv2_0);
    to_b_V_fu_201_p2 <= std_logic_vector(unsigned(p_s_reg_95) + unsigned(ap_const_lv2_1));
end behav;
