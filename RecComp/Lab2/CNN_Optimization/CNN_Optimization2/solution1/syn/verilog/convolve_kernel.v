// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve_kernel,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.353000,HLS_SYN_LAT=38509,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1433,HLS_SYN_LUT=1252}" *)

module convolve_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bufw_Addr_A,
        bufw_EN_A,
        bufw_WEN_A,
        bufw_Din_A,
        bufw_Dout_A,
        bufw_Clk_A,
        bufw_Rst_A,
        bufi_Addr_A,
        bufi_EN_A,
        bufi_WEN_A,
        bufi_Din_A,
        bufi_Dout_A,
        bufi_Clk_A,
        bufi_Rst_A,
        bufo_Addr_A,
        bufo_EN_A,
        bufo_WEN_A,
        bufo_Din_A,
        bufo_Dout_A,
        bufo_Clk_A,
        bufo_Rst_A
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] bufw_Addr_A;
output   bufw_EN_A;
output  [3:0] bufw_WEN_A;
output  [31:0] bufw_Din_A;
input  [31:0] bufw_Dout_A;
output   bufw_Clk_A;
output   bufw_Rst_A;
output  [31:0] bufi_Addr_A;
output   bufi_EN_A;
output  [3:0] bufi_WEN_A;
output  [31:0] bufi_Din_A;
input  [31:0] bufi_Dout_A;
output   bufi_Clk_A;
output   bufi_Rst_A;
output  [31:0] bufo_Addr_A;
output   bufo_EN_A;
output  [3:0] bufo_WEN_A;
output  [31:0] bufo_Din_A;
input  [31:0] bufo_Dout_A;
output   bufo_Clk_A;
output   bufo_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bufw_EN_A;
reg bufi_EN_A;
reg bufo_EN_A;
reg[3:0] bufo_WEN_A;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [1:0] to_b_V_fu_201_p2;
reg   [1:0] to_b_V_reg_479;
wire    ap_CS_fsm_state2;
wire  signed [5:0] tmp_16_cast_fu_229_p1;
reg  signed [5:0] tmp_16_cast_reg_484;
wire   [0:0] tmp_fu_195_p2;
wire   [1:0] ti_b_V_fu_239_p2;
reg   [1:0] ti_b_V_reg_493;
wire    ap_CS_fsm_state3;
wire   [5:0] tmp_4_fu_249_p2;
reg   [5:0] tmp_4_reg_498;
wire   [0:0] tmp_2_fu_233_p2;
wire   [5:0] tmp_16_fu_266_p2;
reg   [5:0] tmp_16_reg_504;
wire   [31:0] tmp_11_fu_286_p2;
reg   [31:0] tmp_11_reg_509;
wire    ap_CS_fsm_state4;
wire  signed [6:0] tmp_21_cast_fu_292_p1;
reg  signed [6:0] tmp_21_cast_reg_514;
wire   [1:0] row_b_V_fu_301_p2;
reg   [1:0] row_b_V_reg_522;
wire    ap_CS_fsm_state5;
wire   [5:0] tmp_17_fu_311_p2;
reg   [5:0] tmp_17_reg_527;
wire   [0:0] tmp_5_fu_295_p2;
wire   [5:0] tmp_19_fu_321_p2;
reg   [5:0] tmp_19_reg_533;
wire    ap_CS_fsm_state6;
wire   [2:0] tmp_7_cast_fu_326_p1;
reg   [2:0] tmp_7_cast_reg_538;
wire   [1:0] col_b_V_fu_336_p2;
reg   [1:0] col_b_V_reg_546;
wire    ap_CS_fsm_state7;
reg   [4:0] bufo_addr_reg_551;
wire   [0:0] tmp_8_fu_330_p2;
wire   [2:0] tmp_cast_fu_356_p1;
reg   [2:0] tmp_cast_reg_556;
wire    ap_CS_fsm_state9;
wire   [2:0] i_V_fu_366_p2;
reg   [2:0] i_V_reg_569;
wire    ap_CS_fsm_state10;
wire   [8:0] tmp_22_fu_381_p1;
reg   [8:0] tmp_22_reg_574;
wire   [0:0] tmp_3_fu_360_p2;
wire   [6:0] tmp_23_fu_385_p1;
reg   [6:0] tmp_23_reg_579;
wire   [2:0] tmp_9_fu_389_p2;
reg   [2:0] tmp_9_reg_584;
wire   [8:0] tmp_24_fu_401_p2;
reg   [8:0] tmp_24_reg_589;
wire    ap_CS_fsm_state11;
wire   [6:0] tmp_25_fu_409_p2;
reg   [6:0] tmp_25_reg_594;
wire   [5:0] tmp_26_fu_414_p1;
reg   [5:0] tmp_26_reg_599;
wire   [8:0] tmp_27_fu_428_p2;
reg   [8:0] tmp_27_reg_604;
wire    ap_CS_fsm_state12;
wire   [2:0] j_V_fu_440_p2;
reg   [2:0] j_V_reg_612;
wire    ap_CS_fsm_state13;
wire   [8:0] tmp_28_fu_450_p2;
reg   [8:0] tmp_28_reg_617;
wire   [0:0] tmp_10_fu_434_p2;
wire   [2:0] tmp_12_fu_455_p2;
reg   [2:0] tmp_12_reg_622;
wire   [8:0] tmp_29_fu_463_p2;
reg   [8:0] tmp_29_reg_627;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg   [31:0] bufw_load_reg_642;
wire    ap_CS_fsm_state16;
reg   [31:0] bufi_load_reg_647;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] tmp_13_reg_652;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_186_p2;
wire    ap_CS_fsm_state30;
reg   [1:0] p_s_reg_95;
reg   [1:0] p_1_reg_106;
reg   [1:0] p_2_reg_117;
reg   [1:0] p_3_reg_129;
reg   [2:0] p_4_reg_141;
reg   [31:0] temp1_reg_152;
reg   [2:0] p_5_reg_162;
reg   [31:0] temp_1_reg_173;
wire   [31:0] tmp_25_cast_fu_351_p1;
wire   [31:0] tmp_32_cast_fu_468_p1;
wire   [31:0] tmp_33_cast_fu_472_p1;
wire    ap_CS_fsm_state8;
wire   [31:0] bufo_Addr_A_orig;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state17;
wire   [3:0] tmp_s_fu_211_p3;
wire   [4:0] p_shl_cast_fu_219_p1;
wire   [4:0] tmp_1_cast_fu_207_p1;
wire   [4:0] tmp_1_fu_223_p2;
wire   [5:0] tmp_4_cast_fu_245_p1;
wire   [4:0] tmp_15_fu_254_p3;
wire   [5:0] p_shl1_cast_fu_262_p1;
wire   [7:0] tmp_7_fu_275_p3;
wire  signed [31:0] tmp_17_cast_fu_272_p1;
wire  signed [31:0] p_shl2_fu_282_p1;
wire   [5:0] tmp_7_cast8_fu_307_p1;
wire   [5:0] tmp_18_fu_316_p2;
wire   [5:0] tmp_cast7_fu_342_p1;
wire   [5:0] tmp_20_fu_346_p2;
wire   [31:0] tmp_6_fu_372_p1;
wire   [31:0] tmp_21_fu_376_p2;
wire   [8:0] p_shl5_cast_fu_394_p3;
wire   [6:0] tmp_9_cast_cast_fu_406_p1;
wire   [8:0] p_shl4_cast_fu_421_p3;
wire  signed [8:0] tmp_29_cast_fu_418_p1;
wire   [8:0] tmp_11_cast_fu_446_p1;
wire   [8:0] tmp_12_cast_cast_fu_460_p1;
reg   [29:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
end

convolve_kernel_fbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_1_reg_173),
    .din1(tmp_13_reg_652),
    .ce(1'b1),
    .dout(grp_fu_186_p2)
);

convolve_kernel_fcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fcud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(bufw_load_reg_642),
    .din1(bufi_load_reg_647),
    .ce(1'b1),
    .dout(grp_fu_191_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_295_p2 == 1'd1))) begin
        p_1_reg_106 <= ti_b_V_reg_493;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_195_p2 == 1'd0))) begin
        p_1_reg_106 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_fu_330_p2 == 1'd1))) begin
        p_2_reg_117 <= row_b_V_reg_522;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        p_2_reg_117 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_360_p2 == 1'd1))) begin
        p_3_reg_129 <= col_b_V_reg_546;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        p_3_reg_129 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_10_fu_434_p2 == 1'd1))) begin
        p_4_reg_141 <= i_V_reg_569;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_4_reg_141 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        p_5_reg_162 <= j_V_reg_612;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        p_5_reg_162 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_233_p2 == 1'd1))) begin
        p_s_reg_95 <= to_b_V_reg_479;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_95 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_10_fu_434_p2 == 1'd1))) begin
        temp1_reg_152 <= temp_1_reg_173;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_reg_152 <= bufo_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_1_reg_173 <= grp_fu_186_p2;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_1_reg_173 <= temp1_reg_152;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        bufi_load_reg_647 <= bufi_Dout_A;
        bufw_load_reg_642 <= bufw_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == tmp_8_fu_330_p2))) begin
        bufo_addr_reg_551 <= tmp_25_cast_fu_351_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        col_b_V_reg_546 <= col_b_V_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_V_reg_569 <= i_V_fu_366_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_V_reg_612 <= j_V_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        row_b_V_reg_522 <= row_b_V_fu_301_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        ti_b_V_reg_493 <= ti_b_V_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_11_reg_509 <= tmp_11_fu_286_p2;
        tmp_21_cast_reg_514 <= tmp_21_cast_fu_292_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == tmp_10_fu_434_p2))) begin
        tmp_12_reg_622 <= tmp_12_fu_455_p2;
        tmp_28_reg_617 <= tmp_28_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_13_reg_652 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_195_p2 == 1'd0))) begin
        tmp_16_cast_reg_484 <= tmp_16_cast_fu_229_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_2_fu_233_p2))) begin
        tmp_16_reg_504 <= tmp_16_fu_266_p2;
        tmp_4_reg_498 <= tmp_4_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_5_fu_295_p2))) begin
        tmp_17_reg_527 <= tmp_17_fu_311_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_19_reg_533 <= tmp_19_fu_321_p2;
        tmp_7_cast_reg_538[1 : 0] <= tmp_7_cast_fu_326_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == tmp_3_fu_360_p2))) begin
        tmp_22_reg_574 <= tmp_22_fu_381_p1;
        tmp_23_reg_579 <= tmp_23_fu_385_p1;
        tmp_9_reg_584 <= tmp_9_fu_389_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_24_reg_589 <= tmp_24_fu_401_p2;
        tmp_25_reg_594 <= tmp_25_fu_409_p2;
        tmp_26_reg_599 <= tmp_26_fu_414_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_27_reg_604 <= tmp_27_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_29_reg_627 <= tmp_29_fu_463_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_cast_reg_556[1 : 0] <= tmp_cast_fu_356_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        to_b_V_reg_479 <= to_b_V_fu_201_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_195_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_195_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bufi_EN_A = 1'b1;
    end else begin
        bufi_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        bufo_EN_A = 1'b1;
    end else begin
        bufo_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (tmp_10_fu_434_p2 == 1'd1))) begin
        bufo_WEN_A = 4'd15;
    end else begin
        bufo_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        bufw_EN_A = 1'b1;
    end else begin
        bufw_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_195_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_233_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (tmp_5_fu_295_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_8_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (tmp_3_fu_360_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (tmp_10_fu_434_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bufi_Addr_A = tmp_33_cast_fu_472_p1 << 32'd2;

assign bufi_Clk_A = ap_clk;

assign bufi_Din_A = 32'd0;

assign bufi_Rst_A = ap_rst;

assign bufi_WEN_A = 4'd0;

assign bufo_Addr_A = bufo_Addr_A_orig << 32'd2;

assign bufo_Addr_A_orig = bufo_addr_reg_551;

assign bufo_Clk_A = ap_clk;

assign bufo_Din_A = temp_1_reg_173;

assign bufo_Rst_A = ap_rst;

assign bufw_Addr_A = tmp_32_cast_fu_468_p1 << 32'd2;

assign bufw_Clk_A = ap_clk;

assign bufw_Din_A = 32'd0;

assign bufw_Rst_A = ap_rst;

assign bufw_WEN_A = 4'd0;

assign col_b_V_fu_336_p2 = (p_3_reg_129 + 2'd1);

assign i_V_fu_366_p2 = (p_4_reg_141 + 3'd1);

assign j_V_fu_440_p2 = (p_5_reg_162 + 3'd1);

assign p_shl1_cast_fu_262_p1 = tmp_15_fu_254_p3;

assign p_shl2_fu_282_p1 = $signed(tmp_7_fu_275_p3);

assign p_shl4_cast_fu_421_p3 = {{tmp_26_reg_599}, {3'd0}};

assign p_shl5_cast_fu_394_p3 = {{tmp_23_reg_579}, {2'd0}};

assign p_shl_cast_fu_219_p1 = tmp_s_fu_211_p3;

assign row_b_V_fu_301_p2 = (p_2_reg_117 + 2'd1);

assign ti_b_V_fu_239_p2 = (p_1_reg_106 + 2'd1);

assign tmp_10_fu_434_p2 = ((p_5_reg_162 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_11_cast_fu_446_p1 = p_5_reg_162;

assign tmp_11_fu_286_p2 = ($signed(tmp_17_cast_fu_272_p1) + $signed(p_shl2_fu_282_p1));

assign tmp_12_cast_cast_fu_460_p1 = tmp_12_reg_622;

assign tmp_12_fu_455_p2 = (tmp_cast_reg_556 + p_5_reg_162);

assign tmp_15_fu_254_p3 = {{p_1_reg_106}, {3'd0}};

assign tmp_16_cast_fu_229_p1 = $signed(tmp_1_fu_223_p2);

assign tmp_16_fu_266_p2 = (p_shl1_cast_fu_262_p1 - tmp_4_cast_fu_245_p1);

assign tmp_17_cast_fu_272_p1 = $signed(tmp_4_reg_498);

assign tmp_17_fu_311_p2 = ($signed(tmp_7_cast8_fu_307_p1) + $signed(tmp_16_cast_reg_484));

assign tmp_18_fu_316_p2 = tmp_17_reg_527 << 6'd2;

assign tmp_19_fu_321_p2 = (tmp_18_fu_316_p2 - tmp_17_reg_527);

assign tmp_1_cast_fu_207_p1 = p_s_reg_95;

assign tmp_1_fu_223_p2 = (p_shl_cast_fu_219_p1 - tmp_1_cast_fu_207_p1);

assign tmp_20_fu_346_p2 = (tmp_19_reg_533 + tmp_cast7_fu_342_p1);

assign tmp_21_cast_fu_292_p1 = $signed(tmp_16_reg_504);

assign tmp_21_fu_376_p2 = (tmp_6_fu_372_p1 + tmp_11_reg_509);

assign tmp_22_fu_381_p1 = tmp_21_fu_376_p2[8:0];

assign tmp_23_fu_385_p1 = tmp_21_fu_376_p2[6:0];

assign tmp_24_fu_401_p2 = (p_shl5_cast_fu_394_p3 + tmp_22_reg_574);

assign tmp_25_cast_fu_351_p1 = tmp_20_fu_346_p2;

assign tmp_25_fu_409_p2 = ($signed(tmp_9_cast_cast_fu_406_p1) + $signed(tmp_21_cast_reg_514));

assign tmp_26_fu_414_p1 = tmp_25_fu_409_p2[5:0];

assign tmp_27_fu_428_p2 = ($signed(p_shl4_cast_fu_421_p3) - $signed(tmp_29_cast_fu_418_p1));

assign tmp_28_fu_450_p2 = (tmp_24_reg_589 + tmp_11_cast_fu_446_p1);

assign tmp_29_cast_fu_418_p1 = $signed(tmp_25_reg_594);

assign tmp_29_fu_463_p2 = (tmp_27_reg_604 + tmp_12_cast_cast_fu_460_p1);

assign tmp_2_fu_233_p2 = ((p_1_reg_106 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_32_cast_fu_468_p1 = tmp_28_reg_617;

assign tmp_33_cast_fu_472_p1 = tmp_29_reg_627;

assign tmp_3_fu_360_p2 = ((p_4_reg_141 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_245_p1 = p_1_reg_106;

assign tmp_4_fu_249_p2 = ($signed(tmp_16_cast_reg_484) + $signed(tmp_4_cast_fu_245_p1));

assign tmp_5_fu_295_p2 = ((p_2_reg_117 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_6_fu_372_p1 = p_4_reg_141;

assign tmp_7_cast8_fu_307_p1 = p_2_reg_117;

assign tmp_7_cast_fu_326_p1 = p_2_reg_117;

assign tmp_7_fu_275_p3 = {{tmp_4_reg_498}, {2'd0}};

assign tmp_8_fu_330_p2 = ((p_3_reg_129 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_9_cast_cast_fu_406_p1 = tmp_9_reg_584;

assign tmp_9_fu_389_p2 = (p_4_reg_141 + tmp_7_cast_reg_538);

assign tmp_cast7_fu_342_p1 = p_3_reg_129;

assign tmp_cast_fu_356_p1 = p_3_reg_129;

assign tmp_fu_195_p2 = ((p_s_reg_95 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_s_fu_211_p3 = {{p_s_reg_95}, {2'd0}};

assign to_b_V_fu_201_p2 = (p_s_reg_95 + 2'd1);

always @ (posedge ap_clk) begin
    tmp_7_cast_reg_538[2] <= 1'b0;
    tmp_cast_reg_556[2] <= 1'b0;
end

endmodule //convolve_kernel
