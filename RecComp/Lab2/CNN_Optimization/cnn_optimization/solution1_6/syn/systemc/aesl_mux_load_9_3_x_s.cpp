// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aesl_mux_load_9_3_x_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aesl_mux_load_9_3_x_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aesl_mux_load_9_3_x_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> aesl_mux_load_9_3_x_s::ap_ST_fsm_pp0_stage0 = "1";
const bool aesl_mux_load_9_3_x_s::ap_const_boolean_1 = true;
const sc_lv<32> aesl_mux_load_9_3_x_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool aesl_mux_load_9_3_x_s::ap_const_boolean_0 = false;
const sc_lv<32> aesl_mux_load_9_3_x_s::ap_const_lv32_2 = "10";
const sc_lv<2> aesl_mux_load_9_3_x_s::ap_const_lv2_0 = "00";
const sc_lv<64> aesl_mux_load_9_3_x_s::ap_const_lv64_2 = "10";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_0 = "0000";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_1 = "1";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_2 = "10";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_3 = "11";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_4 = "100";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_5 = "101";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_6 = "110";
const sc_lv<4> aesl_mux_load_9_3_x_s::ap_const_lv4_7 = "111";

aesl_mux_load_9_3_x_s::aesl_mux_load_9_3_x_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_start );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_enable_reg_pp0_iter5 );

    SC_METHOD(thread_ap_idle_pp0_0to4);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to4 );

    SC_METHOD(thread_ap_reset_start_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to4 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( empty_23_reg_480 );
    sensitive << ( sel_tmp14_reg_505 );
    sensitive << ( sel_tmp13_fu_327_p3 );

    SC_METHOD(thread_empty_10_Addr_A);
    sensitive << ( empty_10_Addr_A_orig );

    SC_METHOD(thread_empty_10_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_32_reg_362 );

    SC_METHOD(thread_empty_10_Din_A);

    SC_METHOD(thread_empty_10_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_10_WEN_A);

    SC_METHOD(thread_empty_2_Addr_A);
    sensitive << ( empty_2_Addr_A_orig );

    SC_METHOD(thread_empty_2_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_32_reg_362 );

    SC_METHOD(thread_empty_2_Din_A);

    SC_METHOD(thread_empty_2_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_2_WEN_A);

    SC_METHOD(thread_empty_3_Addr_A);
    sensitive << ( empty_3_Addr_A_orig );

    SC_METHOD(thread_empty_3_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_32_reg_362 );

    SC_METHOD(thread_empty_3_Din_A);

    SC_METHOD(thread_empty_3_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_3_WEN_A);

    SC_METHOD(thread_empty_4_Addr_A);
    sensitive << ( empty_4_Addr_A_orig );

    SC_METHOD(thread_empty_4_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_32_reg_362 );

    SC_METHOD(thread_empty_4_Din_A);

    SC_METHOD(thread_empty_4_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_4_WEN_A);

    SC_METHOD(thread_empty_5_Addr_A);
    sensitive << ( empty_5_Addr_A_orig );

    SC_METHOD(thread_empty_5_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( tmp_32_reg_362 );

    SC_METHOD(thread_empty_5_Din_A);

    SC_METHOD(thread_empty_5_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_5_WEN_A);

    SC_METHOD(thread_empty_6_Addr_A);
    sensitive << ( empty_6_Addr_A_orig );

    SC_METHOD(thread_empty_6_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_reg_pp0_iter2_tmp_32_reg_362 );

    SC_METHOD(thread_empty_6_Din_A);

    SC_METHOD(thread_empty_6_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_6_WEN_A);

    SC_METHOD(thread_empty_7_Addr_A);
    sensitive << ( empty_7_Addr_A_orig );

    SC_METHOD(thread_empty_7_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_reg_pp0_iter2_tmp_32_reg_362 );

    SC_METHOD(thread_empty_7_Din_A);

    SC_METHOD(thread_empty_7_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_7_WEN_A);

    SC_METHOD(thread_empty_8_Addr_A);
    sensitive << ( empty_8_Addr_A_orig );

    SC_METHOD(thread_empty_8_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_reg_pp0_iter2_tmp_32_reg_362 );

    SC_METHOD(thread_empty_8_Din_A);

    SC_METHOD(thread_empty_8_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_8_WEN_A);

    SC_METHOD(thread_empty_9_Addr_A);
    sensitive << ( empty_9_Addr_A_orig );

    SC_METHOD(thread_empty_9_Addr_A_orig);
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_reg_pp0_iter2_tmp_32_reg_362 );

    SC_METHOD(thread_empty_9_Din_A);

    SC_METHOD(thread_empty_9_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );

    SC_METHOD(thread_empty_9_WEN_A);

    SC_METHOD(thread_p_cast1_fu_202_p1);
    sensitive << ( empty_13 );

    SC_METHOD(thread_p_cast2_fu_234_p1);
    sensitive << ( tmp_4_reg_339 );

    SC_METHOD(thread_p_cast_fu_206_p1);
    sensitive << ( empty_12 );

    SC_METHOD(thread_p_shl1_fu_218_p1);
    sensitive << ( tmp_fu_210_p3 );

    SC_METHOD(thread_sel_tmp10_fu_301_p2);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter3_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp11_fu_321_p3);
    sensitive << ( empty_21_reg_470 );
    sensitive << ( sel_tmp10_reg_495 );
    sensitive << ( sel_tmp9_fu_316_p3 );

    SC_METHOD(thread_sel_tmp12_fu_306_p2);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter3_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp13_fu_327_p3);
    sensitive << ( empty_22_reg_475 );
    sensitive << ( sel_tmp12_reg_500 );
    sensitive << ( sel_tmp11_fu_321_p3 );

    SC_METHOD(thread_sel_tmp14_fu_311_p2);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter3_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp1_fu_273_p3);
    sensitive << ( empty_15_reg_420 );
    sensitive << ( empty_16_reg_425 );
    sensitive << ( sel_tmp_reg_445 );

    SC_METHOD(thread_sel_tmp2_fu_258_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter2_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp3_fu_278_p3);
    sensitive << ( empty_17_reg_430 );
    sensitive << ( sel_tmp2_reg_450 );
    sensitive << ( sel_tmp1_fu_273_p3 );

    SC_METHOD(thread_sel_tmp4_fu_263_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter2_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp5_fu_284_p3);
    sensitive << ( empty_18_reg_435 );
    sensitive << ( sel_tmp4_reg_455 );
    sensitive << ( sel_tmp3_fu_278_p3 );

    SC_METHOD(thread_sel_tmp6_fu_268_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter2_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp7_fu_290_p3);
    sensitive << ( empty_19_reg_440 );
    sensitive << ( sel_tmp6_reg_460 );
    sensitive << ( sel_tmp5_fu_284_p3 );

    SC_METHOD(thread_sel_tmp8_fu_296_p2);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter3_tmp_7_reg_344 );

    SC_METHOD(thread_sel_tmp9_fu_316_p3);
    sensitive << ( empty_20_reg_465 );
    sensitive << ( sel_tmp7_reg_485 );
    sensitive << ( sel_tmp8_reg_490 );

    SC_METHOD(thread_sel_tmp_fu_253_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_ce );
    sensitive << ( ap_reg_pp0_iter2_tmp_7_reg_344 );

    SC_METHOD(thread_tmp_30_fu_228_p2);
    sensitive << ( tmp_s_fu_222_p2 );
    sensitive << ( p_cast1_fu_202_p1 );

    SC_METHOD(thread_tmp_31_fu_242_p2);
    sensitive << ( tmp_30_reg_356 );
    sensitive << ( tmp_8_fu_237_p2 );

    SC_METHOD(thread_tmp_32_fu_247_p2);
    sensitive << ( tmp_31_fu_242_p2 );
    sensitive << ( p_cast2_fu_234_p1 );

    SC_METHOD(thread_tmp_8_fu_237_p2);
    sensitive << ( tmp_30_reg_356 );

    SC_METHOD(thread_tmp_fu_210_p3);
    sensitive << ( empty_12 );

    SC_METHOD(thread_tmp_s_fu_222_p2);
    sensitive << ( p_cast_fu_206_p1 );
    sensitive << ( p_shl1_fu_218_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_reset_idle_pp0 );
    sensitive << ( ap_reset_start_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aesl_mux_load_9_3_x_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
    sc_trace(mVcdFile, empty_2_Addr_A, "(port)empty_2_Addr_A");
    sc_trace(mVcdFile, empty_2_EN_A, "(port)empty_2_EN_A");
    sc_trace(mVcdFile, empty_2_WEN_A, "(port)empty_2_WEN_A");
    sc_trace(mVcdFile, empty_2_Din_A, "(port)empty_2_Din_A");
    sc_trace(mVcdFile, empty_2_Dout_A, "(port)empty_2_Dout_A");
    sc_trace(mVcdFile, empty_3_Addr_A, "(port)empty_3_Addr_A");
    sc_trace(mVcdFile, empty_3_EN_A, "(port)empty_3_EN_A");
    sc_trace(mVcdFile, empty_3_WEN_A, "(port)empty_3_WEN_A");
    sc_trace(mVcdFile, empty_3_Din_A, "(port)empty_3_Din_A");
    sc_trace(mVcdFile, empty_3_Dout_A, "(port)empty_3_Dout_A");
    sc_trace(mVcdFile, empty_4_Addr_A, "(port)empty_4_Addr_A");
    sc_trace(mVcdFile, empty_4_EN_A, "(port)empty_4_EN_A");
    sc_trace(mVcdFile, empty_4_WEN_A, "(port)empty_4_WEN_A");
    sc_trace(mVcdFile, empty_4_Din_A, "(port)empty_4_Din_A");
    sc_trace(mVcdFile, empty_4_Dout_A, "(port)empty_4_Dout_A");
    sc_trace(mVcdFile, empty_5_Addr_A, "(port)empty_5_Addr_A");
    sc_trace(mVcdFile, empty_5_EN_A, "(port)empty_5_EN_A");
    sc_trace(mVcdFile, empty_5_WEN_A, "(port)empty_5_WEN_A");
    sc_trace(mVcdFile, empty_5_Din_A, "(port)empty_5_Din_A");
    sc_trace(mVcdFile, empty_5_Dout_A, "(port)empty_5_Dout_A");
    sc_trace(mVcdFile, empty_6_Addr_A, "(port)empty_6_Addr_A");
    sc_trace(mVcdFile, empty_6_EN_A, "(port)empty_6_EN_A");
    sc_trace(mVcdFile, empty_6_WEN_A, "(port)empty_6_WEN_A");
    sc_trace(mVcdFile, empty_6_Din_A, "(port)empty_6_Din_A");
    sc_trace(mVcdFile, empty_6_Dout_A, "(port)empty_6_Dout_A");
    sc_trace(mVcdFile, empty_7_Addr_A, "(port)empty_7_Addr_A");
    sc_trace(mVcdFile, empty_7_EN_A, "(port)empty_7_EN_A");
    sc_trace(mVcdFile, empty_7_WEN_A, "(port)empty_7_WEN_A");
    sc_trace(mVcdFile, empty_7_Din_A, "(port)empty_7_Din_A");
    sc_trace(mVcdFile, empty_7_Dout_A, "(port)empty_7_Dout_A");
    sc_trace(mVcdFile, empty_8_Addr_A, "(port)empty_8_Addr_A");
    sc_trace(mVcdFile, empty_8_EN_A, "(port)empty_8_EN_A");
    sc_trace(mVcdFile, empty_8_WEN_A, "(port)empty_8_WEN_A");
    sc_trace(mVcdFile, empty_8_Din_A, "(port)empty_8_Din_A");
    sc_trace(mVcdFile, empty_8_Dout_A, "(port)empty_8_Dout_A");
    sc_trace(mVcdFile, empty_9_Addr_A, "(port)empty_9_Addr_A");
    sc_trace(mVcdFile, empty_9_EN_A, "(port)empty_9_EN_A");
    sc_trace(mVcdFile, empty_9_WEN_A, "(port)empty_9_WEN_A");
    sc_trace(mVcdFile, empty_9_Din_A, "(port)empty_9_Din_A");
    sc_trace(mVcdFile, empty_9_Dout_A, "(port)empty_9_Dout_A");
    sc_trace(mVcdFile, empty_10_Addr_A, "(port)empty_10_Addr_A");
    sc_trace(mVcdFile, empty_10_EN_A, "(port)empty_10_EN_A");
    sc_trace(mVcdFile, empty_10_WEN_A, "(port)empty_10_WEN_A");
    sc_trace(mVcdFile, empty_10_Din_A, "(port)empty_10_Din_A");
    sc_trace(mVcdFile, empty_10_Dout_A, "(port)empty_10_Dout_A");
    sc_trace(mVcdFile, empty_11, "(port)empty_11");
    sc_trace(mVcdFile, empty_12, "(port)empty_12");
    sc_trace(mVcdFile, empty_13, "(port)empty_13");
    sc_trace(mVcdFile, empty, "(port)empty");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, tmp_4_reg_339, "tmp_4_reg_339");
    sc_trace(mVcdFile, tmp_7_reg_344, "tmp_7_reg_344");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_7_reg_344, "ap_reg_pp0_iter1_tmp_7_reg_344");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_tmp_7_reg_344, "ap_reg_pp0_iter2_tmp_7_reg_344");
    sc_trace(mVcdFile, ap_reg_pp0_iter3_tmp_7_reg_344, "ap_reg_pp0_iter3_tmp_7_reg_344");
    sc_trace(mVcdFile, tmp_30_fu_228_p2, "tmp_30_fu_228_p2");
    sc_trace(mVcdFile, tmp_30_reg_356, "tmp_30_reg_356");
    sc_trace(mVcdFile, tmp_32_fu_247_p2, "tmp_32_fu_247_p2");
    sc_trace(mVcdFile, tmp_32_reg_362, "tmp_32_reg_362");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_tmp_32_reg_362, "ap_reg_pp0_iter2_tmp_32_reg_362");
    sc_trace(mVcdFile, empty_15_reg_420, "empty_15_reg_420");
    sc_trace(mVcdFile, empty_16_reg_425, "empty_16_reg_425");
    sc_trace(mVcdFile, empty_17_reg_430, "empty_17_reg_430");
    sc_trace(mVcdFile, empty_18_reg_435, "empty_18_reg_435");
    sc_trace(mVcdFile, empty_19_reg_440, "empty_19_reg_440");
    sc_trace(mVcdFile, sel_tmp_fu_253_p2, "sel_tmp_fu_253_p2");
    sc_trace(mVcdFile, sel_tmp_reg_445, "sel_tmp_reg_445");
    sc_trace(mVcdFile, sel_tmp2_fu_258_p2, "sel_tmp2_fu_258_p2");
    sc_trace(mVcdFile, sel_tmp2_reg_450, "sel_tmp2_reg_450");
    sc_trace(mVcdFile, sel_tmp4_fu_263_p2, "sel_tmp4_fu_263_p2");
    sc_trace(mVcdFile, sel_tmp4_reg_455, "sel_tmp4_reg_455");
    sc_trace(mVcdFile, sel_tmp6_fu_268_p2, "sel_tmp6_fu_268_p2");
    sc_trace(mVcdFile, sel_tmp6_reg_460, "sel_tmp6_reg_460");
    sc_trace(mVcdFile, empty_20_reg_465, "empty_20_reg_465");
    sc_trace(mVcdFile, empty_21_reg_470, "empty_21_reg_470");
    sc_trace(mVcdFile, empty_22_reg_475, "empty_22_reg_475");
    sc_trace(mVcdFile, empty_23_reg_480, "empty_23_reg_480");
    sc_trace(mVcdFile, sel_tmp7_fu_290_p3, "sel_tmp7_fu_290_p3");
    sc_trace(mVcdFile, sel_tmp7_reg_485, "sel_tmp7_reg_485");
    sc_trace(mVcdFile, sel_tmp8_fu_296_p2, "sel_tmp8_fu_296_p2");
    sc_trace(mVcdFile, sel_tmp8_reg_490, "sel_tmp8_reg_490");
    sc_trace(mVcdFile, sel_tmp10_fu_301_p2, "sel_tmp10_fu_301_p2");
    sc_trace(mVcdFile, sel_tmp10_reg_495, "sel_tmp10_reg_495");
    sc_trace(mVcdFile, sel_tmp12_fu_306_p2, "sel_tmp12_fu_306_p2");
    sc_trace(mVcdFile, sel_tmp12_reg_500, "sel_tmp12_reg_500");
    sc_trace(mVcdFile, sel_tmp14_fu_311_p2, "sel_tmp14_fu_311_p2");
    sc_trace(mVcdFile, sel_tmp14_reg_505, "sel_tmp14_reg_505");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, empty_10_Addr_A_orig, "empty_10_Addr_A_orig");
    sc_trace(mVcdFile, empty_2_Addr_A_orig, "empty_2_Addr_A_orig");
    sc_trace(mVcdFile, empty_3_Addr_A_orig, "empty_3_Addr_A_orig");
    sc_trace(mVcdFile, empty_4_Addr_A_orig, "empty_4_Addr_A_orig");
    sc_trace(mVcdFile, empty_5_Addr_A_orig, "empty_5_Addr_A_orig");
    sc_trace(mVcdFile, empty_6_Addr_A_orig, "empty_6_Addr_A_orig");
    sc_trace(mVcdFile, empty_7_Addr_A_orig, "empty_7_Addr_A_orig");
    sc_trace(mVcdFile, empty_8_Addr_A_orig, "empty_8_Addr_A_orig");
    sc_trace(mVcdFile, empty_9_Addr_A_orig, "empty_9_Addr_A_orig");
    sc_trace(mVcdFile, tmp_fu_210_p3, "tmp_fu_210_p3");
    sc_trace(mVcdFile, p_cast_fu_206_p1, "p_cast_fu_206_p1");
    sc_trace(mVcdFile, p_shl1_fu_218_p1, "p_shl1_fu_218_p1");
    sc_trace(mVcdFile, tmp_s_fu_222_p2, "tmp_s_fu_222_p2");
    sc_trace(mVcdFile, p_cast1_fu_202_p1, "p_cast1_fu_202_p1");
    sc_trace(mVcdFile, tmp_8_fu_237_p2, "tmp_8_fu_237_p2");
    sc_trace(mVcdFile, tmp_31_fu_242_p2, "tmp_31_fu_242_p2");
    sc_trace(mVcdFile, p_cast2_fu_234_p1, "p_cast2_fu_234_p1");
    sc_trace(mVcdFile, sel_tmp1_fu_273_p3, "sel_tmp1_fu_273_p3");
    sc_trace(mVcdFile, sel_tmp3_fu_278_p3, "sel_tmp3_fu_278_p3");
    sc_trace(mVcdFile, sel_tmp5_fu_284_p3, "sel_tmp5_fu_284_p3");
    sc_trace(mVcdFile, sel_tmp9_fu_316_p3, "sel_tmp9_fu_316_p3");
    sc_trace(mVcdFile, sel_tmp11_fu_321_p3, "sel_tmp11_fu_321_p3");
    sc_trace(mVcdFile, sel_tmp13_fu_327_p3, "sel_tmp13_fu_327_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to4, "ap_idle_pp0_0to4");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_reset_start_pp0, "ap_reset_start_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

aesl_mux_load_9_3_x_s::~aesl_mux_load_9_3_x_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aesl_mux_load_9_3_x_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_reg_pp0_iter1_tmp_7_reg_344 = tmp_7_reg_344.read();
        tmp_30_reg_356 = tmp_30_fu_228_p2.read();
        tmp_32_reg_362 = tmp_32_fu_247_p2.read();
        tmp_4_reg_339 = empty.read();
        tmp_7_reg_344 = empty_11.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_reg_pp0_iter2_tmp_32_reg_362 = tmp_32_reg_362.read();
        ap_reg_pp0_iter2_tmp_7_reg_344 = ap_reg_pp0_iter1_tmp_7_reg_344.read();
        ap_reg_pp0_iter3_tmp_7_reg_344 = ap_reg_pp0_iter2_tmp_7_reg_344.read();
        empty_15_reg_420 = empty_10_Dout_A.read();
        empty_16_reg_425 = empty_2_Dout_A.read();
        empty_17_reg_430 = empty_3_Dout_A.read();
        empty_18_reg_435 = empty_4_Dout_A.read();
        empty_19_reg_440 = empty_5_Dout_A.read();
        empty_20_reg_465 = empty_6_Dout_A.read();
        empty_21_reg_470 = empty_7_Dout_A.read();
        empty_22_reg_475 = empty_8_Dout_A.read();
        empty_23_reg_480 = empty_9_Dout_A.read();
        sel_tmp10_reg_495 = sel_tmp10_fu_301_p2.read();
        sel_tmp12_reg_500 = sel_tmp12_fu_306_p2.read();
        sel_tmp14_reg_505 = sel_tmp14_fu_311_p2.read();
        sel_tmp2_reg_450 = sel_tmp2_fu_258_p2.read();
        sel_tmp4_reg_455 = sel_tmp4_fu_263_p2.read();
        sel_tmp6_reg_460 = sel_tmp6_fu_268_p2.read();
        sel_tmp7_reg_485 = sel_tmp7_fu_290_p3.read();
        sel_tmp8_reg_490 = sel_tmp8_fu_296_p2.read();
        sel_tmp_reg_445 = sel_tmp_fu_253_p2.read();
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void aesl_mux_load_9_3_x_s::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void aesl_mux_load_9_3_x_s::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read())) || esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_0));
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter5.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void aesl_mux_load_9_3_x_s::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void aesl_mux_load_9_3_x_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_idle_pp0_0to4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0_0to4 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to4 = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to4.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_reset_start_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()))) {
        ap_reset_start_pp0 = ap_const_logic_1;
    } else {
        ap_reset_start_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_ap_return() {
    ap_return = (!sel_tmp14_reg_505.read()[0].is_01())? sc_lv<32>(): ((sel_tmp14_reg_505.read()[0].to_bool())? empty_23_reg_480.read(): sel_tmp13_fu_327_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_10_Addr_A() {
    empty_10_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_10_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_10_Addr_A_orig() {
    empty_10_Addr_A_orig =  (sc_lv<32>) (tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_10_Din_A() {
    empty_10_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_10_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_10_EN_A = ap_const_logic_1;
    } else {
        empty_10_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_10_WEN_A() {
    empty_10_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_2_Addr_A() {
    empty_2_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_2_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_2_Addr_A_orig() {
    empty_2_Addr_A_orig =  (sc_lv<32>) (tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_2_Din_A() {
    empty_2_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_2_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_2_EN_A = ap_const_logic_1;
    } else {
        empty_2_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_2_WEN_A() {
    empty_2_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_3_Addr_A() {
    empty_3_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_3_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_3_Addr_A_orig() {
    empty_3_Addr_A_orig =  (sc_lv<32>) (tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_3_Din_A() {
    empty_3_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_3_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_3_EN_A = ap_const_logic_1;
    } else {
        empty_3_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_3_WEN_A() {
    empty_3_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_4_Addr_A() {
    empty_4_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_4_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_4_Addr_A_orig() {
    empty_4_Addr_A_orig =  (sc_lv<32>) (tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_4_Din_A() {
    empty_4_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_4_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_4_EN_A = ap_const_logic_1;
    } else {
        empty_4_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_4_WEN_A() {
    empty_4_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_5_Addr_A() {
    empty_5_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_5_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_5_Addr_A_orig() {
    empty_5_Addr_A_orig =  (sc_lv<32>) (tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_5_Din_A() {
    empty_5_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_5_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_5_EN_A = ap_const_logic_1;
    } else {
        empty_5_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_5_WEN_A() {
    empty_5_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_6_Addr_A() {
    empty_6_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_6_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_6_Addr_A_orig() {
    empty_6_Addr_A_orig =  (sc_lv<32>) (ap_reg_pp0_iter2_tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_6_Din_A() {
    empty_6_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_6_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        empty_6_EN_A = ap_const_logic_1;
    } else {
        empty_6_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_6_WEN_A() {
    empty_6_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_7_Addr_A() {
    empty_7_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_7_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_7_Addr_A_orig() {
    empty_7_Addr_A_orig =  (sc_lv<32>) (ap_reg_pp0_iter2_tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_7_Din_A() {
    empty_7_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_7_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        empty_7_EN_A = ap_const_logic_1;
    } else {
        empty_7_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_7_WEN_A() {
    empty_7_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_8_Addr_A() {
    empty_8_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_8_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_8_Addr_A_orig() {
    empty_8_Addr_A_orig =  (sc_lv<32>) (ap_reg_pp0_iter2_tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_8_Din_A() {
    empty_8_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_8_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        empty_8_EN_A = ap_const_logic_1;
    } else {
        empty_8_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_8_WEN_A() {
    empty_8_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_9_Addr_A() {
    empty_9_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): empty_9_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_empty_9_Addr_A_orig() {
    empty_9_Addr_A_orig =  (sc_lv<32>) (ap_reg_pp0_iter2_tmp_32_reg_362.read());
}

void aesl_mux_load_9_3_x_s::thread_empty_9_Din_A() {
    empty_9_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_9_3_x_s::thread_empty_9_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter3.read()))) {
        empty_9_EN_A = ap_const_logic_1;
    } else {
        empty_9_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_9_3_x_s::thread_empty_9_WEN_A() {
    empty_9_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_9_3_x_s::thread_p_cast1_fu_202_p1() {
    p_cast1_fu_202_p1 = esl_zext<64,3>(empty_13.read());
}

void aesl_mux_load_9_3_x_s::thread_p_cast2_fu_234_p1() {
    p_cast2_fu_234_p1 = esl_zext<64,3>(tmp_4_reg_339.read());
}

void aesl_mux_load_9_3_x_s::thread_p_cast_fu_206_p1() {
    p_cast_fu_206_p1 = esl_zext<64,2>(empty_12.read());
}

void aesl_mux_load_9_3_x_s::thread_p_shl1_fu_218_p1() {
    p_shl1_fu_218_p1 = esl_zext<64,4>(tmp_fu_210_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp10_fu_301_p2() {
    sel_tmp10_fu_301_p2 = (!ap_reg_pp0_iter3_tmp_7_reg_344.read().is_01() || !ap_const_lv4_5.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter3_tmp_7_reg_344.read() == ap_const_lv4_5);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp11_fu_321_p3() {
    sel_tmp11_fu_321_p3 = (!sel_tmp10_reg_495.read()[0].is_01())? sc_lv<32>(): ((sel_tmp10_reg_495.read()[0].to_bool())? empty_21_reg_470.read(): sel_tmp9_fu_316_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp12_fu_306_p2() {
    sel_tmp12_fu_306_p2 = (!ap_reg_pp0_iter3_tmp_7_reg_344.read().is_01() || !ap_const_lv4_6.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter3_tmp_7_reg_344.read() == ap_const_lv4_6);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp13_fu_327_p3() {
    sel_tmp13_fu_327_p3 = (!sel_tmp12_reg_500.read()[0].is_01())? sc_lv<32>(): ((sel_tmp12_reg_500.read()[0].to_bool())? empty_22_reg_475.read(): sel_tmp11_fu_321_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp14_fu_311_p2() {
    sel_tmp14_fu_311_p2 = (!ap_reg_pp0_iter3_tmp_7_reg_344.read().is_01() || !ap_const_lv4_7.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter3_tmp_7_reg_344.read() == ap_const_lv4_7);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp1_fu_273_p3() {
    sel_tmp1_fu_273_p3 = (!sel_tmp_reg_445.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_reg_445.read()[0].to_bool())? empty_16_reg_425.read(): empty_15_reg_420.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp2_fu_258_p2() {
    sel_tmp2_fu_258_p2 = (!ap_reg_pp0_iter2_tmp_7_reg_344.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_7_reg_344.read() == ap_const_lv4_1);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp3_fu_278_p3() {
    sel_tmp3_fu_278_p3 = (!sel_tmp2_reg_450.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_reg_450.read()[0].to_bool())? empty_17_reg_430.read(): sel_tmp1_fu_273_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp4_fu_263_p2() {
    sel_tmp4_fu_263_p2 = (!ap_reg_pp0_iter2_tmp_7_reg_344.read().is_01() || !ap_const_lv4_2.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_7_reg_344.read() == ap_const_lv4_2);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp5_fu_284_p3() {
    sel_tmp5_fu_284_p3 = (!sel_tmp4_reg_455.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_reg_455.read()[0].to_bool())? empty_18_reg_435.read(): sel_tmp3_fu_278_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp6_fu_268_p2() {
    sel_tmp6_fu_268_p2 = (!ap_reg_pp0_iter2_tmp_7_reg_344.read().is_01() || !ap_const_lv4_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_7_reg_344.read() == ap_const_lv4_3);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp7_fu_290_p3() {
    sel_tmp7_fu_290_p3 = (!sel_tmp6_reg_460.read()[0].is_01())? sc_lv<32>(): ((sel_tmp6_reg_460.read()[0].to_bool())? empty_19_reg_440.read(): sel_tmp5_fu_284_p3.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp8_fu_296_p2() {
    sel_tmp8_fu_296_p2 = (!ap_reg_pp0_iter3_tmp_7_reg_344.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter3_tmp_7_reg_344.read() == ap_const_lv4_4);
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp9_fu_316_p3() {
    sel_tmp9_fu_316_p3 = (!sel_tmp8_reg_490.read()[0].is_01())? sc_lv<32>(): ((sel_tmp8_reg_490.read()[0].to_bool())? empty_20_reg_465.read(): sel_tmp7_reg_485.read());
}

void aesl_mux_load_9_3_x_s::thread_sel_tmp_fu_253_p2() {
    sel_tmp_fu_253_p2 = (!ap_reg_pp0_iter2_tmp_7_reg_344.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_7_reg_344.read() == ap_const_lv4_0);
}

void aesl_mux_load_9_3_x_s::thread_tmp_30_fu_228_p2() {
    tmp_30_fu_228_p2 = (!tmp_s_fu_222_p2.read().is_01() || !p_cast1_fu_202_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_s_fu_222_p2.read()) + sc_biguint<64>(p_cast1_fu_202_p1.read()));
}

void aesl_mux_load_9_3_x_s::thread_tmp_31_fu_242_p2() {
    tmp_31_fu_242_p2 = (!tmp_30_reg_356.read().is_01() || !tmp_8_fu_237_p2.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_30_reg_356.read()) + sc_biguint<64>(tmp_8_fu_237_p2.read()));
}

void aesl_mux_load_9_3_x_s::thread_tmp_32_fu_247_p2() {
    tmp_32_fu_247_p2 = (!tmp_31_fu_242_p2.read().is_01() || !p_cast2_fu_234_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_31_fu_242_p2.read()) + sc_biguint<64>(p_cast2_fu_234_p1.read()));
}

void aesl_mux_load_9_3_x_s::thread_tmp_8_fu_237_p2() {
    tmp_8_fu_237_p2 = (!ap_const_lv64_2.is_01())? sc_lv<64>(): tmp_30_reg_356.read() << (unsigned short)ap_const_lv64_2.to_uint();
}

void aesl_mux_load_9_3_x_s::thread_tmp_fu_210_p3() {
    tmp_fu_210_p3 = esl_concat<2,2>(empty_12.read(), ap_const_lv2_0);
}

void aesl_mux_load_9_3_x_s::thread_tmp_s_fu_222_p2() {
    tmp_s_fu_222_p2 = (!p_cast_fu_206_p1.read().is_01() || !p_shl1_fu_218_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(p_cast_fu_206_p1.read()) + sc_biguint<64>(p_shl1_fu_218_p1.read()));
}

void aesl_mux_load_9_3_x_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

