// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aesl_mux_load_9_3_x_s_HH_
#define _aesl_mux_load_9_3_x_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aesl_mux_load_9_3_x_s : public sc_module {
    // Port declarations 57
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_out< sc_lv<32> > empty_2_Addr_A;
    sc_out< sc_logic > empty_2_EN_A;
    sc_out< sc_lv<4> > empty_2_WEN_A;
    sc_out< sc_lv<32> > empty_2_Din_A;
    sc_in< sc_lv<32> > empty_2_Dout_A;
    sc_out< sc_lv<32> > empty_3_Addr_A;
    sc_out< sc_logic > empty_3_EN_A;
    sc_out< sc_lv<4> > empty_3_WEN_A;
    sc_out< sc_lv<32> > empty_3_Din_A;
    sc_in< sc_lv<32> > empty_3_Dout_A;
    sc_out< sc_lv<32> > empty_4_Addr_A;
    sc_out< sc_logic > empty_4_EN_A;
    sc_out< sc_lv<4> > empty_4_WEN_A;
    sc_out< sc_lv<32> > empty_4_Din_A;
    sc_in< sc_lv<32> > empty_4_Dout_A;
    sc_out< sc_lv<32> > empty_5_Addr_A;
    sc_out< sc_logic > empty_5_EN_A;
    sc_out< sc_lv<4> > empty_5_WEN_A;
    sc_out< sc_lv<32> > empty_5_Din_A;
    sc_in< sc_lv<32> > empty_5_Dout_A;
    sc_out< sc_lv<32> > empty_6_Addr_A;
    sc_out< sc_logic > empty_6_EN_A;
    sc_out< sc_lv<4> > empty_6_WEN_A;
    sc_out< sc_lv<32> > empty_6_Din_A;
    sc_in< sc_lv<32> > empty_6_Dout_A;
    sc_out< sc_lv<32> > empty_7_Addr_A;
    sc_out< sc_logic > empty_7_EN_A;
    sc_out< sc_lv<4> > empty_7_WEN_A;
    sc_out< sc_lv<32> > empty_7_Din_A;
    sc_in< sc_lv<32> > empty_7_Dout_A;
    sc_out< sc_lv<32> > empty_8_Addr_A;
    sc_out< sc_logic > empty_8_EN_A;
    sc_out< sc_lv<4> > empty_8_WEN_A;
    sc_out< sc_lv<32> > empty_8_Din_A;
    sc_in< sc_lv<32> > empty_8_Dout_A;
    sc_out< sc_lv<32> > empty_9_Addr_A;
    sc_out< sc_logic > empty_9_EN_A;
    sc_out< sc_lv<4> > empty_9_WEN_A;
    sc_out< sc_lv<32> > empty_9_Din_A;
    sc_in< sc_lv<32> > empty_9_Dout_A;
    sc_out< sc_lv<32> > empty_10_Addr_A;
    sc_out< sc_logic > empty_10_EN_A;
    sc_out< sc_lv<4> > empty_10_WEN_A;
    sc_out< sc_lv<32> > empty_10_Din_A;
    sc_in< sc_lv<32> > empty_10_Dout_A;
    sc_in< sc_lv<4> > empty_11;
    sc_in< sc_lv<2> > empty_12;
    sc_in< sc_lv<3> > empty_13;
    sc_in< sc_lv<3> > empty;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    aesl_mux_load_9_3_x_s(sc_module_name name);
    SC_HAS_PROCESS(aesl_mux_load_9_3_x_s);

    ~aesl_mux_load_9_3_x_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<3> > tmp_4_reg_339;
    sc_signal< sc_lv<4> > tmp_7_reg_344;
    sc_signal< sc_lv<4> > ap_reg_pp0_iter1_tmp_7_reg_344;
    sc_signal< sc_lv<4> > ap_reg_pp0_iter2_tmp_7_reg_344;
    sc_signal< sc_lv<4> > ap_reg_pp0_iter3_tmp_7_reg_344;
    sc_signal< sc_lv<64> > tmp_30_fu_228_p2;
    sc_signal< sc_lv<64> > tmp_30_reg_356;
    sc_signal< sc_lv<64> > tmp_32_fu_247_p2;
    sc_signal< sc_lv<64> > tmp_32_reg_362;
    sc_signal< sc_lv<64> > ap_reg_pp0_iter2_tmp_32_reg_362;
    sc_signal< sc_lv<32> > empty_15_reg_420;
    sc_signal< sc_lv<32> > empty_16_reg_425;
    sc_signal< sc_lv<32> > empty_17_reg_430;
    sc_signal< sc_lv<32> > empty_18_reg_435;
    sc_signal< sc_lv<32> > empty_19_reg_440;
    sc_signal< sc_lv<1> > sel_tmp_fu_253_p2;
    sc_signal< sc_lv<1> > sel_tmp_reg_445;
    sc_signal< sc_lv<1> > sel_tmp2_fu_258_p2;
    sc_signal< sc_lv<1> > sel_tmp2_reg_450;
    sc_signal< sc_lv<1> > sel_tmp4_fu_263_p2;
    sc_signal< sc_lv<1> > sel_tmp4_reg_455;
    sc_signal< sc_lv<1> > sel_tmp6_fu_268_p2;
    sc_signal< sc_lv<1> > sel_tmp6_reg_460;
    sc_signal< sc_lv<32> > empty_20_reg_465;
    sc_signal< sc_lv<32> > empty_21_reg_470;
    sc_signal< sc_lv<32> > empty_22_reg_475;
    sc_signal< sc_lv<32> > empty_23_reg_480;
    sc_signal< sc_lv<32> > sel_tmp7_fu_290_p3;
    sc_signal< sc_lv<32> > sel_tmp7_reg_485;
    sc_signal< sc_lv<1> > sel_tmp8_fu_296_p2;
    sc_signal< sc_lv<1> > sel_tmp8_reg_490;
    sc_signal< sc_lv<1> > sel_tmp10_fu_301_p2;
    sc_signal< sc_lv<1> > sel_tmp10_reg_495;
    sc_signal< sc_lv<1> > sel_tmp12_fu_306_p2;
    sc_signal< sc_lv<1> > sel_tmp12_reg_500;
    sc_signal< sc_lv<1> > sel_tmp14_fu_311_p2;
    sc_signal< sc_lv<1> > sel_tmp14_reg_505;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_lv<32> > empty_10_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_2_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_3_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_4_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_5_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_6_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_7_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_8_Addr_A_orig;
    sc_signal< sc_lv<32> > empty_9_Addr_A_orig;
    sc_signal< sc_lv<4> > tmp_fu_210_p3;
    sc_signal< sc_lv<64> > p_cast_fu_206_p1;
    sc_signal< sc_lv<64> > p_shl1_fu_218_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_222_p2;
    sc_signal< sc_lv<64> > p_cast1_fu_202_p1;
    sc_signal< sc_lv<64> > tmp_8_fu_237_p2;
    sc_signal< sc_lv<64> > tmp_31_fu_242_p2;
    sc_signal< sc_lv<64> > p_cast2_fu_234_p1;
    sc_signal< sc_lv<32> > sel_tmp1_fu_273_p3;
    sc_signal< sc_lv<32> > sel_tmp3_fu_278_p3;
    sc_signal< sc_lv<32> > sel_tmp5_fu_284_p3;
    sc_signal< sc_lv<32> > sel_tmp9_fu_316_p3;
    sc_signal< sc_lv<32> > sel_tmp11_fu_321_p3;
    sc_signal< sc_lv<32> > sel_tmp13_fu_327_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to4;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<4> ap_const_lv4_4;
    static const sc_lv<4> ap_const_lv4_5;
    static const sc_lv<4> ap_const_lv4_6;
    static const sc_lv<4> ap_const_lv4_7;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_block_state6_pp0_stage0_iter5();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to4();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_empty_10_Addr_A();
    void thread_empty_10_Addr_A_orig();
    void thread_empty_10_Din_A();
    void thread_empty_10_EN_A();
    void thread_empty_10_WEN_A();
    void thread_empty_2_Addr_A();
    void thread_empty_2_Addr_A_orig();
    void thread_empty_2_Din_A();
    void thread_empty_2_EN_A();
    void thread_empty_2_WEN_A();
    void thread_empty_3_Addr_A();
    void thread_empty_3_Addr_A_orig();
    void thread_empty_3_Din_A();
    void thread_empty_3_EN_A();
    void thread_empty_3_WEN_A();
    void thread_empty_4_Addr_A();
    void thread_empty_4_Addr_A_orig();
    void thread_empty_4_Din_A();
    void thread_empty_4_EN_A();
    void thread_empty_4_WEN_A();
    void thread_empty_5_Addr_A();
    void thread_empty_5_Addr_A_orig();
    void thread_empty_5_Din_A();
    void thread_empty_5_EN_A();
    void thread_empty_5_WEN_A();
    void thread_empty_6_Addr_A();
    void thread_empty_6_Addr_A_orig();
    void thread_empty_6_Din_A();
    void thread_empty_6_EN_A();
    void thread_empty_6_WEN_A();
    void thread_empty_7_Addr_A();
    void thread_empty_7_Addr_A_orig();
    void thread_empty_7_Din_A();
    void thread_empty_7_EN_A();
    void thread_empty_7_WEN_A();
    void thread_empty_8_Addr_A();
    void thread_empty_8_Addr_A_orig();
    void thread_empty_8_Din_A();
    void thread_empty_8_EN_A();
    void thread_empty_8_WEN_A();
    void thread_empty_9_Addr_A();
    void thread_empty_9_Addr_A_orig();
    void thread_empty_9_Din_A();
    void thread_empty_9_EN_A();
    void thread_empty_9_WEN_A();
    void thread_p_cast1_fu_202_p1();
    void thread_p_cast2_fu_234_p1();
    void thread_p_cast_fu_206_p1();
    void thread_p_shl1_fu_218_p1();
    void thread_sel_tmp10_fu_301_p2();
    void thread_sel_tmp11_fu_321_p3();
    void thread_sel_tmp12_fu_306_p2();
    void thread_sel_tmp13_fu_327_p3();
    void thread_sel_tmp14_fu_311_p2();
    void thread_sel_tmp1_fu_273_p3();
    void thread_sel_tmp2_fu_258_p2();
    void thread_sel_tmp3_fu_278_p3();
    void thread_sel_tmp4_fu_263_p2();
    void thread_sel_tmp5_fu_284_p3();
    void thread_sel_tmp6_fu_268_p2();
    void thread_sel_tmp7_fu_290_p3();
    void thread_sel_tmp8_fu_296_p2();
    void thread_sel_tmp9_fu_316_p3();
    void thread_sel_tmp_fu_253_p2();
    void thread_tmp_30_fu_228_p2();
    void thread_tmp_31_fu_242_p2();
    void thread_tmp_32_fu_247_p2();
    void thread_tmp_8_fu_237_p2();
    void thread_tmp_fu_210_p3();
    void thread_tmp_s_fu_222_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
