-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.3
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_kernel is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    bufw_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufw_EN_A : OUT STD_LOGIC;
    bufw_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufw_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufw_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufw_Clk_A : OUT STD_LOGIC;
    bufw_Rst_A : OUT STD_LOGIC;
    bufi_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufi_EN_A : OUT STD_LOGIC;
    bufi_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufi_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufi_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufi_Clk_A : OUT STD_LOGIC;
    bufi_Rst_A : OUT STD_LOGIC;
    bufo_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufo_EN_A : OUT STD_LOGIC;
    bufo_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    bufo_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    bufo_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    bufo_Clk_A : OUT STD_LOGIC;
    bufo_Rst_A : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of convolve_kernel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_kernel,hls_ip_2017_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.353000,HLS_SYN_LAT=37942,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=860,HLS_SYN_LUT=1412}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal row_b_cast6_cast_fu_164_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal row_b_cast6_cast_reg_454 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal row_b_cast_fu_168_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_b_cast_reg_459 : STD_LOGIC_VECTOR (2 downto 0);
    signal row_b_1_fu_178_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal row_b_1_reg_467 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_b_cast5_cast_fu_184_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal col_b_cast5_cast_reg_472 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal col_b_cast_fu_188_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_b_cast_reg_477 : STD_LOGIC_VECTOR (2 downto 0);
    signal col_b_1_fu_198_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal col_b_1_reg_485 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_10_cast_fu_226_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_cast_reg_490 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_11_fu_230_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_495 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal to_b_1_fu_241_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal to_b_1_reg_505 : STD_LOGIC_VECTOR (1 downto 0);
    signal bufo_addr_reg_510 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_17_fu_292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_515 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_19_cast_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_19_cast_reg_520 : STD_LOGIC_VECTOR (6 downto 0);
    signal ti_b_1_fu_326_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ti_b_1_reg_528 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_22_fu_357_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_reg_533 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_fu_369_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_541 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_375_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_reg_546 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_404_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_reg_551 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal bufw_addr_reg_556 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_1_fu_430_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_564 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_27_reg_569 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal bufw_load_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal bufi_load_reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal bufo_load_reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal row_b_reg_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_b_reg_101 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal to_b_reg_112 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ti_b_reg_123 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_reg_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_145 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal tmp_14_cast_fu_262_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_cast_fu_419_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_cast_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bufw_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal bufi_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal bufo_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_8_fu_208_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_216_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal to_b_cast4_cast_fu_204_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_247_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_fu_252_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_257_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ti_b_cast3_cast_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_271_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_fu_280_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_cast_fu_276_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl3_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_298_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl2_cast_fu_306_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_fu_310_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast2_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_fu_345_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_21_fu_341_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_349_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_9_cast_cast_fu_380_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_fu_383_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_28_fu_392_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_396_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_cast_fu_388_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast1_cast_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_26_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_436_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_cast_cast_fu_441_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component convolve_kernel_fbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_kernel_fcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_kernel_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    convolve_kernel_control_s_axi_U : component convolve_kernel_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    convolve_kernel_fbkb_U1 : component convolve_kernel_fbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bufo_load_reg_594,
        din1 => tmp_4_reg_589,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    convolve_kernel_fcud_U2 : component convolve_kernel_fcud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => bufw_load_reg_579,
        din1 => bufi_load_reg_584,
        ce => ap_const_logic_1,
        dout => grp_fu_160_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    col_b_reg_101_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_172_p2))) then 
                col_b_reg_101 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_3_reg_501 = ap_const_lv1_1))) then 
                col_b_reg_101 <= col_b_1_reg_485;
            end if; 
        end if;
    end process;

    i_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = tmp_5_fu_320_p2))) then 
                i_reg_134 <= ap_const_lv3_0;
            elsif (((tmp_s_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i_reg_134 <= i_1_reg_541;
            end if; 
        end if;
    end process;

    j_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                j_reg_145 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                j_reg_145 <= j_1_reg_564;
            end if; 
        end if;
    end process;

    row_b_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                row_b_reg_90 <= row_b_1_reg_467;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                row_b_reg_90 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ti_b_reg_123_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_3_reg_501 = ap_const_lv1_0))) then 
                ti_b_reg_123 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_7_fu_363_p2 = ap_const_lv1_1))) then 
                ti_b_reg_123 <= ti_b_1_reg_528;
            end if; 
        end if;
    end process;

    to_b_reg_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_1_fu_192_p2))) then 
                to_b_reg_112 <= ap_const_lv2_0;
            elsif (((ap_const_lv1_1 = tmp_5_fu_320_p2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                to_b_reg_112 <= to_b_1_reg_505;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                bufi_load_reg_584 <= bufi_Dout_A;
                bufw_load_reg_579 <= bufw_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                bufo_addr_reg_510 <= tmp_14_cast_fu_262_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                bufo_load_reg_594 <= bufo_Dout_A;
                tmp_4_reg_589 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                bufw_addr_reg_556 <= tmp_26_cast_fu_419_p1(8 - 1 downto 0);
                j_1_reg_564 <= j_1_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                col_b_1_reg_485 <= col_b_1_fu_198_p2;
                    col_b_cast5_cast_reg_472(1 downto 0) <= col_b_cast5_cast_fu_184_p1(1 downto 0);
                    col_b_cast_reg_477(1 downto 0) <= col_b_cast_fu_188_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_1_reg_541 <= i_1_fu_369_p2;
                tmp_22_reg_533 <= tmp_22_fu_357_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                row_b_1_reg_467 <= row_b_1_fu_178_p2;
                    row_b_cast6_cast_reg_454(1 downto 0) <= row_b_cast6_cast_fu_164_p1(1 downto 0);
                    row_b_cast_reg_459(1 downto 0) <= row_b_cast_fu_168_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ti_b_1_reg_528 <= ti_b_1_fu_326_p2;
                tmp_17_reg_515 <= tmp_17_fu_292_p2;
                tmp_19_cast_reg_520 <= tmp_19_cast_fu_316_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                tmp_10_cast_reg_490 <= tmp_10_cast_fu_226_p1;
                tmp_11_reg_495 <= tmp_11_fu_230_p2;
                tmp_3_reg_501 <= tmp_3_fu_235_p2;
                to_b_1_reg_505 <= to_b_1_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_25_reg_551 <= tmp_25_fu_404_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = tmp_s_fu_424_p2))) then
                tmp_27_reg_569 <= tmp_27_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                tmp_6_reg_599 <= grp_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_7_fu_363_p2 = ap_const_lv1_0))) then
                tmp_9_reg_546 <= tmp_9_fu_375_p2;
            end if;
        end if;
    end process;
    row_b_cast6_cast_reg_454(5 downto 2) <= "0000";
    row_b_cast_reg_459(2) <= '0';
    col_b_cast5_cast_reg_472(5 downto 2) <= "0000";
    col_b_cast_reg_477(2) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_3_reg_501, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, tmp_7_fu_363_p2, ap_CS_fsm_state9, tmp_s_fu_424_p2, tmp_1_fu_192_p2, tmp_fu_172_p2, tmp_5_fu_320_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_lv1_1 = tmp_fu_172_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_1_fu_192_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (tmp_3_reg_501 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_lv1_1 = tmp_5_fu_320_p2) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (tmp_7_fu_363_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((tmp_s_fu_424_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, tmp_fu_172_p2)
    begin
        if (((ap_const_lv1_1 = tmp_fu_172_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_fu_172_p2)
    begin
        if (((ap_const_lv1_1 = tmp_fu_172_p2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bufi_Addr_A <= std_logic_vector(shift_left(unsigned(bufi_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufi_Addr_A_orig <= tmp_27_cast_fu_450_p1(32 - 1 downto 0);
    bufi_Clk_A <= ap_clk;
    bufi_Din_A <= ap_const_lv32_0;

    bufi_EN_A_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bufi_EN_A <= ap_const_logic_1;
        else 
            bufi_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufi_Rst_A <= ap_rst_n_inv;
    bufi_WEN_A <= ap_const_lv4_0;
    bufo_Addr_A <= std_logic_vector(shift_left(unsigned(bufo_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufo_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bufo_addr_reg_510),32));
    bufo_Clk_A <= ap_clk;
    bufo_Din_A <= tmp_6_reg_599;

    bufo_EN_A_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            bufo_EN_A <= ap_const_logic_1;
        else 
            bufo_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufo_Rst_A <= ap_rst_n_inv;

    bufo_WEN_A_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            bufo_WEN_A <= ap_const_lv4_F;
        else 
            bufo_WEN_A <= ap_const_lv4_0;
        end if; 
    end process;

    bufw_Addr_A <= std_logic_vector(shift_left(unsigned(bufw_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    bufw_Addr_A_orig <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bufw_addr_reg_556),32));
    bufw_Clk_A <= ap_clk;
    bufw_Din_A <= ap_const_lv32_0;

    bufw_EN_A_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            bufw_EN_A <= ap_const_logic_1;
        else 
            bufw_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    bufw_Rst_A <= ap_rst_n_inv;
    bufw_WEN_A <= ap_const_lv4_0;
    col_b_1_fu_198_p2 <= std_logic_vector(unsigned(col_b_reg_101) + unsigned(ap_const_lv2_1));
    col_b_cast5_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_b_reg_101),6));
    col_b_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_b_reg_101),3));
    i_1_fu_369_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_reg_134));
    i_cast2_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_134),64));
    j_1_fu_430_p2 <= std_logic_vector(unsigned(j_reg_145) + unsigned(ap_const_lv3_1));
    j_cast1_cast_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_145),9));
    p_shl1_cast_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_208_p3),5));
    p_shl2_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_298_p3),6));
        p_shl3_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_16_fu_280_p3),64));

    p_shl4_cast_fu_349_p3 <= (tmp_24_fu_345_p1 & ap_const_lv2_0);
    p_shl5_cast_fu_396_p3 <= (tmp_28_fu_392_p1 & ap_const_lv3_0);
    row_b_1_fu_178_p2 <= std_logic_vector(unsigned(row_b_reg_90) + unsigned(ap_const_lv2_1));
    row_b_cast6_cast_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_b_reg_90),6));
    row_b_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(row_b_reg_90),3));
    ti_b_1_fu_326_p2 <= std_logic_vector(unsigned(ti_b_reg_123) + unsigned(ap_const_lv2_1));
    ti_b_cast3_cast_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ti_b_reg_123),6));
        tmp_10_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_fu_220_p2),6));

    tmp_10_fu_220_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_216_p1) - unsigned(to_b_cast4_cast_fu_204_p1));
    tmp_11_fu_230_p2 <= std_logic_vector(unsigned(row_b_cast6_cast_reg_454) + unsigned(tmp_10_cast_fu_226_p1));
    tmp_12_fu_247_p2 <= std_logic_vector(shift_left(unsigned(tmp_11_reg_495),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    tmp_13_fu_252_p2 <= std_logic_vector(unsigned(tmp_12_fu_247_p2) - unsigned(tmp_11_reg_495));
    tmp_14_cast_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_257_p2),64));
    tmp_14_fu_257_p2 <= std_logic_vector(unsigned(col_b_cast5_cast_reg_472) + unsigned(tmp_13_fu_252_p2));
        tmp_15_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_15_fu_271_p2),64));

    tmp_15_fu_271_p2 <= std_logic_vector(signed(tmp_10_cast_reg_490) + signed(ti_b_cast3_cast_fu_267_p1));
    tmp_16_fu_280_p3 <= (tmp_15_fu_271_p2 & ap_const_lv2_0);
    tmp_17_fu_292_p2 <= std_logic_vector(signed(tmp_15_cast_fu_276_p1) + signed(p_shl3_fu_288_p1));
    tmp_18_fu_298_p3 <= (ti_b_reg_123 & ap_const_lv3_0);
        tmp_19_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_310_p2),7));

    tmp_19_fu_310_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_306_p1) - unsigned(ti_b_cast3_cast_fu_267_p1));
    tmp_1_fu_192_p2 <= "1" when (col_b_reg_101 = ap_const_lv2_3) else "0";
    tmp_20_fu_336_p2 <= std_logic_vector(unsigned(tmp_17_reg_515) + unsigned(i_cast2_fu_332_p1));
    tmp_21_fu_341_p1 <= tmp_20_fu_336_p2(9 - 1 downto 0);
    tmp_22_fu_357_p2 <= std_logic_vector(unsigned(tmp_21_fu_341_p1) + unsigned(p_shl4_cast_fu_349_p3));
        tmp_23_cast_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_23_fu_383_p2),9));

    tmp_23_fu_383_p2 <= std_logic_vector(unsigned(tmp_9_cast_cast_fu_380_p1) + unsigned(tmp_19_cast_reg_520));
    tmp_24_fu_345_p1 <= tmp_20_fu_336_p2(7 - 1 downto 0);
    tmp_25_fu_404_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_396_p3) - unsigned(tmp_23_cast_fu_388_p1));
    tmp_26_cast_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_414_p2),64));
    tmp_26_fu_414_p2 <= std_logic_vector(unsigned(tmp_22_reg_533) + unsigned(j_cast1_cast_fu_410_p1));
    tmp_27_cast_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_reg_569),64));
    tmp_27_fu_445_p2 <= std_logic_vector(unsigned(tmp_25_reg_551) + unsigned(tmp_2_cast_cast_fu_441_p1));
    tmp_28_fu_392_p1 <= tmp_23_fu_383_p2(6 - 1 downto 0);
    tmp_2_cast_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_436_p2),9));
    tmp_2_fu_436_p2 <= std_logic_vector(unsigned(col_b_cast_reg_477) + unsigned(j_reg_145));
    tmp_3_fu_235_p2 <= "1" when (to_b_reg_112 = ap_const_lv2_3) else "0";
    tmp_5_fu_320_p2 <= "1" when (ti_b_reg_123 = ap_const_lv2_3) else "0";
    tmp_7_fu_363_p2 <= "1" when (i_reg_134 = ap_const_lv3_5) else "0";
    tmp_8_fu_208_p3 <= (to_b_reg_112 & ap_const_lv2_0);
    tmp_9_cast_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_546),7));
    tmp_9_fu_375_p2 <= std_logic_vector(unsigned(i_reg_134) + unsigned(row_b_cast_reg_459));
    tmp_fu_172_p2 <= "1" when (row_b_reg_90 = ap_const_lv2_3) else "0";
    tmp_s_fu_424_p2 <= "1" when (j_reg_145 = ap_const_lv3_5) else "0";
    to_b_1_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(to_b_reg_112));
    to_b_cast4_cast_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(to_b_reg_112),5));
end behav;
