// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.3
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "convolve_kernel.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic convolve_kernel::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic convolve_kernel::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> convolve_kernel::ap_ST_fsm_state1 = "1";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state2 = "10";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state3 = "100";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state4 = "1000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state5 = "10000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state6 = "100000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<26> convolve_kernel::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> convolve_kernel::ap_const_lv32_0 = "00000000000000000000000000000000";
const int convolve_kernel::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> convolve_kernel::ap_const_lv32_1 = "1";
const sc_lv<32> convolve_kernel::ap_const_lv32_2 = "10";
const sc_lv<32> convolve_kernel::ap_const_lv32_3 = "11";
const sc_lv<32> convolve_kernel::ap_const_lv32_4 = "100";
const sc_lv<32> convolve_kernel::ap_const_lv32_5 = "101";
const sc_lv<32> convolve_kernel::ap_const_lv32_6 = "110";
const sc_lv<1> convolve_kernel::ap_const_lv1_0 = "0";
const sc_lv<32> convolve_kernel::ap_const_lv32_7 = "111";
const sc_lv<32> convolve_kernel::ap_const_lv32_8 = "1000";
const sc_lv<32> convolve_kernel::ap_const_lv32_9 = "1001";
const sc_lv<32> convolve_kernel::ap_const_lv32_A = "1010";
const sc_lv<32> convolve_kernel::ap_const_lv32_F = "1111";
const sc_lv<32> convolve_kernel::ap_const_lv32_18 = "11000";
const sc_lv<2> convolve_kernel::ap_const_lv2_0 = "00";
const sc_lv<1> convolve_kernel::ap_const_lv1_1 = "1";
const sc_lv<3> convolve_kernel::ap_const_lv3_0 = "000";
const sc_lv<32> convolve_kernel::ap_const_lv32_19 = "11001";
const sc_lv<32> convolve_kernel::ap_const_lv32_E = "1110";
const sc_lv<4> convolve_kernel::ap_const_lv4_0 = "0000";
const sc_lv<4> convolve_kernel::ap_const_lv4_F = "1111";
const sc_lv<32> convolve_kernel::ap_const_lv32_10 = "10000";
const sc_lv<32> convolve_kernel::ap_const_lv32_B = "1011";
const sc_lv<2> convolve_kernel::ap_const_lv2_3 = "11";
const sc_lv<2> convolve_kernel::ap_const_lv2_1 = "1";
const sc_lv<6> convolve_kernel::ap_const_lv6_2 = "10";
const sc_lv<3> convolve_kernel::ap_const_lv3_5 = "101";
const sc_lv<3> convolve_kernel::ap_const_lv3_1 = "1";
const bool convolve_kernel::ap_const_boolean_1 = true;

convolve_kernel::convolve_kernel(sc_module_name name) : sc_module(name), mVcdFile(0) {
    convolve_kernel_control_s_axi_U = new convolve_kernel_control_s_axi<C_S_AXI_CONTROL_ADDR_WIDTH,C_S_AXI_CONTROL_DATA_WIDTH>("convolve_kernel_control_s_axi_U");
    convolve_kernel_control_s_axi_U->AWVALID(s_axi_control_AWVALID);
    convolve_kernel_control_s_axi_U->AWREADY(s_axi_control_AWREADY);
    convolve_kernel_control_s_axi_U->AWADDR(s_axi_control_AWADDR);
    convolve_kernel_control_s_axi_U->WVALID(s_axi_control_WVALID);
    convolve_kernel_control_s_axi_U->WREADY(s_axi_control_WREADY);
    convolve_kernel_control_s_axi_U->WDATA(s_axi_control_WDATA);
    convolve_kernel_control_s_axi_U->WSTRB(s_axi_control_WSTRB);
    convolve_kernel_control_s_axi_U->ARVALID(s_axi_control_ARVALID);
    convolve_kernel_control_s_axi_U->ARREADY(s_axi_control_ARREADY);
    convolve_kernel_control_s_axi_U->ARADDR(s_axi_control_ARADDR);
    convolve_kernel_control_s_axi_U->RVALID(s_axi_control_RVALID);
    convolve_kernel_control_s_axi_U->RREADY(s_axi_control_RREADY);
    convolve_kernel_control_s_axi_U->RDATA(s_axi_control_RDATA);
    convolve_kernel_control_s_axi_U->RRESP(s_axi_control_RRESP);
    convolve_kernel_control_s_axi_U->BVALID(s_axi_control_BVALID);
    convolve_kernel_control_s_axi_U->BREADY(s_axi_control_BREADY);
    convolve_kernel_control_s_axi_U->BRESP(s_axi_control_BRESP);
    convolve_kernel_control_s_axi_U->ACLK(ap_clk);
    convolve_kernel_control_s_axi_U->ARESET(ap_rst_n_inv);
    convolve_kernel_control_s_axi_U->ACLK_EN(ap_var_for_const0);
    convolve_kernel_control_s_axi_U->ap_start(ap_start);
    convolve_kernel_control_s_axi_U->interrupt(interrupt);
    convolve_kernel_control_s_axi_U->ap_ready(ap_ready);
    convolve_kernel_control_s_axi_U->ap_done(ap_done);
    convolve_kernel_control_s_axi_U->ap_idle(ap_idle);
    convolve_kernel_fbkb_U1 = new convolve_kernel_fbkb<1,9,32,32,32>("convolve_kernel_fbkb_U1");
    convolve_kernel_fbkb_U1->clk(ap_clk);
    convolve_kernel_fbkb_U1->reset(ap_rst_n_inv);
    convolve_kernel_fbkb_U1->din0(bufo_load_reg_594);
    convolve_kernel_fbkb_U1->din1(tmp_4_reg_589);
    convolve_kernel_fbkb_U1->ce(ap_var_for_const0);
    convolve_kernel_fbkb_U1->dout(grp_fu_156_p2);
    convolve_kernel_fcud_U2 = new convolve_kernel_fcud<1,5,32,32,32>("convolve_kernel_fcud_U2");
    convolve_kernel_fcud_U2->clk(ap_clk);
    convolve_kernel_fcud_U2->reset(ap_rst_n_inv);
    convolve_kernel_fcud_U2->din0(bufw_load_reg_579);
    convolve_kernel_fcud_U2->din1(bufi_load_reg_584);
    convolve_kernel_fcud_U2->ce(ap_var_for_const0);
    convolve_kernel_fcud_U2->dout(grp_fu_160_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_172_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_172_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_bufi_Addr_A);
    sensitive << ( bufi_Addr_A_orig );

    SC_METHOD(thread_bufi_Addr_A_orig);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_27_cast_fu_450_p1 );

    SC_METHOD(thread_bufi_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_bufi_Din_A);

    SC_METHOD(thread_bufi_EN_A);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_bufi_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_bufi_WEN_A);

    SC_METHOD(thread_bufo_Addr_A);
    sensitive << ( bufo_Addr_A_orig );

    SC_METHOD(thread_bufo_Addr_A_orig);
    sensitive << ( bufo_addr_reg_510 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_bufo_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_bufo_Din_A);
    sensitive << ( tmp_6_reg_599 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_bufo_EN_A);
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state15 );

    SC_METHOD(thread_bufo_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_bufo_WEN_A);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_bufw_Addr_A);
    sensitive << ( bufw_Addr_A_orig );

    SC_METHOD(thread_bufw_Addr_A_orig);
    sensitive << ( bufw_addr_reg_556 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_bufw_Clk_A);
    sensitive << ( ap_clk );

    SC_METHOD(thread_bufw_Din_A);

    SC_METHOD(thread_bufw_EN_A);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_bufw_Rst_A);
    sensitive << ( ap_rst_n_inv );

    SC_METHOD(thread_bufw_WEN_A);

    SC_METHOD(thread_col_b_1_fu_198_p2);
    sensitive << ( col_b_reg_101 );

    SC_METHOD(thread_col_b_cast5_cast_fu_184_p1);
    sensitive << ( col_b_reg_101 );

    SC_METHOD(thread_col_b_cast_fu_188_p1);
    sensitive << ( col_b_reg_101 );

    SC_METHOD(thread_i_1_fu_369_p2);
    sensitive << ( i_reg_134 );

    SC_METHOD(thread_i_cast2_fu_332_p1);
    sensitive << ( i_reg_134 );

    SC_METHOD(thread_j_1_fu_430_p2);
    sensitive << ( j_reg_145 );

    SC_METHOD(thread_j_cast1_cast_fu_410_p1);
    sensitive << ( j_reg_145 );

    SC_METHOD(thread_p_shl1_cast_fu_216_p1);
    sensitive << ( tmp_8_fu_208_p3 );

    SC_METHOD(thread_p_shl2_cast_fu_306_p1);
    sensitive << ( tmp_18_fu_298_p3 );

    SC_METHOD(thread_p_shl3_fu_288_p1);
    sensitive << ( tmp_16_fu_280_p3 );

    SC_METHOD(thread_p_shl4_cast_fu_349_p3);
    sensitive << ( tmp_24_fu_345_p1 );

    SC_METHOD(thread_p_shl5_cast_fu_396_p3);
    sensitive << ( tmp_28_fu_392_p1 );

    SC_METHOD(thread_row_b_1_fu_178_p2);
    sensitive << ( row_b_reg_90 );

    SC_METHOD(thread_row_b_cast6_cast_fu_164_p1);
    sensitive << ( row_b_reg_90 );

    SC_METHOD(thread_row_b_cast_fu_168_p1);
    sensitive << ( row_b_reg_90 );

    SC_METHOD(thread_ti_b_1_fu_326_p2);
    sensitive << ( ti_b_reg_123 );

    SC_METHOD(thread_ti_b_cast3_cast_fu_267_p1);
    sensitive << ( ti_b_reg_123 );

    SC_METHOD(thread_tmp_10_cast_fu_226_p1);
    sensitive << ( tmp_10_fu_220_p2 );

    SC_METHOD(thread_tmp_10_fu_220_p2);
    sensitive << ( p_shl1_cast_fu_216_p1 );
    sensitive << ( to_b_cast4_cast_fu_204_p1 );

    SC_METHOD(thread_tmp_11_fu_230_p2);
    sensitive << ( row_b_cast6_cast_reg_454 );
    sensitive << ( tmp_10_cast_fu_226_p1 );

    SC_METHOD(thread_tmp_12_fu_247_p2);
    sensitive << ( tmp_11_reg_495 );

    SC_METHOD(thread_tmp_13_fu_252_p2);
    sensitive << ( tmp_11_reg_495 );
    sensitive << ( tmp_12_fu_247_p2 );

    SC_METHOD(thread_tmp_14_cast_fu_262_p1);
    sensitive << ( tmp_14_fu_257_p2 );

    SC_METHOD(thread_tmp_14_fu_257_p2);
    sensitive << ( col_b_cast5_cast_reg_472 );
    sensitive << ( tmp_13_fu_252_p2 );

    SC_METHOD(thread_tmp_15_cast_fu_276_p1);
    sensitive << ( tmp_15_fu_271_p2 );

    SC_METHOD(thread_tmp_15_fu_271_p2);
    sensitive << ( tmp_10_cast_reg_490 );
    sensitive << ( ti_b_cast3_cast_fu_267_p1 );

    SC_METHOD(thread_tmp_16_fu_280_p3);
    sensitive << ( tmp_15_fu_271_p2 );

    SC_METHOD(thread_tmp_17_fu_292_p2);
    sensitive << ( tmp_15_cast_fu_276_p1 );
    sensitive << ( p_shl3_fu_288_p1 );

    SC_METHOD(thread_tmp_18_fu_298_p3);
    sensitive << ( ti_b_reg_123 );

    SC_METHOD(thread_tmp_19_cast_fu_316_p1);
    sensitive << ( tmp_19_fu_310_p2 );

    SC_METHOD(thread_tmp_19_fu_310_p2);
    sensitive << ( ti_b_cast3_cast_fu_267_p1 );
    sensitive << ( p_shl2_cast_fu_306_p1 );

    SC_METHOD(thread_tmp_1_fu_192_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( col_b_reg_101 );

    SC_METHOD(thread_tmp_20_fu_336_p2);
    sensitive << ( tmp_17_reg_515 );
    sensitive << ( i_cast2_fu_332_p1 );

    SC_METHOD(thread_tmp_21_fu_341_p1);
    sensitive << ( tmp_20_fu_336_p2 );

    SC_METHOD(thread_tmp_22_fu_357_p2);
    sensitive << ( tmp_21_fu_341_p1 );
    sensitive << ( p_shl4_cast_fu_349_p3 );

    SC_METHOD(thread_tmp_23_cast_fu_388_p1);
    sensitive << ( tmp_23_fu_383_p2 );

    SC_METHOD(thread_tmp_23_fu_383_p2);
    sensitive << ( tmp_19_cast_reg_520 );
    sensitive << ( tmp_9_cast_cast_fu_380_p1 );

    SC_METHOD(thread_tmp_24_fu_345_p1);
    sensitive << ( tmp_20_fu_336_p2 );

    SC_METHOD(thread_tmp_25_fu_404_p2);
    sensitive << ( p_shl5_cast_fu_396_p3 );
    sensitive << ( tmp_23_cast_fu_388_p1 );

    SC_METHOD(thread_tmp_26_cast_fu_419_p1);
    sensitive << ( tmp_26_fu_414_p2 );

    SC_METHOD(thread_tmp_26_fu_414_p2);
    sensitive << ( tmp_22_reg_533 );
    sensitive << ( j_cast1_cast_fu_410_p1 );

    SC_METHOD(thread_tmp_27_cast_fu_450_p1);
    sensitive << ( tmp_27_reg_569 );

    SC_METHOD(thread_tmp_27_fu_445_p2);
    sensitive << ( tmp_25_reg_551 );
    sensitive << ( tmp_2_cast_cast_fu_441_p1 );

    SC_METHOD(thread_tmp_28_fu_392_p1);
    sensitive << ( tmp_23_fu_383_p2 );

    SC_METHOD(thread_tmp_2_cast_cast_fu_441_p1);
    sensitive << ( tmp_2_fu_436_p2 );

    SC_METHOD(thread_tmp_2_fu_436_p2);
    sensitive << ( col_b_cast_reg_477 );
    sensitive << ( j_reg_145 );

    SC_METHOD(thread_tmp_3_fu_235_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( to_b_reg_112 );

    SC_METHOD(thread_tmp_5_fu_320_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ti_b_reg_123 );

    SC_METHOD(thread_tmp_7_fu_363_p2);
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( i_reg_134 );

    SC_METHOD(thread_tmp_8_fu_208_p3);
    sensitive << ( to_b_reg_112 );

    SC_METHOD(thread_tmp_9_cast_cast_fu_380_p1);
    sensitive << ( tmp_9_reg_546 );

    SC_METHOD(thread_tmp_9_fu_375_p2);
    sensitive << ( row_b_cast_reg_459 );
    sensitive << ( i_reg_134 );

    SC_METHOD(thread_tmp_fu_172_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( row_b_reg_90 );

    SC_METHOD(thread_tmp_s_fu_424_p2);
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( j_reg_145 );

    SC_METHOD(thread_to_b_1_fu_241_p2);
    sensitive << ( to_b_reg_112 );

    SC_METHOD(thread_to_b_cast4_cast_fu_204_p1);
    sensitive << ( to_b_reg_112 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_3_reg_501 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( tmp_7_fu_363_p2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_s_fu_424_p2 );
    sensitive << ( tmp_1_fu_192_p2 );
    sensitive << ( tmp_fu_172_p2 );
    sensitive << ( tmp_5_fu_320_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "convolve_kernel_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, bufw_Addr_A, "(port)bufw_Addr_A");
    sc_trace(mVcdFile, bufw_EN_A, "(port)bufw_EN_A");
    sc_trace(mVcdFile, bufw_WEN_A, "(port)bufw_WEN_A");
    sc_trace(mVcdFile, bufw_Din_A, "(port)bufw_Din_A");
    sc_trace(mVcdFile, bufw_Dout_A, "(port)bufw_Dout_A");
    sc_trace(mVcdFile, bufw_Clk_A, "(port)bufw_Clk_A");
    sc_trace(mVcdFile, bufw_Rst_A, "(port)bufw_Rst_A");
    sc_trace(mVcdFile, bufi_Addr_A, "(port)bufi_Addr_A");
    sc_trace(mVcdFile, bufi_EN_A, "(port)bufi_EN_A");
    sc_trace(mVcdFile, bufi_WEN_A, "(port)bufi_WEN_A");
    sc_trace(mVcdFile, bufi_Din_A, "(port)bufi_Din_A");
    sc_trace(mVcdFile, bufi_Dout_A, "(port)bufi_Dout_A");
    sc_trace(mVcdFile, bufi_Clk_A, "(port)bufi_Clk_A");
    sc_trace(mVcdFile, bufi_Rst_A, "(port)bufi_Rst_A");
    sc_trace(mVcdFile, bufo_Addr_A, "(port)bufo_Addr_A");
    sc_trace(mVcdFile, bufo_EN_A, "(port)bufo_EN_A");
    sc_trace(mVcdFile, bufo_WEN_A, "(port)bufo_WEN_A");
    sc_trace(mVcdFile, bufo_Din_A, "(port)bufo_Din_A");
    sc_trace(mVcdFile, bufo_Dout_A, "(port)bufo_Dout_A");
    sc_trace(mVcdFile, bufo_Clk_A, "(port)bufo_Clk_A");
    sc_trace(mVcdFile, bufo_Rst_A, "(port)bufo_Rst_A");
    sc_trace(mVcdFile, s_axi_control_AWVALID, "(port)s_axi_control_AWVALID");
    sc_trace(mVcdFile, s_axi_control_AWREADY, "(port)s_axi_control_AWREADY");
    sc_trace(mVcdFile, s_axi_control_AWADDR, "(port)s_axi_control_AWADDR");
    sc_trace(mVcdFile, s_axi_control_WVALID, "(port)s_axi_control_WVALID");
    sc_trace(mVcdFile, s_axi_control_WREADY, "(port)s_axi_control_WREADY");
    sc_trace(mVcdFile, s_axi_control_WDATA, "(port)s_axi_control_WDATA");
    sc_trace(mVcdFile, s_axi_control_WSTRB, "(port)s_axi_control_WSTRB");
    sc_trace(mVcdFile, s_axi_control_ARVALID, "(port)s_axi_control_ARVALID");
    sc_trace(mVcdFile, s_axi_control_ARREADY, "(port)s_axi_control_ARREADY");
    sc_trace(mVcdFile, s_axi_control_ARADDR, "(port)s_axi_control_ARADDR");
    sc_trace(mVcdFile, s_axi_control_RVALID, "(port)s_axi_control_RVALID");
    sc_trace(mVcdFile, s_axi_control_RREADY, "(port)s_axi_control_RREADY");
    sc_trace(mVcdFile, s_axi_control_RDATA, "(port)s_axi_control_RDATA");
    sc_trace(mVcdFile, s_axi_control_RRESP, "(port)s_axi_control_RRESP");
    sc_trace(mVcdFile, s_axi_control_BVALID, "(port)s_axi_control_BVALID");
    sc_trace(mVcdFile, s_axi_control_BREADY, "(port)s_axi_control_BREADY");
    sc_trace(mVcdFile, s_axi_control_BRESP, "(port)s_axi_control_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, row_b_cast6_cast_fu_164_p1, "row_b_cast6_cast_fu_164_p1");
    sc_trace(mVcdFile, row_b_cast6_cast_reg_454, "row_b_cast6_cast_reg_454");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, row_b_cast_fu_168_p1, "row_b_cast_fu_168_p1");
    sc_trace(mVcdFile, row_b_cast_reg_459, "row_b_cast_reg_459");
    sc_trace(mVcdFile, row_b_1_fu_178_p2, "row_b_1_fu_178_p2");
    sc_trace(mVcdFile, row_b_1_reg_467, "row_b_1_reg_467");
    sc_trace(mVcdFile, col_b_cast5_cast_fu_184_p1, "col_b_cast5_cast_fu_184_p1");
    sc_trace(mVcdFile, col_b_cast5_cast_reg_472, "col_b_cast5_cast_reg_472");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, col_b_cast_fu_188_p1, "col_b_cast_fu_188_p1");
    sc_trace(mVcdFile, col_b_cast_reg_477, "col_b_cast_reg_477");
    sc_trace(mVcdFile, col_b_1_fu_198_p2, "col_b_1_fu_198_p2");
    sc_trace(mVcdFile, col_b_1_reg_485, "col_b_1_reg_485");
    sc_trace(mVcdFile, tmp_10_cast_fu_226_p1, "tmp_10_cast_fu_226_p1");
    sc_trace(mVcdFile, tmp_10_cast_reg_490, "tmp_10_cast_reg_490");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_11_fu_230_p2, "tmp_11_fu_230_p2");
    sc_trace(mVcdFile, tmp_11_reg_495, "tmp_11_reg_495");
    sc_trace(mVcdFile, tmp_3_fu_235_p2, "tmp_3_fu_235_p2");
    sc_trace(mVcdFile, tmp_3_reg_501, "tmp_3_reg_501");
    sc_trace(mVcdFile, to_b_1_fu_241_p2, "to_b_1_fu_241_p2");
    sc_trace(mVcdFile, to_b_1_reg_505, "to_b_1_reg_505");
    sc_trace(mVcdFile, bufo_addr_reg_510, "bufo_addr_reg_510");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_17_fu_292_p2, "tmp_17_fu_292_p2");
    sc_trace(mVcdFile, tmp_17_reg_515, "tmp_17_reg_515");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_19_cast_fu_316_p1, "tmp_19_cast_fu_316_p1");
    sc_trace(mVcdFile, tmp_19_cast_reg_520, "tmp_19_cast_reg_520");
    sc_trace(mVcdFile, ti_b_1_fu_326_p2, "ti_b_1_fu_326_p2");
    sc_trace(mVcdFile, ti_b_1_reg_528, "ti_b_1_reg_528");
    sc_trace(mVcdFile, tmp_22_fu_357_p2, "tmp_22_fu_357_p2");
    sc_trace(mVcdFile, tmp_22_reg_533, "tmp_22_reg_533");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_1_fu_369_p2, "i_1_fu_369_p2");
    sc_trace(mVcdFile, i_1_reg_541, "i_1_reg_541");
    sc_trace(mVcdFile, tmp_9_fu_375_p2, "tmp_9_fu_375_p2");
    sc_trace(mVcdFile, tmp_9_reg_546, "tmp_9_reg_546");
    sc_trace(mVcdFile, tmp_7_fu_363_p2, "tmp_7_fu_363_p2");
    sc_trace(mVcdFile, tmp_25_fu_404_p2, "tmp_25_fu_404_p2");
    sc_trace(mVcdFile, tmp_25_reg_551, "tmp_25_reg_551");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, bufw_addr_reg_556, "bufw_addr_reg_556");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, j_1_fu_430_p2, "j_1_fu_430_p2");
    sc_trace(mVcdFile, j_1_reg_564, "j_1_reg_564");
    sc_trace(mVcdFile, tmp_27_fu_445_p2, "tmp_27_fu_445_p2");
    sc_trace(mVcdFile, tmp_27_reg_569, "tmp_27_reg_569");
    sc_trace(mVcdFile, tmp_s_fu_424_p2, "tmp_s_fu_424_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, bufw_load_reg_579, "bufw_load_reg_579");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, bufi_load_reg_584, "bufi_load_reg_584");
    sc_trace(mVcdFile, grp_fu_160_p2, "grp_fu_160_p2");
    sc_trace(mVcdFile, tmp_4_reg_589, "tmp_4_reg_589");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, bufo_load_reg_594, "bufo_load_reg_594");
    sc_trace(mVcdFile, grp_fu_156_p2, "grp_fu_156_p2");
    sc_trace(mVcdFile, tmp_6_reg_599, "tmp_6_reg_599");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, row_b_reg_90, "row_b_reg_90");
    sc_trace(mVcdFile, tmp_1_fu_192_p2, "tmp_1_fu_192_p2");
    sc_trace(mVcdFile, col_b_reg_101, "col_b_reg_101");
    sc_trace(mVcdFile, tmp_fu_172_p2, "tmp_fu_172_p2");
    sc_trace(mVcdFile, to_b_reg_112, "to_b_reg_112");
    sc_trace(mVcdFile, tmp_5_fu_320_p2, "tmp_5_fu_320_p2");
    sc_trace(mVcdFile, ti_b_reg_123, "ti_b_reg_123");
    sc_trace(mVcdFile, i_reg_134, "i_reg_134");
    sc_trace(mVcdFile, j_reg_145, "j_reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, tmp_14_cast_fu_262_p1, "tmp_14_cast_fu_262_p1");
    sc_trace(mVcdFile, tmp_26_cast_fu_419_p1, "tmp_26_cast_fu_419_p1");
    sc_trace(mVcdFile, tmp_27_cast_fu_450_p1, "tmp_27_cast_fu_450_p1");
    sc_trace(mVcdFile, bufw_Addr_A_orig, "bufw_Addr_A_orig");
    sc_trace(mVcdFile, bufi_Addr_A_orig, "bufi_Addr_A_orig");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, bufo_Addr_A_orig, "bufo_Addr_A_orig");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_8_fu_208_p3, "tmp_8_fu_208_p3");
    sc_trace(mVcdFile, p_shl1_cast_fu_216_p1, "p_shl1_cast_fu_216_p1");
    sc_trace(mVcdFile, to_b_cast4_cast_fu_204_p1, "to_b_cast4_cast_fu_204_p1");
    sc_trace(mVcdFile, tmp_10_fu_220_p2, "tmp_10_fu_220_p2");
    sc_trace(mVcdFile, tmp_12_fu_247_p2, "tmp_12_fu_247_p2");
    sc_trace(mVcdFile, tmp_13_fu_252_p2, "tmp_13_fu_252_p2");
    sc_trace(mVcdFile, tmp_14_fu_257_p2, "tmp_14_fu_257_p2");
    sc_trace(mVcdFile, ti_b_cast3_cast_fu_267_p1, "ti_b_cast3_cast_fu_267_p1");
    sc_trace(mVcdFile, tmp_15_fu_271_p2, "tmp_15_fu_271_p2");
    sc_trace(mVcdFile, tmp_16_fu_280_p3, "tmp_16_fu_280_p3");
    sc_trace(mVcdFile, tmp_15_cast_fu_276_p1, "tmp_15_cast_fu_276_p1");
    sc_trace(mVcdFile, p_shl3_fu_288_p1, "p_shl3_fu_288_p1");
    sc_trace(mVcdFile, tmp_18_fu_298_p3, "tmp_18_fu_298_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_306_p1, "p_shl2_cast_fu_306_p1");
    sc_trace(mVcdFile, tmp_19_fu_310_p2, "tmp_19_fu_310_p2");
    sc_trace(mVcdFile, i_cast2_fu_332_p1, "i_cast2_fu_332_p1");
    sc_trace(mVcdFile, tmp_20_fu_336_p2, "tmp_20_fu_336_p2");
    sc_trace(mVcdFile, tmp_24_fu_345_p1, "tmp_24_fu_345_p1");
    sc_trace(mVcdFile, tmp_21_fu_341_p1, "tmp_21_fu_341_p1");
    sc_trace(mVcdFile, p_shl4_cast_fu_349_p3, "p_shl4_cast_fu_349_p3");
    sc_trace(mVcdFile, tmp_9_cast_cast_fu_380_p1, "tmp_9_cast_cast_fu_380_p1");
    sc_trace(mVcdFile, tmp_23_fu_383_p2, "tmp_23_fu_383_p2");
    sc_trace(mVcdFile, tmp_28_fu_392_p1, "tmp_28_fu_392_p1");
    sc_trace(mVcdFile, p_shl5_cast_fu_396_p3, "p_shl5_cast_fu_396_p3");
    sc_trace(mVcdFile, tmp_23_cast_fu_388_p1, "tmp_23_cast_fu_388_p1");
    sc_trace(mVcdFile, j_cast1_cast_fu_410_p1, "j_cast1_cast_fu_410_p1");
    sc_trace(mVcdFile, tmp_26_fu_414_p2, "tmp_26_fu_414_p2");
    sc_trace(mVcdFile, tmp_2_fu_436_p2, "tmp_2_fu_436_p2");
    sc_trace(mVcdFile, tmp_2_cast_cast_fu_441_p1, "tmp_2_cast_cast_fu_441_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("convolve_kernel.hdltvin.dat");
    mHdltvoutHandle.open("convolve_kernel.hdltvout.dat");
}

convolve_kernel::~convolve_kernel() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete convolve_kernel_control_s_axi_U;
    delete convolve_kernel_fbkb_U1;
    delete convolve_kernel_fcud_U2;
}

void convolve_kernel::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void convolve_kernel::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_172_p2.read()))) {
        col_b_reg_101 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(tmp_3_reg_501.read(), ap_const_lv1_1))) {
        col_b_reg_101 = col_b_1_reg_485.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_5_fu_320_p2.read()))) {
        i_reg_134 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(tmp_s_fu_424_p2.read(), ap_const_lv1_1))) {
        i_reg_134 = i_1_reg_541.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        j_reg_145 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        j_reg_145 = j_1_reg_564.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_1_fu_192_p2.read(), ap_const_lv1_1))) {
        row_b_reg_90 = row_b_1_reg_467.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        row_b_reg_90 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(tmp_3_reg_501.read(), ap_const_lv1_0))) {
        ti_b_reg_123 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(tmp_7_fu_363_p2.read(), ap_const_lv1_1))) {
        ti_b_reg_123 = ti_b_1_reg_528.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_1_fu_192_p2.read()))) {
        to_b_reg_112 = ap_const_lv2_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_320_p2.read()))) {
        to_b_reg_112 = to_b_1_reg_505.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        bufi_load_reg_584 = bufi_Dout_A.read();
        bufw_load_reg_579 = bufw_Dout_A.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        bufo_addr_reg_510 =  (sc_lv<5>) (tmp_14_cast_fu_262_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        bufo_load_reg_594 = bufo_Dout_A.read();
        tmp_4_reg_589 = grp_fu_160_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        bufw_addr_reg_556 =  (sc_lv<8>) (tmp_26_cast_fu_419_p1.read());
        j_1_reg_564 = j_1_fu_430_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        col_b_1_reg_485 = col_b_1_fu_198_p2.read();
        col_b_cast5_cast_reg_472 = col_b_cast5_cast_fu_184_p1.read();
        col_b_cast_reg_477 = col_b_cast_fu_188_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        i_1_reg_541 = i_1_fu_369_p2.read();
        tmp_22_reg_533 = tmp_22_fu_357_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        row_b_1_reg_467 = row_b_1_fu_178_p2.read();
        row_b_cast6_cast_reg_454 = row_b_cast6_cast_fu_164_p1.read();
        row_b_cast_reg_459 = row_b_cast_fu_168_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ti_b_1_reg_528 = ti_b_1_fu_326_p2.read();
        tmp_17_reg_515 = tmp_17_fu_292_p2.read();
        tmp_19_cast_reg_520 = tmp_19_cast_fu_316_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_10_cast_reg_490 = tmp_10_cast_fu_226_p1.read();
        tmp_11_reg_495 = tmp_11_fu_230_p2.read();
        tmp_3_reg_501 = tmp_3_fu_235_p2.read();
        to_b_1_reg_505 = to_b_1_fu_241_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        tmp_25_reg_551 = tmp_25_fu_404_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, tmp_s_fu_424_p2.read()))) {
        tmp_27_reg_569 = tmp_27_fu_445_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        tmp_6_reg_599 = grp_fu_156_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(tmp_7_fu_363_p2.read(), ap_const_lv1_0))) {
        tmp_9_reg_546 = tmp_9_fu_375_p2.read();
    }
}

void convolve_kernel::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void convolve_kernel::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void convolve_kernel::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void convolve_kernel::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void convolve_kernel::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void convolve_kernel::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void convolve_kernel::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void convolve_kernel::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void convolve_kernel::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void convolve_kernel::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void convolve_kernel::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void convolve_kernel::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void convolve_kernel::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void convolve_kernel::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void convolve_kernel::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void convolve_kernel::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void convolve_kernel::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void convolve_kernel::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_172_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void convolve_kernel::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void convolve_kernel::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_172_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void convolve_kernel::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void convolve_kernel::thread_bufi_Addr_A() {
    bufi_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): bufi_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void convolve_kernel::thread_bufi_Addr_A_orig() {
    bufi_Addr_A_orig =  (sc_lv<32>) (tmp_27_cast_fu_450_p1.read());
}

void convolve_kernel::thread_bufi_Clk_A() {
    bufi_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void convolve_kernel::thread_bufi_Din_A() {
    bufi_Din_A = ap_const_lv32_0;
}

void convolve_kernel::thread_bufi_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        bufi_EN_A = ap_const_logic_1;
    } else {
        bufi_EN_A = ap_const_logic_0;
    }
}

void convolve_kernel::thread_bufi_Rst_A() {
    bufi_Rst_A = ap_rst_n_inv.read();
}

void convolve_kernel::thread_bufi_WEN_A() {
    bufi_WEN_A = ap_const_lv4_0;
}

void convolve_kernel::thread_bufo_Addr_A() {
    bufo_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): bufo_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void convolve_kernel::thread_bufo_Addr_A_orig() {
    bufo_Addr_A_orig =  (sc_lv<32>) (bufo_addr_reg_510.read());
}

void convolve_kernel::thread_bufo_Clk_A() {
    bufo_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void convolve_kernel::thread_bufo_Din_A() {
    bufo_Din_A = tmp_6_reg_599.read();
}

void convolve_kernel::thread_bufo_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()))) {
        bufo_EN_A = ap_const_logic_1;
    } else {
        bufo_EN_A = ap_const_logic_0;
    }
}

void convolve_kernel::thread_bufo_Rst_A() {
    bufo_Rst_A = ap_rst_n_inv.read();
}

void convolve_kernel::thread_bufo_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        bufo_WEN_A = ap_const_lv4_F;
    } else {
        bufo_WEN_A = ap_const_lv4_0;
    }
}

void convolve_kernel::thread_bufw_Addr_A() {
    bufw_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): bufw_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void convolve_kernel::thread_bufw_Addr_A_orig() {
    bufw_Addr_A_orig =  (sc_lv<32>) (bufw_addr_reg_556.read());
}

void convolve_kernel::thread_bufw_Clk_A() {
    bufw_Clk_A = ap_clk.read()? SC_LOGIC_1 : SC_LOGIC_0;
}

void convolve_kernel::thread_bufw_Din_A() {
    bufw_Din_A = ap_const_lv32_0;
}

void convolve_kernel::thread_bufw_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        bufw_EN_A = ap_const_logic_1;
    } else {
        bufw_EN_A = ap_const_logic_0;
    }
}

void convolve_kernel::thread_bufw_Rst_A() {
    bufw_Rst_A = ap_rst_n_inv.read();
}

void convolve_kernel::thread_bufw_WEN_A() {
    bufw_WEN_A = ap_const_lv4_0;
}

void convolve_kernel::thread_col_b_1_fu_198_p2() {
    col_b_1_fu_198_p2 = (!col_b_reg_101.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(col_b_reg_101.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve_kernel::thread_col_b_cast5_cast_fu_184_p1() {
    col_b_cast5_cast_fu_184_p1 = esl_zext<6,2>(col_b_reg_101.read());
}

void convolve_kernel::thread_col_b_cast_fu_188_p1() {
    col_b_cast_fu_188_p1 = esl_zext<3,2>(col_b_reg_101.read());
}

void convolve_kernel::thread_i_1_fu_369_p2() {
    i_1_fu_369_p2 = (!ap_const_lv3_1.is_01() || !i_reg_134.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(i_reg_134.read()));
}

void convolve_kernel::thread_i_cast2_fu_332_p1() {
    i_cast2_fu_332_p1 = esl_zext<64,3>(i_reg_134.read());
}

void convolve_kernel::thread_j_1_fu_430_p2() {
    j_1_fu_430_p2 = (!j_reg_145.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_145.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void convolve_kernel::thread_j_cast1_cast_fu_410_p1() {
    j_cast1_cast_fu_410_p1 = esl_zext<9,3>(j_reg_145.read());
}

void convolve_kernel::thread_p_shl1_cast_fu_216_p1() {
    p_shl1_cast_fu_216_p1 = esl_zext<5,4>(tmp_8_fu_208_p3.read());
}

void convolve_kernel::thread_p_shl2_cast_fu_306_p1() {
    p_shl2_cast_fu_306_p1 = esl_zext<6,5>(tmp_18_fu_298_p3.read());
}

void convolve_kernel::thread_p_shl3_fu_288_p1() {
    p_shl3_fu_288_p1 = esl_sext<64,8>(tmp_16_fu_280_p3.read());
}

void convolve_kernel::thread_p_shl4_cast_fu_349_p3() {
    p_shl4_cast_fu_349_p3 = esl_concat<7,2>(tmp_24_fu_345_p1.read(), ap_const_lv2_0);
}

void convolve_kernel::thread_p_shl5_cast_fu_396_p3() {
    p_shl5_cast_fu_396_p3 = esl_concat<6,3>(tmp_28_fu_392_p1.read(), ap_const_lv3_0);
}

void convolve_kernel::thread_row_b_1_fu_178_p2() {
    row_b_1_fu_178_p2 = (!row_b_reg_90.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(row_b_reg_90.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve_kernel::thread_row_b_cast6_cast_fu_164_p1() {
    row_b_cast6_cast_fu_164_p1 = esl_zext<6,2>(row_b_reg_90.read());
}

void convolve_kernel::thread_row_b_cast_fu_168_p1() {
    row_b_cast_fu_168_p1 = esl_zext<3,2>(row_b_reg_90.read());
}

void convolve_kernel::thread_ti_b_1_fu_326_p2() {
    ti_b_1_fu_326_p2 = (!ti_b_reg_123.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ti_b_reg_123.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void convolve_kernel::thread_ti_b_cast3_cast_fu_267_p1() {
    ti_b_cast3_cast_fu_267_p1 = esl_zext<6,2>(ti_b_reg_123.read());
}

void convolve_kernel::thread_tmp_10_cast_fu_226_p1() {
    tmp_10_cast_fu_226_p1 = esl_sext<6,5>(tmp_10_fu_220_p2.read());
}

void convolve_kernel::thread_tmp_10_fu_220_p2() {
    tmp_10_fu_220_p2 = (!p_shl1_cast_fu_216_p1.read().is_01() || !to_b_cast4_cast_fu_204_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(p_shl1_cast_fu_216_p1.read()) - sc_biguint<5>(to_b_cast4_cast_fu_204_p1.read()));
}

void convolve_kernel::thread_tmp_11_fu_230_p2() {
    tmp_11_fu_230_p2 = (!row_b_cast6_cast_reg_454.read().is_01() || !tmp_10_cast_fu_226_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(row_b_cast6_cast_reg_454.read()) + sc_bigint<6>(tmp_10_cast_fu_226_p1.read()));
}

void convolve_kernel::thread_tmp_12_fu_247_p2() {
    tmp_12_fu_247_p2 = (!ap_const_lv6_2.is_01())? sc_lv<6>(): tmp_11_reg_495.read() << (unsigned short)ap_const_lv6_2.to_uint();
}

void convolve_kernel::thread_tmp_13_fu_252_p2() {
    tmp_13_fu_252_p2 = (!tmp_12_fu_247_p2.read().is_01() || !tmp_11_reg_495.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_12_fu_247_p2.read()) - sc_biguint<6>(tmp_11_reg_495.read()));
}

void convolve_kernel::thread_tmp_14_cast_fu_262_p1() {
    tmp_14_cast_fu_262_p1 = esl_zext<64,6>(tmp_14_fu_257_p2.read());
}

void convolve_kernel::thread_tmp_14_fu_257_p2() {
    tmp_14_fu_257_p2 = (!col_b_cast5_cast_reg_472.read().is_01() || !tmp_13_fu_252_p2.read().is_01())? sc_lv<6>(): (sc_biguint<6>(col_b_cast5_cast_reg_472.read()) + sc_biguint<6>(tmp_13_fu_252_p2.read()));
}

void convolve_kernel::thread_tmp_15_cast_fu_276_p1() {
    tmp_15_cast_fu_276_p1 = esl_sext<64,6>(tmp_15_fu_271_p2.read());
}

void convolve_kernel::thread_tmp_15_fu_271_p2() {
    tmp_15_fu_271_p2 = (!tmp_10_cast_reg_490.read().is_01() || !ti_b_cast3_cast_fu_267_p1.read().is_01())? sc_lv<6>(): (sc_bigint<6>(tmp_10_cast_reg_490.read()) + sc_biguint<6>(ti_b_cast3_cast_fu_267_p1.read()));
}

void convolve_kernel::thread_tmp_16_fu_280_p3() {
    tmp_16_fu_280_p3 = esl_concat<6,2>(tmp_15_fu_271_p2.read(), ap_const_lv2_0);
}

void convolve_kernel::thread_tmp_17_fu_292_p2() {
    tmp_17_fu_292_p2 = (!tmp_15_cast_fu_276_p1.read().is_01() || !p_shl3_fu_288_p1.read().is_01())? sc_lv<64>(): (sc_bigint<64>(tmp_15_cast_fu_276_p1.read()) + sc_bigint<64>(p_shl3_fu_288_p1.read()));
}

void convolve_kernel::thread_tmp_18_fu_298_p3() {
    tmp_18_fu_298_p3 = esl_concat<2,3>(ti_b_reg_123.read(), ap_const_lv3_0);
}

void convolve_kernel::thread_tmp_19_cast_fu_316_p1() {
    tmp_19_cast_fu_316_p1 = esl_sext<7,6>(tmp_19_fu_310_p2.read());
}

void convolve_kernel::thread_tmp_19_fu_310_p2() {
    tmp_19_fu_310_p2 = (!p_shl2_cast_fu_306_p1.read().is_01() || !ti_b_cast3_cast_fu_267_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(p_shl2_cast_fu_306_p1.read()) - sc_biguint<6>(ti_b_cast3_cast_fu_267_p1.read()));
}

void convolve_kernel::thread_tmp_1_fu_192_p2() {
    tmp_1_fu_192_p2 = (!col_b_reg_101.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(col_b_reg_101.read() == ap_const_lv2_3);
}

void convolve_kernel::thread_tmp_20_fu_336_p2() {
    tmp_20_fu_336_p2 = (!tmp_17_reg_515.read().is_01() || !i_cast2_fu_332_p1.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_17_reg_515.read()) + sc_biguint<64>(i_cast2_fu_332_p1.read()));
}

void convolve_kernel::thread_tmp_21_fu_341_p1() {
    tmp_21_fu_341_p1 = tmp_20_fu_336_p2.read().range(9-1, 0);
}

void convolve_kernel::thread_tmp_22_fu_357_p2() {
    tmp_22_fu_357_p2 = (!tmp_21_fu_341_p1.read().is_01() || !p_shl4_cast_fu_349_p3.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_21_fu_341_p1.read()) + sc_biguint<9>(p_shl4_cast_fu_349_p3.read()));
}

void convolve_kernel::thread_tmp_23_cast_fu_388_p1() {
    tmp_23_cast_fu_388_p1 = esl_sext<9,7>(tmp_23_fu_383_p2.read());
}

void convolve_kernel::thread_tmp_23_fu_383_p2() {
    tmp_23_fu_383_p2 = (!tmp_9_cast_cast_fu_380_p1.read().is_01() || !tmp_19_cast_reg_520.read().is_01())? sc_lv<7>(): (sc_biguint<7>(tmp_9_cast_cast_fu_380_p1.read()) + sc_bigint<7>(tmp_19_cast_reg_520.read()));
}

void convolve_kernel::thread_tmp_24_fu_345_p1() {
    tmp_24_fu_345_p1 = tmp_20_fu_336_p2.read().range(7-1, 0);
}

void convolve_kernel::thread_tmp_25_fu_404_p2() {
    tmp_25_fu_404_p2 = (!p_shl5_cast_fu_396_p3.read().is_01() || !tmp_23_cast_fu_388_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(p_shl5_cast_fu_396_p3.read()) - sc_bigint<9>(tmp_23_cast_fu_388_p1.read()));
}

void convolve_kernel::thread_tmp_26_cast_fu_419_p1() {
    tmp_26_cast_fu_419_p1 = esl_zext<64,9>(tmp_26_fu_414_p2.read());
}

void convolve_kernel::thread_tmp_26_fu_414_p2() {
    tmp_26_fu_414_p2 = (!tmp_22_reg_533.read().is_01() || !j_cast1_cast_fu_410_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_22_reg_533.read()) + sc_biguint<9>(j_cast1_cast_fu_410_p1.read()));
}

void convolve_kernel::thread_tmp_27_cast_fu_450_p1() {
    tmp_27_cast_fu_450_p1 = esl_zext<64,9>(tmp_27_reg_569.read());
}

void convolve_kernel::thread_tmp_27_fu_445_p2() {
    tmp_27_fu_445_p2 = (!tmp_25_reg_551.read().is_01() || !tmp_2_cast_cast_fu_441_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(tmp_25_reg_551.read()) + sc_biguint<9>(tmp_2_cast_cast_fu_441_p1.read()));
}

void convolve_kernel::thread_tmp_28_fu_392_p1() {
    tmp_28_fu_392_p1 = tmp_23_fu_383_p2.read().range(6-1, 0);
}

void convolve_kernel::thread_tmp_2_cast_cast_fu_441_p1() {
    tmp_2_cast_cast_fu_441_p1 = esl_zext<9,3>(tmp_2_fu_436_p2.read());
}

void convolve_kernel::thread_tmp_2_fu_436_p2() {
    tmp_2_fu_436_p2 = (!col_b_cast_reg_477.read().is_01() || !j_reg_145.read().is_01())? sc_lv<3>(): (sc_biguint<3>(col_b_cast_reg_477.read()) + sc_biguint<3>(j_reg_145.read()));
}

void convolve_kernel::thread_tmp_3_fu_235_p2() {
    tmp_3_fu_235_p2 = (!to_b_reg_112.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(to_b_reg_112.read() == ap_const_lv2_3);
}

void convolve_kernel::thread_tmp_5_fu_320_p2() {
    tmp_5_fu_320_p2 = (!ti_b_reg_123.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ti_b_reg_123.read() == ap_const_lv2_3);
}

void convolve_kernel::thread_tmp_7_fu_363_p2() {
    tmp_7_fu_363_p2 = (!i_reg_134.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_134.read() == ap_const_lv3_5);
}

void convolve_kernel::thread_tmp_8_fu_208_p3() {
    tmp_8_fu_208_p3 = esl_concat<2,2>(to_b_reg_112.read(), ap_const_lv2_0);
}

void convolve_kernel::thread_tmp_9_cast_cast_fu_380_p1() {
    tmp_9_cast_cast_fu_380_p1 = esl_zext<7,3>(tmp_9_reg_546.read());
}

void convolve_kernel::thread_tmp_9_fu_375_p2() {
    tmp_9_fu_375_p2 = (!i_reg_134.read().is_01() || !row_b_cast_reg_459.read().is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_134.read()) + sc_biguint<3>(row_b_cast_reg_459.read()));
}

void convolve_kernel::thread_tmp_fu_172_p2() {
    tmp_fu_172_p2 = (!row_b_reg_90.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(row_b_reg_90.read() == ap_const_lv2_3);
}

void convolve_kernel::thread_tmp_s_fu_424_p2() {
    tmp_s_fu_424_p2 = (!j_reg_145.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_145.read() == ap_const_lv3_5);
}

void convolve_kernel::thread_to_b_1_fu_241_p2() {
    to_b_1_fu_241_p2 = (!ap_const_lv2_1.is_01() || !to_b_reg_112.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(to_b_reg_112.read()));
}

void convolve_kernel::thread_to_b_cast4_cast_fu_204_p1() {
    to_b_cast4_cast_fu_204_p1 = esl_zext<5,2>(to_b_reg_112.read());
}

void convolve_kernel::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_172_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_1_fu_192_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(tmp_3_reg_501.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_5_fu_320_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(tmp_7_fu_363_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(tmp_s_fu_424_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

void convolve_kernel::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"bufw_Addr_A\" :  \"" << bufw_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufw_EN_A\" :  \"" << bufw_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufw_WEN_A\" :  \"" << bufw_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufw_Din_A\" :  \"" << bufw_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bufw_Dout_A\" :  \"" << bufw_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufw_Clk_A\" :  \"" << bufw_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufw_Rst_A\" :  \"" << bufw_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_Addr_A\" :  \"" << bufi_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_EN_A\" :  \"" << bufi_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_WEN_A\" :  \"" << bufi_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_Din_A\" :  \"" << bufi_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bufi_Dout_A\" :  \"" << bufi_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_Clk_A\" :  \"" << bufi_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufi_Rst_A\" :  \"" << bufi_Rst_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_Addr_A\" :  \"" << bufo_Addr_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_EN_A\" :  \"" << bufo_EN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_WEN_A\" :  \"" << bufo_WEN_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_Din_A\" :  \"" << bufo_Din_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"bufo_Dout_A\" :  \"" << bufo_Dout_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_Clk_A\" :  \"" << bufo_Clk_A.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"bufo_Rst_A\" :  \"" << bufo_Rst_A.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWVALID\" :  \"" << s_axi_control_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_AWREADY\" :  \"" << s_axi_control_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_AWADDR\" :  \"" << s_axi_control_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WVALID\" :  \"" << s_axi_control_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_WREADY\" :  \"" << s_axi_control_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WDATA\" :  \"" << s_axi_control_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_WSTRB\" :  \"" << s_axi_control_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARVALID\" :  \"" << s_axi_control_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_ARREADY\" :  \"" << s_axi_control_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_ARADDR\" :  \"" << s_axi_control_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RVALID\" :  \"" << s_axi_control_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_RREADY\" :  \"" << s_axi_control_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RDATA\" :  \"" << s_axi_control_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_RRESP\" :  \"" << s_axi_control_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BVALID\" :  \"" << s_axi_control_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_control_BREADY\" :  \"" << s_axi_control_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_control_BRESP\" :  \"" << s_axi_control_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

