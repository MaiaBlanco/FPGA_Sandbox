// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve_kernel,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.696000,HLS_SYN_LAT=18064,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=2096,HLS_SYN_LUT=2443}" *)

module convolve_kernel (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        bufw_0_Addr_A,
        bufw_0_EN_A,
        bufw_0_WEN_A,
        bufw_0_Din_A,
        bufw_0_Dout_A,
        bufw_0_Clk_A,
        bufw_0_Rst_A,
        bufw_1_Addr_A,
        bufw_1_EN_A,
        bufw_1_WEN_A,
        bufw_1_Din_A,
        bufw_1_Dout_A,
        bufw_1_Clk_A,
        bufw_1_Rst_A,
        bufw_2_Addr_A,
        bufw_2_EN_A,
        bufw_2_WEN_A,
        bufw_2_Din_A,
        bufw_2_Dout_A,
        bufw_2_Clk_A,
        bufw_2_Rst_A,
        bufw_3_Addr_A,
        bufw_3_EN_A,
        bufw_3_WEN_A,
        bufw_3_Din_A,
        bufw_3_Dout_A,
        bufw_3_Clk_A,
        bufw_3_Rst_A,
        bufw_4_Addr_A,
        bufw_4_EN_A,
        bufw_4_WEN_A,
        bufw_4_Din_A,
        bufw_4_Dout_A,
        bufw_4_Clk_A,
        bufw_4_Rst_A,
        bufi_0_Addr_A,
        bufi_0_EN_A,
        bufi_0_WEN_A,
        bufi_0_Din_A,
        bufi_0_Dout_A,
        bufi_0_Clk_A,
        bufi_0_Rst_A,
        bufi_1_Addr_A,
        bufi_1_EN_A,
        bufi_1_WEN_A,
        bufi_1_Din_A,
        bufi_1_Dout_A,
        bufi_1_Clk_A,
        bufi_1_Rst_A,
        bufi_2_Addr_A,
        bufi_2_EN_A,
        bufi_2_WEN_A,
        bufi_2_Din_A,
        bufi_2_Dout_A,
        bufi_2_Clk_A,
        bufi_2_Rst_A,
        bufi_3_Addr_A,
        bufi_3_EN_A,
        bufi_3_WEN_A,
        bufi_3_Din_A,
        bufi_3_Dout_A,
        bufi_3_Clk_A,
        bufi_3_Rst_A,
        bufi_4_Addr_A,
        bufi_4_EN_A,
        bufi_4_WEN_A,
        bufi_4_Din_A,
        bufi_4_Dout_A,
        bufi_4_Clk_A,
        bufi_4_Rst_A,
        bufi_5_Addr_A,
        bufi_5_EN_A,
        bufi_5_WEN_A,
        bufi_5_Din_A,
        bufi_5_Dout_A,
        bufi_5_Clk_A,
        bufi_5_Rst_A,
        bufi_6_Addr_A,
        bufi_6_EN_A,
        bufi_6_WEN_A,
        bufi_6_Din_A,
        bufi_6_Dout_A,
        bufi_6_Clk_A,
        bufi_6_Rst_A,
        bufo_Addr_A,
        bufo_EN_A,
        bufo_WEN_A,
        bufo_Din_A,
        bufo_Dout_A,
        bufo_Clk_A,
        bufo_Rst_A
);

parameter    ap_ST_fsm_state1 = 51'd1;
parameter    ap_ST_fsm_state2 = 51'd2;
parameter    ap_ST_fsm_state3 = 51'd4;
parameter    ap_ST_fsm_state4 = 51'd8;
parameter    ap_ST_fsm_state5 = 51'd16;
parameter    ap_ST_fsm_state6 = 51'd32;
parameter    ap_ST_fsm_state7 = 51'd64;
parameter    ap_ST_fsm_state8 = 51'd128;
parameter    ap_ST_fsm_state9 = 51'd256;
parameter    ap_ST_fsm_pp0_stage0 = 51'd512;
parameter    ap_ST_fsm_pp0_stage1 = 51'd1024;
parameter    ap_ST_fsm_pp0_stage2 = 51'd2048;
parameter    ap_ST_fsm_pp0_stage3 = 51'd4096;
parameter    ap_ST_fsm_pp0_stage4 = 51'd8192;
parameter    ap_ST_fsm_pp0_stage5 = 51'd16384;
parameter    ap_ST_fsm_pp0_stage6 = 51'd32768;
parameter    ap_ST_fsm_pp0_stage7 = 51'd65536;
parameter    ap_ST_fsm_pp0_stage8 = 51'd131072;
parameter    ap_ST_fsm_pp0_stage9 = 51'd262144;
parameter    ap_ST_fsm_pp0_stage10 = 51'd524288;
parameter    ap_ST_fsm_pp0_stage11 = 51'd1048576;
parameter    ap_ST_fsm_pp0_stage12 = 51'd2097152;
parameter    ap_ST_fsm_pp0_stage13 = 51'd4194304;
parameter    ap_ST_fsm_pp0_stage14 = 51'd8388608;
parameter    ap_ST_fsm_pp0_stage15 = 51'd16777216;
parameter    ap_ST_fsm_pp0_stage16 = 51'd33554432;
parameter    ap_ST_fsm_pp0_stage17 = 51'd67108864;
parameter    ap_ST_fsm_pp0_stage18 = 51'd134217728;
parameter    ap_ST_fsm_pp0_stage19 = 51'd268435456;
parameter    ap_ST_fsm_pp0_stage20 = 51'd536870912;
parameter    ap_ST_fsm_pp0_stage21 = 51'd1073741824;
parameter    ap_ST_fsm_pp0_stage22 = 51'd2147483648;
parameter    ap_ST_fsm_pp0_stage23 = 51'd4294967296;
parameter    ap_ST_fsm_pp0_stage24 = 51'd8589934592;
parameter    ap_ST_fsm_pp0_stage25 = 51'd17179869184;
parameter    ap_ST_fsm_pp0_stage26 = 51'd34359738368;
parameter    ap_ST_fsm_pp0_stage27 = 51'd68719476736;
parameter    ap_ST_fsm_pp0_stage28 = 51'd137438953472;
parameter    ap_ST_fsm_pp0_stage29 = 51'd274877906944;
parameter    ap_ST_fsm_pp0_stage30 = 51'd549755813888;
parameter    ap_ST_fsm_pp0_stage31 = 51'd1099511627776;
parameter    ap_ST_fsm_pp0_stage32 = 51'd2199023255552;
parameter    ap_ST_fsm_pp0_stage33 = 51'd4398046511104;
parameter    ap_ST_fsm_pp0_stage34 = 51'd8796093022208;
parameter    ap_ST_fsm_pp0_stage35 = 51'd17592186044416;
parameter    ap_ST_fsm_pp0_stage36 = 51'd35184372088832;
parameter    ap_ST_fsm_pp0_stage37 = 51'd70368744177664;
parameter    ap_ST_fsm_pp0_stage38 = 51'd140737488355328;
parameter    ap_ST_fsm_pp0_stage39 = 51'd281474976710656;
parameter    ap_ST_fsm_state63 = 51'd562949953421312;
parameter    ap_ST_fsm_state64 = 51'd1125899906842624;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] bufw_0_Addr_A;
output   bufw_0_EN_A;
output  [3:0] bufw_0_WEN_A;
output  [31:0] bufw_0_Din_A;
input  [31:0] bufw_0_Dout_A;
output   bufw_0_Clk_A;
output   bufw_0_Rst_A;
output  [31:0] bufw_1_Addr_A;
output   bufw_1_EN_A;
output  [3:0] bufw_1_WEN_A;
output  [31:0] bufw_1_Din_A;
input  [31:0] bufw_1_Dout_A;
output   bufw_1_Clk_A;
output   bufw_1_Rst_A;
output  [31:0] bufw_2_Addr_A;
output   bufw_2_EN_A;
output  [3:0] bufw_2_WEN_A;
output  [31:0] bufw_2_Din_A;
input  [31:0] bufw_2_Dout_A;
output   bufw_2_Clk_A;
output   bufw_2_Rst_A;
output  [31:0] bufw_3_Addr_A;
output   bufw_3_EN_A;
output  [3:0] bufw_3_WEN_A;
output  [31:0] bufw_3_Din_A;
input  [31:0] bufw_3_Dout_A;
output   bufw_3_Clk_A;
output   bufw_3_Rst_A;
output  [31:0] bufw_4_Addr_A;
output   bufw_4_EN_A;
output  [3:0] bufw_4_WEN_A;
output  [31:0] bufw_4_Din_A;
input  [31:0] bufw_4_Dout_A;
output   bufw_4_Clk_A;
output   bufw_4_Rst_A;
output  [31:0] bufi_0_Addr_A;
output   bufi_0_EN_A;
output  [3:0] bufi_0_WEN_A;
output  [31:0] bufi_0_Din_A;
input  [31:0] bufi_0_Dout_A;
output   bufi_0_Clk_A;
output   bufi_0_Rst_A;
output  [31:0] bufi_1_Addr_A;
output   bufi_1_EN_A;
output  [3:0] bufi_1_WEN_A;
output  [31:0] bufi_1_Din_A;
input  [31:0] bufi_1_Dout_A;
output   bufi_1_Clk_A;
output   bufi_1_Rst_A;
output  [31:0] bufi_2_Addr_A;
output   bufi_2_EN_A;
output  [3:0] bufi_2_WEN_A;
output  [31:0] bufi_2_Din_A;
input  [31:0] bufi_2_Dout_A;
output   bufi_2_Clk_A;
output   bufi_2_Rst_A;
output  [31:0] bufi_3_Addr_A;
output   bufi_3_EN_A;
output  [3:0] bufi_3_WEN_A;
output  [31:0] bufi_3_Din_A;
input  [31:0] bufi_3_Dout_A;
output   bufi_3_Clk_A;
output   bufi_3_Rst_A;
output  [31:0] bufi_4_Addr_A;
output   bufi_4_EN_A;
output  [3:0] bufi_4_WEN_A;
output  [31:0] bufi_4_Din_A;
input  [31:0] bufi_4_Dout_A;
output   bufi_4_Clk_A;
output   bufi_4_Rst_A;
output  [31:0] bufi_5_Addr_A;
output   bufi_5_EN_A;
output  [3:0] bufi_5_WEN_A;
output  [31:0] bufi_5_Din_A;
input  [31:0] bufi_5_Dout_A;
output   bufi_5_Clk_A;
output   bufi_5_Rst_A;
output  [31:0] bufi_6_Addr_A;
output   bufi_6_EN_A;
output  [3:0] bufi_6_WEN_A;
output  [31:0] bufi_6_Din_A;
input  [31:0] bufi_6_Dout_A;
output   bufi_6_Clk_A;
output   bufi_6_Rst_A;
output  [31:0] bufo_Addr_A;
output   bufo_EN_A;
output  [3:0] bufo_WEN_A;
output  [31:0] bufo_Din_A;
input  [31:0] bufo_Dout_A;
output   bufo_Clk_A;
output   bufo_Rst_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg bufw_0_EN_A;
reg bufw_1_EN_A;
reg bufw_2_EN_A;
reg bufw_3_EN_A;
reg bufw_4_EN_A;
reg[31:0] bufi_0_Addr_A;
reg bufi_0_EN_A;
reg[31:0] bufi_1_Addr_A;
reg bufi_1_EN_A;
reg[31:0] bufi_2_Addr_A;
reg bufi_2_EN_A;
reg[31:0] bufi_3_Addr_A;
reg bufi_3_EN_A;
reg[31:0] bufi_4_Addr_A;
reg bufi_4_EN_A;
reg[31:0] bufi_5_Addr_A;
reg bufi_5_EN_A;
reg[31:0] bufi_6_Addr_A;
reg bufi_6_EN_A;
reg bufo_EN_A;
reg[3:0] bufo_WEN_A;

(* fsm_encoding = "none" *) reg   [50:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] p_4_reg_294;
reg   [31:0] temp1_reg_306;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_ap_return;
reg   [31:0] reg_371;
wire    ap_CS_fsm_pp0_stage5;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state15_pp0_stage5_iter0;
wire    ap_block_state55_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_flag00011001;
reg   [0:0] tmp_3_reg_912;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state20_pp0_stage10_iter0;
wire    ap_block_state60_pp0_stage10_iter1;
wire    ap_block_pp0_stage10_flag00011001;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state25_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_flag00011001;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state30_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_flag00011001;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_state35_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_flag00011001;
wire   [31:0] grp_fu_367_p2;
reg   [31:0] reg_376;
reg   [31:0] reg_381;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_state40_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_flag00011001;
wire   [31:0] grp_fu_361_p2;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state29_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_flag00011001;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_state37_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_flag00011001;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_state45_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_flag00011001;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state13_pp0_stage3_iter0;
wire    ap_block_state53_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_tmp_3_reg_912;
wire   [6:0] indvar_flatten_next2_fu_397_p2;
reg   [6:0] indvar_flatten_next2_reg_767;
wire    ap_CS_fsm_state2;
wire   [0:0] exitcond_flatten_fu_403_p2;
reg   [0:0] exitcond_flatten_reg_772;
wire   [0:0] exitcond_flatten2_fu_391_p2;
wire   [0:0] exitcond_flatten1_fu_409_p2;
reg   [0:0] exitcond_flatten1_reg_783;
wire   [0:0] exitcond_flatten_mid_fu_432_p2;
reg   [0:0] exitcond_flatten_mid_reg_789;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_8_mid1_fu_447_p2;
reg   [0:0] tmp_8_mid1_reg_796;
wire   [1:0] p_1_mid_fu_453_p3;
reg   [1:0] p_1_mid_reg_802;
wire    ap_CS_fsm_state4;
wire   [0:0] tmp_2_fu_460_p2;
reg   [0:0] tmp_2_reg_808;
wire   [1:0] p_2_mid_fu_464_p3;
reg   [1:0] p_2_mid_reg_813;
wire   [1:0] tmp_4_mid2_fu_477_p3;
reg   [1:0] tmp_4_mid2_reg_819;
wire    ap_CS_fsm_state5;
wire   [1:0] p_3_mid2_fu_497_p3;
reg   [1:0] p_3_mid2_reg_827;
wire   [1:0] tmp_7_mid2_fu_505_p3;
reg   [1:0] tmp_7_mid2_reg_837;
wire   [5:0] tmp_11_fu_540_p1;
reg   [5:0] tmp_11_reg_844;
wire    ap_CS_fsm_state6;
wire   [3:0] tmp_12_fu_544_p1;
reg   [3:0] tmp_12_reg_849;
reg   [4:0] bufo_addr_reg_854;
wire    ap_CS_fsm_state7;
wire   [1:0] tmp_1_mid2_v_fu_580_p3;
reg   [1:0] tmp_1_mid2_v_reg_859;
wire    ap_CS_fsm_state8;
wire   [5:0] tmp_1_fu_601_p2;
reg   [5:0] tmp_1_reg_868;
wire    ap_CS_fsm_state9;
wire   [2:0] tmp_7_cast_mid2_cast_fu_607_p1;
reg   [2:0] tmp_7_cast_mid2_cast_reg_873;
wire   [2:0] tmp_12_48_t_fu_610_p3;
reg   [2:0] tmp_12_48_t_reg_883;
wire   [0:0] sel_tmp_fu_617_p2;
reg   [0:0] sel_tmp_reg_888;
wire   [0:0] sel_tmp2_fu_622_p2;
reg   [0:0] sel_tmp2_reg_896;
wire   [0:0] sel_tmp4_fu_627_p2;
reg   [0:0] sel_tmp4_reg_904;
wire   [0:0] tmp_3_fu_632_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state10_pp0_stage0_iter0;
wire    ap_block_state50_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
wire   [2:0] i_V_fu_638_p2;
reg   [2:0] i_V_reg_916;
wire   [2:0] tmp_9_fu_644_p2;
reg   [2:0] tmp_9_reg_921;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state11_pp0_stage1_iter0;
wire    ap_block_state51_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
wire   [5:0] tmp_16_fu_652_p2;
reg   [5:0] tmp_16_reg_927;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state12_pp0_stage2_iter0;
wire    ap_block_state52_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011001;
reg   [31:0] bufi_3_load_reg_967;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state14_pp0_stage4_iter0;
wire    ap_block_state54_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_flag00011001;
reg   [31:0] bufi_0_load_reg_975;
reg   [31:0] bufi_1_load_reg_980;
reg   [31:0] bufi_2_load_reg_986;
reg   [31:0] bufi_4_load_reg_993;
reg   [31:0] bufi_5_load_reg_1000;
reg   [31:0] bufi_6_load_reg_1006;
wire   [31:0] bufi_load_0_phi_fu_678_p3;
reg   [31:0] bufi_load_0_phi_reg_1011;
wire   [31:0] bufi_load_1_phi_fu_695_p3;
reg   [31:0] bufi_load_1_phi_reg_1016;
wire   [31:0] bufi_load_2_phi_fu_712_p3;
reg   [31:0] bufi_load_2_phi_reg_1021;
wire   [31:0] bufi_load_3_phi_fu_729_p3;
reg   [31:0] bufi_load_3_phi_reg_1026;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_ap_return;
reg   [31:0] tmp_22_reg_1031;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state19_pp0_stage9_iter0;
wire    ap_block_state59_pp0_stage9_iter1;
wire    ap_block_pp0_stage9_flag00011001;
reg   [31:0] tmp_13_3_reg_1036;
reg   [31:0] temp_2_4_reg_1041;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state21_pp0_stage11_iter0;
wire    ap_block_state61_pp0_stage11_iter1;
wire    ap_block_pp0_stage11_flag00011001;
wire   [1:0] col_b_V_fu_735_p2;
reg   [1:0] col_b_V_reg_1047;
wire    ap_CS_fsm_state63;
wire   [3:0] indvar_flatten_op_fu_740_p2;
reg   [3:0] indvar_flatten_op_reg_1052;
wire   [5:0] indvar_flatten15_op_fu_746_p2;
reg   [5:0] indvar_flatten15_op_reg_1057;
wire   [3:0] indvar_flatten_next_fu_752_p3;
wire    ap_CS_fsm_state64;
wire   [5:0] indvar_flatten_next1_fu_758_p3;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state10;
wire    ap_block_state49_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_flag00011011;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_state22_pp0_stage12_iter0;
wire    ap_block_state62_pp0_stage12_iter1;
wire    ap_block_pp0_stage12_flag00011011;
wire    ap_CS_fsm_pp0_stage12;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_ap_start;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_ap_done;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_ap_idle;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_ap_ready;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_Din_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_Addr_A;
wire    grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_EN_A;
wire   [3:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_WEN_A;
wire   [31:0] grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_Din_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_ap_start;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_ap_done;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_ap_idle;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_ap_ready;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_Addr_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_EN_A;
wire   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_WEN_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_Din_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_Addr_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_EN_A;
wire   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_WEN_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_Din_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_Addr_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_EN_A;
wire   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_WEN_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_Din_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_Addr_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_EN_A;
wire   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_WEN_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_Din_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_Addr_A;
wire    grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_EN_A;
wire   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_WEN_A;
wire   [31:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_Din_A;
reg   [3:0] grp_aesl_mux_load_5_3_x_s_fu_337_empty;
reg   [6:0] indvar_flatten1_reg_211;
reg   [1:0] p_s_reg_222;
reg   [5:0] indvar_flatten2_reg_234;
reg   [1:0] p_1_reg_246;
reg   [3:0] indvar_flatten_reg_258;
reg   [1:0] p_2_reg_270;
reg   [1:0] p_3_reg_282;
reg   [2:0] p_4_phi_fu_298_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [31:0] temp1_phi_fu_309_p4;
wire    ap_block_pp0_stage11_flag00000000;
reg    ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state16_pp0_stage6_iter0;
wire    ap_block_state56_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state17_pp0_stage7_iter0;
wire    ap_block_state57_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state18_pp0_stage8_iter0;
wire    ap_block_state58_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_flag00011001;
wire    ap_block_pp0_stage8_flag00000000;
wire    ap_block_pp0_stage5_flag00000000;
reg    ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start;
wire    ap_block_pp0_stage3_flag00000000;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_block_pp0_stage9_flag00000000;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state23_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_flag00011001;
wire    ap_block_pp0_stage13_flag00000000;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state24_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_flag00011001;
wire    ap_block_pp0_stage14_flag00000000;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state28_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_flag00011001;
wire    ap_block_pp0_stage18_flag00000000;
wire    ap_block_pp0_stage19_flag00000000;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state33_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_flag00011001;
wire    ap_block_pp0_stage23_flag00000000;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state34_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_flag00011001;
wire    ap_block_pp0_stage24_flag00000000;
wire    ap_block_pp0_stage1_flag00000000;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16_flag00000000;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_pp0_stage21_flag00000000;
wire   [31:0] tmp_18_cast_fu_569_p1;
wire  signed [31:0] tmp_20_cast_fu_657_p1;
wire   [31:0] bufo_Addr_A_orig;
wire    ap_block_pp0_stage12_flag00011001;
wire    ap_block_pp0_stage12_flag00000000;
wire   [31:0] bufi_3_Addr_A_orig;
wire   [31:0] bufi_0_Addr_A_orig;
wire   [31:0] bufi_1_Addr_A_orig;
wire   [31:0] bufi_2_Addr_A_orig;
wire   [31:0] bufi_4_Addr_A_orig;
wire   [31:0] bufi_5_Addr_A_orig;
wire   [31:0] bufi_6_Addr_A_orig;
reg   [31:0] grp_fu_361_p0;
reg   [31:0] grp_fu_361_p1;
wire    ap_block_pp0_stage27_flag00000000;
wire    ap_block_pp0_stage35_flag00000000;
reg   [31:0] grp_fu_367_p1;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_pp0_stage26_flag00000000;
wire   [0:0] tmp_s_fu_420_p2;
wire   [0:0] not_exitcond_flatten_fu_415_p2;
wire   [0:0] exitcond_flatten_not_fu_437_p2;
wire   [0:0] tmp_8_mid_fu_426_p2;
wire   [0:0] not_exitcond_flatten_1_fu_442_p2;
wire   [1:0] to_b_V_fu_472_p2;
wire   [0:0] tmp_5_fu_488_p2;
wire   [0:0] tmp_7_fu_492_p2;
wire   [1:0] row_b_V_fu_483_p2;
wire   [3:0] tmp_4_fu_514_p3;
wire   [31:0] p_shl8_fu_521_p1;
wire   [31:0] tmp_4_mid2_cast_fu_511_p1;
wire   [31:0] tmp_7_mid2_cast_fu_531_p1;
wire   [31:0] tmp_6_fu_525_p2;
wire   [31:0] tmp_8_fu_534_p2;
wire   [5:0] p_shl_cast_fu_548_p3;
wire   [5:0] tmp_cast_fu_560_p1;
wire   [5:0] tmp_14_fu_555_p2;
wire   [5:0] tmp_15_fu_563_p2;
wire   [1:0] ti_b_V_fu_574_p2;
wire   [4:0] tmp_fu_590_p3;
wire   [5:0] p_shl9_cast_fu_597_p1;
wire   [5:0] tmp_1_mid2_cast_fu_587_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire   [5:0] tmp_9_cast_cast_fu_649_p1;
wire   [31:0] sel_tmp1_fu_667_p3;
wire   [31:0] sel_tmp3_fu_672_p3;
wire   [31:0] sel_tmp7_fu_684_p3;
wire   [31:0] sel_tmp9_fu_689_p3;
wire   [31:0] sel_tmp5_fu_701_p3;
wire   [31:0] sel_tmp6_fu_706_p3;
wire   [31:0] sel_tmp8_fu_718_p3;
wire   [31:0] sel_tmp10_fu_723_p3;
reg   [50:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_pp0_stage7_flag00011011;
wire    ap_block_pp0_stage8_flag00011011;
wire    ap_block_pp0_stage9_flag00011011;
wire    ap_block_pp0_stage10_flag00011011;
wire    ap_block_pp0_stage11_flag00011011;
wire    ap_block_pp0_stage13_flag00011011;
wire    ap_block_pp0_stage14_flag00011011;
wire    ap_block_pp0_stage15_flag00011011;
wire    ap_block_state26_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_flag00011011;
wire    ap_block_pp0_stage16_flag00011001;
wire    ap_block_state27_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_flag00011011;
wire    ap_block_pp0_stage17_flag00011001;
wire    ap_block_pp0_stage18_flag00011011;
wire    ap_block_pp0_stage19_flag00011011;
wire    ap_block_pp0_stage20_flag00011011;
wire    ap_block_state31_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_flag00011011;
wire    ap_block_pp0_stage21_flag00011001;
wire    ap_block_state32_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_flag00011011;
wire    ap_block_pp0_stage22_flag00011001;
wire    ap_block_pp0_stage23_flag00011011;
wire    ap_block_pp0_stage24_flag00011011;
wire    ap_block_pp0_stage25_flag00011011;
wire    ap_block_state36_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_flag00011011;
wire    ap_block_pp0_stage26_flag00011001;
wire    ap_block_pp0_stage27_flag00011011;
wire    ap_block_state38_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_flag00011011;
wire    ap_block_pp0_stage28_flag00011001;
wire    ap_block_state39_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_flag00011011;
wire    ap_block_pp0_stage29_flag00011001;
wire    ap_block_pp0_stage30_flag00011011;
wire    ap_block_state41_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_flag00011011;
wire    ap_block_pp0_stage31_flag00011001;
wire    ap_block_state42_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_flag00011011;
wire    ap_block_pp0_stage32_flag00011001;
wire    ap_block_state43_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_flag00011011;
wire    ap_block_pp0_stage33_flag00011001;
wire    ap_block_state44_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_flag00011011;
wire    ap_block_pp0_stage34_flag00011001;
wire    ap_block_pp0_stage35_flag00011011;
wire    ap_block_state46_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_flag00011011;
wire    ap_block_pp0_stage36_flag00011001;
wire    ap_block_state47_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_flag00011011;
wire    ap_block_pp0_stage37_flag00011001;
wire    ap_block_state48_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_flag00011011;
wire    ap_block_pp0_stage38_flag00011001;
wire    ap_block_pp0_stage39_flag00011001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 51'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start = 1'b0;
#0 ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start = 1'b0;
end

aesl_mux_load_7_3_x_s grp_aesl_mux_load_7_3_x_s_fu_316(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aesl_mux_load_7_3_x_s_fu_316_ap_start),
    .ap_done(grp_aesl_mux_load_7_3_x_s_fu_316_ap_done),
    .ap_idle(grp_aesl_mux_load_7_3_x_s_fu_316_ap_idle),
    .ap_ready(grp_aesl_mux_load_7_3_x_s_fu_316_ap_ready),
    .empty_2_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_Addr_A),
    .empty_2_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_EN_A),
    .empty_2_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_WEN_A),
    .empty_2_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_Din_A),
    .empty_2_Dout_A(bufi_0_Dout_A),
    .empty_3_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_Addr_A),
    .empty_3_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_EN_A),
    .empty_3_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_WEN_A),
    .empty_3_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_Din_A),
    .empty_3_Dout_A(bufi_1_Dout_A),
    .empty_4_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_Addr_A),
    .empty_4_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_EN_A),
    .empty_4_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_WEN_A),
    .empty_4_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_Din_A),
    .empty_4_Dout_A(bufi_2_Dout_A),
    .empty_5_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_Addr_A),
    .empty_5_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_EN_A),
    .empty_5_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_WEN_A),
    .empty_5_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_Din_A),
    .empty_5_Dout_A(bufi_3_Dout_A),
    .empty_6_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_Addr_A),
    .empty_6_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_EN_A),
    .empty_6_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_WEN_A),
    .empty_6_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_Din_A),
    .empty_6_Dout_A(bufi_4_Dout_A),
    .empty_7_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_Addr_A),
    .empty_7_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_EN_A),
    .empty_7_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_WEN_A),
    .empty_7_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_Din_A),
    .empty_7_Dout_A(bufi_5_Dout_A),
    .empty_8_Addr_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_Addr_A),
    .empty_8_EN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_EN_A),
    .empty_8_WEN_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_WEN_A),
    .empty_8_Din_A(grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_Din_A),
    .empty_8_Dout_A(bufi_6_Dout_A),
    .empty_9(tmp_12_48_t_reg_883),
    .empty_10(tmp_1_mid2_v_reg_859),
    .empty(tmp_9_reg_921),
    .ap_return(grp_aesl_mux_load_7_3_x_s_fu_316_ap_return)
);

aesl_mux_load_5_3_x_s grp_aesl_mux_load_5_3_x_s_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_aesl_mux_load_5_3_x_s_fu_337_ap_start),
    .ap_done(grp_aesl_mux_load_5_3_x_s_fu_337_ap_done),
    .ap_idle(grp_aesl_mux_load_5_3_x_s_fu_337_ap_idle),
    .ap_ready(grp_aesl_mux_load_5_3_x_s_fu_337_ap_ready),
    .ap_ce(1'b1),
    .empty_11_Addr_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_Addr_A),
    .empty_11_EN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_EN_A),
    .empty_11_WEN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_WEN_A),
    .empty_11_Din_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_Din_A),
    .empty_11_Dout_A(bufw_0_Dout_A),
    .empty_12_Addr_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_Addr_A),
    .empty_12_EN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_EN_A),
    .empty_12_WEN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_WEN_A),
    .empty_12_Din_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_Din_A),
    .empty_12_Dout_A(bufw_1_Dout_A),
    .empty_13_Addr_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_Addr_A),
    .empty_13_EN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_EN_A),
    .empty_13_WEN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_WEN_A),
    .empty_13_Din_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_Din_A),
    .empty_13_Dout_A(bufw_2_Dout_A),
    .empty_14_Addr_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_Addr_A),
    .empty_14_EN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_EN_A),
    .empty_14_WEN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_WEN_A),
    .empty_14_Din_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_Din_A),
    .empty_14_Dout_A(bufw_3_Dout_A),
    .empty_15_Addr_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_Addr_A),
    .empty_15_EN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_EN_A),
    .empty_15_WEN_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_WEN_A),
    .empty_15_Din_A(grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_Din_A),
    .empty_15_Dout_A(bufw_4_Dout_A),
    .empty_16(p_4_reg_294),
    .empty_17(tmp_4_mid2_reg_819),
    .empty_18(tmp_1_mid2_v_reg_859),
    .empty(grp_aesl_mux_load_5_3_x_s_fu_337_empty),
    .ap_return(grp_aesl_mux_load_5_3_x_s_fu_337_ap_return)
);

convolve_kernel_fbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fbkb_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_361_p0),
    .din1(grp_fu_361_p1),
    .ce(1'b1),
    .dout(grp_fu_361_p2)
);

convolve_kernel_fcud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fcud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_371),
    .din1(grp_fu_367_p1),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state10))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state10) & (((ap_block_pp0_stage39_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage39)) | ((ap_block_pp0_stage12_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state10 ^ 1'b1);
        end else if ((((ap_block_pp0_stage39_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage39)) | ((ap_block_pp0_stage12_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (tmp_3_reg_912 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == tmp_3_fu_632_p2)))) begin
            ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aesl_mux_load_5_3_x_s_fu_337_ap_ready)) begin
            ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
            ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start <= 1'b1;
        end else if ((1'b1 == grp_aesl_mux_load_7_3_x_s_fu_316_ap_ready)) begin
            ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvar_flatten1_reg_211 <= indvar_flatten_next2_reg_767;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten1_reg_211 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvar_flatten2_reg_234 <= indvar_flatten_next1_fu_758_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten2_reg_234 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        indvar_flatten_reg_258 <= indvar_flatten_next_fu_752_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_258 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        p_1_reg_246 <= tmp_4_mid2_reg_819;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_1_reg_246 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        p_2_reg_270 <= tmp_7_mid2_reg_837;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_2_reg_270 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        p_3_reg_282 <= col_b_V_reg_1047;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_3_reg_282 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        p_4_reg_294 <= i_V_reg_916;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        p_4_reg_294 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        p_s_reg_222 <= tmp_1_mid2_v_reg_859;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        p_s_reg_222 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_3_reg_912) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        temp1_reg_306 <= grp_fu_361_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_reg_306 <= bufo_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_tmp_3_reg_912 <= tmp_3_reg_912;
        tmp_3_reg_912 <= tmp_3_fu_632_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'd0 == sel_tmp2_reg_896) & (sel_tmp_reg_888 == 1'd1) & (1'd0 == sel_tmp4_reg_904) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        bufi_0_load_reg_975 <= bufi_0_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        bufi_1_load_reg_980 <= bufi_1_Dout_A;
        bufi_2_load_reg_986 <= bufi_2_Dout_A;
        bufi_3_load_reg_967 <= bufi_3_Dout_A;
        bufi_4_load_reg_993 <= bufi_4_Dout_A;
        bufi_5_load_reg_1000 <= bufi_5_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'd0 == sel_tmp2_reg_896) & (1'd0 == sel_tmp4_reg_904) & (1'd0 == sel_tmp_reg_888) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0))) begin
        bufi_6_load_reg_1006 <= bufi_6_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (tmp_3_reg_912 == 1'd0))) begin
        bufi_load_0_phi_reg_1011 <= bufi_load_0_phi_fu_678_p3;
        bufi_load_1_phi_reg_1016 <= bufi_load_1_phi_fu_695_p3;
        bufi_load_2_phi_reg_1021 <= bufi_load_2_phi_fu_712_p3;
        bufi_load_3_phi_reg_1026 <= bufi_load_3_phi_fu_729_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bufo_addr_reg_854 <= tmp_18_cast_fu_569_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        col_b_V_reg_1047 <= col_b_V_fu_735_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond_flatten2_fu_391_p2))) begin
        exitcond_flatten1_reg_783 <= exitcond_flatten1_fu_409_p2;
        exitcond_flatten_reg_772 <= exitcond_flatten_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        exitcond_flatten_mid_reg_789 <= exitcond_flatten_mid_fu_432_p2;
        tmp_8_mid1_reg_796 <= tmp_8_mid1_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        i_V_reg_916 <= i_V_fu_638_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (1'd0 == exitcond_flatten_reg_772))) begin
        indvar_flatten15_op_reg_1057 <= indvar_flatten15_op_fu_746_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next2_reg_767 <= indvar_flatten_next2_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state63) & (1'd0 == tmp_2_reg_808))) begin
        indvar_flatten_op_reg_1052 <= indvar_flatten_op_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_1_mid_reg_802 <= p_1_mid_fu_453_p3;
        p_2_mid_reg_813 <= p_2_mid_fu_464_p3;
        tmp_2_reg_808 <= tmp_2_fu_460_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_3_mid2_reg_827 <= p_3_mid2_fu_497_p3;
        tmp_4_mid2_reg_819 <= tmp_4_mid2_fu_477_p3;
        tmp_7_mid2_reg_837 <= tmp_7_mid2_fu_505_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage5_flag00011001 == 1'b0) & (tmp_3_reg_912 == 1'd0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25) & (ap_block_pp0_stage25_flag00011001 == 1'b0)))) begin
        reg_371 <= grp_aesl_mux_load_5_3_x_s_fu_337_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)))) begin
        reg_376 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_block_pp0_stage30_flag00011001 == 1'b0)))) begin
        reg_381 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sel_tmp2_reg_896 <= sel_tmp2_fu_622_p2;
        sel_tmp4_reg_904 <= sel_tmp4_fu_627_p2;
        sel_tmp_reg_888 <= sel_tmp_fu_617_p2;
        tmp_12_48_t_reg_883[1 : 0] <= tmp_12_48_t_fu_610_p3[1 : 0];
        tmp_1_reg_868 <= tmp_1_fu_601_p2;
        tmp_7_cast_mid2_cast_reg_873[1 : 0] <= tmp_7_cast_mid2_cast_fu_607_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_3_reg_912) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0))) begin
        temp_2_4_reg_1041 <= grp_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_11_reg_844 <= tmp_11_fu_540_p1;
        tmp_12_reg_849 <= tmp_12_fu_544_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage25) & (ap_block_pp0_stage25_flag00011001 == 1'b0))) begin
        tmp_13_3_reg_1036 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_16_reg_927 <= tmp_16_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_1_mid2_v_reg_859 <= tmp_1_mid2_v_fu_580_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0))) begin
        tmp_22_reg_1031 <= grp_aesl_mux_load_7_3_x_s_fu_316_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        tmp_9_reg_921 <= tmp_9_fu_644_p2;
    end
end

always @ (*) begin
    if ((tmp_3_fu_632_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten2_fu_391_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten2_fu_391_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)))) begin
        bufi_0_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_Addr_A;
    end else begin
        bufi_0_Addr_A = bufi_0_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_0_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        bufi_0_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_2_EN_A;
    end else begin
        bufi_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)))) begin
        bufi_1_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_Addr_A;
    end else begin
        bufi_1_Addr_A = bufi_1_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_1_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        bufi_1_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_3_EN_A;
    end else begin
        bufi_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        bufi_2_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_Addr_A;
    end else begin
        bufi_2_Addr_A = bufi_2_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_2_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        bufi_2_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_4_EN_A;
    end else begin
        bufi_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        bufi_3_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_Addr_A;
    end else begin
        bufi_3_Addr_A = bufi_3_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_3_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        bufi_3_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_5_EN_A;
    end else begin
        bufi_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        bufi_4_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_Addr_A;
    end else begin
        bufi_4_Addr_A = bufi_4_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_4_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        bufi_4_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_6_EN_A;
    end else begin
        bufi_4_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)))) begin
        bufi_5_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_Addr_A;
    end else begin
        bufi_5_Addr_A = bufi_5_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_5_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)))) begin
        bufi_5_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_7_EN_A;
    end else begin
        bufi_5_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)))) begin
        bufi_6_Addr_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_Addr_A;
    end else begin
        bufi_6_Addr_A = bufi_6_Addr_A_orig << 32'd2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0))) begin
        bufi_6_EN_A = 1'b1;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)))) begin
        bufi_6_EN_A = grp_aesl_mux_load_7_3_x_s_fu_316_empty_8_EN_A;
    end else begin
        bufi_6_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)))) begin
        bufo_EN_A = 1'b1;
    end else begin
        bufo_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_3_reg_912) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0))) begin
        bufo_WEN_A = 4'd15;
    end else begin
        bufo_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)))) begin
        bufw_0_EN_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_EN_A;
    end else begin
        bufw_0_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)))) begin
        bufw_1_EN_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_EN_A;
    end else begin
        bufw_1_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)))) begin
        bufw_2_EN_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_EN_A;
    end else begin
        bufw_2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)))) begin
        bufw_3_EN_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_EN_A;
    end else begin
        bufw_3_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage24) & (ap_block_pp0_stage24_flag00011001 == 1'b0)))) begin
        bufw_4_EN_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_EN_A;
    end else begin
        bufw_4_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (tmp_3_reg_912 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0))) begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 4'd4;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0))) begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 4'd3;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0))) begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 4'd2;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0))) begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 4'd1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 4'd0;
        end else begin
            grp_aesl_mux_load_5_3_x_s_fu_337_empty = 'bx;
        end
    end else begin
        grp_aesl_mux_load_5_3_x_s_fu_337_empty = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_block_pp0_stage27_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_block_pp0_stage35_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage3_flag00000000 == 1'b0)))) begin
        grp_fu_361_p0 = grp_fu_361_p2;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0))) begin
        grp_fu_361_p0 = temp1_phi_fu_309_p4;
    end else begin
        grp_fu_361_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_block_pp0_stage35_flag00000000 == 1'b0))) begin
        grp_fu_361_p1 = tmp_13_3_reg_1036;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage3_flag00000000 == 1'b0)))) begin
        grp_fu_361_p1 = reg_381;
    end else if ((((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_block_pp0_stage27_flag00000000 == 1'b0)))) begin
        grp_fu_361_p1 = reg_376;
    end else begin
        grp_fu_361_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_enable_reg_pp0_iter0)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage26) & (ap_block_pp0_stage26_flag00000000 == 1'b0))) begin
            grp_fu_367_p1 = tmp_22_reg_1031;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0))) begin
            grp_fu_367_p1 = bufi_load_3_phi_reg_1026;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0))) begin
            grp_fu_367_p1 = bufi_load_2_phi_reg_1021;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0))) begin
            grp_fu_367_p1 = bufi_load_1_phi_reg_1016;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0))) begin
            grp_fu_367_p1 = bufi_load_0_phi_reg_1011;
        end else begin
            grp_fu_367_p1 = 'bx;
        end
    end else begin
        grp_fu_367_p1 = 'bx;
    end
end

always @ (*) begin
    if (((tmp_3_reg_912 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        p_4_phi_fu_298_p4 = i_V_reg_916;
    end else begin
        p_4_phi_fu_298_p4 = p_4_reg_294;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_tmp_3_reg_912) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0))) begin
        temp1_phi_fu_309_p4 = grp_fu_361_p2;
    end else begin
        temp1_phi_fu_309_p4 = temp1_reg_306;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten2_fu_391_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_632_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (tmp_3_fu_632_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if (((ap_block_pp0_stage12_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage12_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage12_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((ap_block_pp0_stage14_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((ap_block_pp0_stage15_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((ap_block_pp0_stage16_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((ap_block_pp0_stage17_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((ap_block_pp0_stage18_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((ap_block_pp0_stage19_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((ap_block_pp0_stage20_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((ap_block_pp0_stage21_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((ap_block_pp0_stage22_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((ap_block_pp0_stage23_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((ap_block_pp0_stage24_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((ap_block_pp0_stage25_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((ap_block_pp0_stage26_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((ap_block_pp0_stage27_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((ap_block_pp0_stage28_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((ap_block_pp0_stage29_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((ap_block_pp0_stage30_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((ap_block_pp0_stage31_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((ap_block_pp0_stage32_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((ap_block_pp0_stage33_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((ap_block_pp0_stage34_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((ap_block_pp0_stage35_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((ap_block_pp0_stage36_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((ap_block_pp0_stage37_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((ap_block_pp0_stage38_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((ap_block_pp0_stage39_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bufi_0_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_0_Clk_A = ap_clk;

assign bufi_0_Din_A = 32'd0;

assign bufi_0_Rst_A = ap_rst;

assign bufi_0_WEN_A = 4'd0;

assign bufi_1_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_1_Clk_A = ap_clk;

assign bufi_1_Din_A = 32'd0;

assign bufi_1_Rst_A = ap_rst;

assign bufi_1_WEN_A = 4'd0;

assign bufi_2_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_2_Clk_A = ap_clk;

assign bufi_2_Din_A = 32'd0;

assign bufi_2_Rst_A = ap_rst;

assign bufi_2_WEN_A = 4'd0;

assign bufi_3_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_3_Clk_A = ap_clk;

assign bufi_3_Din_A = 32'd0;

assign bufi_3_Rst_A = ap_rst;

assign bufi_3_WEN_A = 4'd0;

assign bufi_4_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_4_Clk_A = ap_clk;

assign bufi_4_Din_A = 32'd0;

assign bufi_4_Rst_A = ap_rst;

assign bufi_4_WEN_A = 4'd0;

assign bufi_5_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_5_Clk_A = ap_clk;

assign bufi_5_Din_A = 32'd0;

assign bufi_5_Rst_A = ap_rst;

assign bufi_5_WEN_A = 4'd0;

assign bufi_6_Addr_A_orig = tmp_20_cast_fu_657_p1;

assign bufi_6_Clk_A = ap_clk;

assign bufi_6_Din_A = 32'd0;

assign bufi_6_Rst_A = ap_rst;

assign bufi_6_WEN_A = 4'd0;

assign bufi_load_0_phi_fu_678_p3 = ((sel_tmp4_reg_904[0:0] === 1'b1) ? bufi_2_load_reg_986 : sel_tmp3_fu_672_p3);

assign bufi_load_1_phi_fu_695_p3 = ((sel_tmp4_reg_904[0:0] === 1'b1) ? bufi_3_load_reg_967 : sel_tmp9_fu_689_p3);

assign bufi_load_2_phi_fu_712_p3 = ((sel_tmp4_reg_904[0:0] === 1'b1) ? bufi_4_load_reg_993 : sel_tmp6_fu_706_p3);

assign bufi_load_3_phi_fu_729_p3 = ((sel_tmp4_reg_904[0:0] === 1'b1) ? bufi_5_load_reg_1000 : sel_tmp10_fu_723_p3);

assign bufo_Addr_A = bufo_Addr_A_orig << 32'd2;

assign bufo_Addr_A_orig = bufo_addr_reg_854;

assign bufo_Clk_A = ap_clk;

assign bufo_Din_A = temp_2_4_reg_1041;

assign bufo_Rst_A = ap_rst;

assign bufw_0_Addr_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_11_Addr_A;

assign bufw_0_Clk_A = ap_clk;

assign bufw_0_Din_A = 32'd0;

assign bufw_0_Rst_A = ap_rst;

assign bufw_0_WEN_A = 4'd0;

assign bufw_1_Addr_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_12_Addr_A;

assign bufw_1_Clk_A = ap_clk;

assign bufw_1_Din_A = 32'd0;

assign bufw_1_Rst_A = ap_rst;

assign bufw_1_WEN_A = 4'd0;

assign bufw_2_Addr_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_13_Addr_A;

assign bufw_2_Clk_A = ap_clk;

assign bufw_2_Din_A = 32'd0;

assign bufw_2_Rst_A = ap_rst;

assign bufw_2_WEN_A = 4'd0;

assign bufw_3_Addr_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_14_Addr_A;

assign bufw_3_Clk_A = ap_clk;

assign bufw_3_Din_A = 32'd0;

assign bufw_3_Rst_A = ap_rst;

assign bufw_3_WEN_A = 4'd0;

assign bufw_4_Addr_A = grp_aesl_mux_load_5_3_x_s_fu_337_empty_15_Addr_A;

assign bufw_4_Clk_A = ap_clk;

assign bufw_4_Din_A = 32'd0;

assign bufw_4_Rst_A = ap_rst;

assign bufw_4_WEN_A = 4'd0;

assign col_b_V_fu_735_p2 = (p_3_mid2_reg_827 + 2'd1);

assign exitcond_flatten1_fu_409_p2 = ((indvar_flatten_reg_258 == 4'd9) ? 1'b1 : 1'b0);

assign exitcond_flatten2_fu_391_p2 = ((indvar_flatten1_reg_211 == 7'd81) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_403_p2 = ((indvar_flatten2_reg_234 == 6'd27) ? 1'b1 : 1'b0);

assign exitcond_flatten_mid_fu_432_p2 = (exitcond_flatten1_reg_783 & not_exitcond_flatten_fu_415_p2);

assign exitcond_flatten_not_fu_437_p2 = (exitcond_flatten1_reg_783 ^ 1'd1);

assign grp_aesl_mux_load_5_3_x_s_fu_337_ap_start = ap_reg_grp_aesl_mux_load_5_3_x_s_fu_337_ap_start;

assign grp_aesl_mux_load_7_3_x_s_fu_316_ap_start = ap_reg_grp_aesl_mux_load_7_3_x_s_fu_316_ap_start;

assign i_V_fu_638_p2 = (p_4_phi_fu_298_p4 + 3'd1);

assign indvar_flatten15_op_fu_746_p2 = (indvar_flatten2_reg_234 + 6'd1);

assign indvar_flatten_next1_fu_758_p3 = ((exitcond_flatten_reg_772[0:0] === 1'b1) ? 6'd1 : indvar_flatten15_op_reg_1057);

assign indvar_flatten_next2_fu_397_p2 = (indvar_flatten1_reg_211 + 7'd1);

assign indvar_flatten_next_fu_752_p3 = ((tmp_2_reg_808[0:0] === 1'b1) ? 4'd1 : indvar_flatten_op_reg_1052);

assign indvar_flatten_op_fu_740_p2 = (indvar_flatten_reg_258 + 4'd1);

assign not_exitcond_flatten_1_fu_442_p2 = (exitcond_flatten_reg_772 | exitcond_flatten_not_fu_437_p2);

assign not_exitcond_flatten_fu_415_p2 = (exitcond_flatten_reg_772 ^ 1'd1);

assign p_1_mid_fu_453_p3 = ((exitcond_flatten_reg_772[0:0] === 1'b1) ? 2'd0 : p_1_reg_246);

assign p_2_mid_fu_464_p3 = ((tmp_2_fu_460_p2[0:0] === 1'b1) ? 2'd0 : p_2_reg_270);

assign p_3_mid2_fu_497_p3 = ((tmp_7_fu_492_p2[0:0] === 1'b1) ? 2'd0 : p_3_reg_282);

assign p_shl8_fu_521_p1 = tmp_4_fu_514_p3;

assign p_shl9_cast_fu_597_p1 = tmp_fu_590_p3;

assign p_shl_cast_fu_548_p3 = {{tmp_12_reg_849}, {2'd0}};

assign row_b_V_fu_483_p2 = (2'd1 + p_2_mid_reg_813);

assign sel_tmp10_fu_723_p3 = ((sel_tmp2_reg_896[0:0] === 1'b1) ? bufi_4_load_reg_993 : sel_tmp8_fu_718_p3);

assign sel_tmp1_fu_667_p3 = ((sel_tmp_reg_888[0:0] === 1'b1) ? bufi_0_load_reg_975 : bufi_3_load_reg_967);

assign sel_tmp2_fu_622_p2 = ((p_3_mid2_reg_827 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_672_p3 = ((sel_tmp2_reg_896[0:0] === 1'b1) ? bufi_1_load_reg_980 : sel_tmp1_fu_667_p3);

assign sel_tmp4_fu_627_p2 = ((p_3_mid2_reg_827 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp5_fu_701_p3 = ((sel_tmp_reg_888[0:0] === 1'b1) ? bufi_2_load_reg_986 : bufi_5_load_reg_1000);

assign sel_tmp6_fu_706_p3 = ((sel_tmp2_reg_896[0:0] === 1'b1) ? bufi_3_load_reg_967 : sel_tmp5_fu_701_p3);

assign sel_tmp7_fu_684_p3 = ((sel_tmp_reg_888[0:0] === 1'b1) ? bufi_1_load_reg_980 : bufi_4_load_reg_993);

assign sel_tmp8_fu_718_p3 = ((sel_tmp_reg_888[0:0] === 1'b1) ? bufi_3_load_reg_967 : bufi_6_load_reg_1006);

assign sel_tmp9_fu_689_p3 = ((sel_tmp2_reg_896[0:0] === 1'b1) ? bufi_2_load_reg_986 : sel_tmp7_fu_684_p3);

assign sel_tmp_fu_617_p2 = ((p_3_mid2_reg_827 == 2'd0) ? 1'b1 : 1'b0);

assign ti_b_V_fu_574_p2 = (2'd1 + p_s_reg_222);

assign tmp_11_fu_540_p1 = tmp_8_fu_534_p2[5:0];

assign tmp_12_48_t_fu_610_p3 = {{1'd1}, {p_3_mid2_reg_827}};

assign tmp_12_fu_544_p1 = tmp_8_fu_534_p2[3:0];

assign tmp_14_fu_555_p2 = (p_shl_cast_fu_548_p3 - tmp_11_reg_844);

assign tmp_15_fu_563_p2 = (tmp_cast_fu_560_p1 + tmp_14_fu_555_p2);

assign tmp_16_fu_652_p2 = (tmp_1_reg_868 + tmp_9_cast_cast_fu_649_p1);

assign tmp_18_cast_fu_569_p1 = tmp_15_fu_563_p2;

assign tmp_1_fu_601_p2 = (p_shl9_cast_fu_597_p1 - tmp_1_mid2_cast_fu_587_p1);

assign tmp_1_mid2_cast_fu_587_p1 = tmp_1_mid2_v_reg_859;

assign tmp_1_mid2_v_fu_580_p3 = ((exitcond_flatten_reg_772[0:0] === 1'b1) ? ti_b_V_fu_574_p2 : p_s_reg_222);

assign tmp_20_cast_fu_657_p1 = $signed(tmp_16_reg_927);

assign tmp_2_fu_460_p2 = (exitcond_flatten_mid_reg_789 | exitcond_flatten_reg_772);

assign tmp_3_fu_632_p2 = ((p_4_phi_fu_298_p4 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_4_fu_514_p3 = {{tmp_4_mid2_reg_819}, {2'd0}};

assign tmp_4_mid2_cast_fu_511_p1 = tmp_4_mid2_reg_819;

assign tmp_4_mid2_fu_477_p3 = ((exitcond_flatten_mid_reg_789[0:0] === 1'b1) ? to_b_V_fu_472_p2 : p_1_mid_reg_802);

assign tmp_5_fu_488_p2 = (tmp_8_mid1_reg_796 | exitcond_flatten_mid_reg_789);

assign tmp_6_fu_525_p2 = (p_shl8_fu_521_p1 - tmp_4_mid2_cast_fu_511_p1);

assign tmp_7_cast_mid2_cast_fu_607_p1 = tmp_7_mid2_reg_837;

assign tmp_7_fu_492_p2 = (tmp_5_fu_488_p2 | exitcond_flatten_reg_772);

assign tmp_7_mid2_cast_fu_531_p1 = tmp_7_mid2_reg_837;

assign tmp_7_mid2_fu_505_p3 = ((tmp_8_mid1_reg_796[0:0] === 1'b1) ? row_b_V_fu_483_p2 : p_2_mid_reg_813);

assign tmp_8_fu_534_p2 = (tmp_7_mid2_cast_fu_531_p1 + tmp_6_fu_525_p2);

assign tmp_8_mid1_fu_447_p2 = (tmp_8_mid_fu_426_p2 & not_exitcond_flatten_1_fu_442_p2);

assign tmp_8_mid_fu_426_p2 = (tmp_s_fu_420_p2 & not_exitcond_flatten_fu_415_p2);

assign tmp_9_cast_cast_fu_649_p1 = tmp_9_reg_921;

assign tmp_9_fu_644_p2 = (tmp_7_cast_mid2_cast_reg_873 + p_4_reg_294);

assign tmp_cast_fu_560_p1 = p_3_mid2_reg_827;

assign tmp_fu_590_p3 = {{tmp_1_mid2_v_reg_859}, {3'd0}};

assign tmp_s_fu_420_p2 = ((p_3_reg_282 == 2'd3) ? 1'b1 : 1'b0);

assign to_b_V_fu_472_p2 = (2'd1 + p_1_mid_reg_802);

always @ (posedge ap_clk) begin
    tmp_7_cast_mid2_cast_reg_873[2] <= 1'b0;
    tmp_12_48_t_reg_883[2] <= 1'b1;
end

endmodule //convolve_kernel
