// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aesl_mux_load_7_3_x_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aesl_mux_load_7_3_x_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aesl_mux_load_7_3_x_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> aesl_mux_load_7_3_x_s::ap_ST_fsm_pp0_stage0 = "1";
const bool aesl_mux_load_7_3_x_s::ap_const_boolean_1 = true;
const sc_lv<32> aesl_mux_load_7_3_x_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool aesl_mux_load_7_3_x_s::ap_const_boolean_0 = false;
const sc_lv<32> aesl_mux_load_7_3_x_s::ap_const_lv32_2 = "10";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_0 = "000";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_1 = "1";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_2 = "10";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_3 = "11";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_4 = "100";
const sc_lv<3> aesl_mux_load_7_3_x_s::ap_const_lv3_5 = "101";
const sc_lv<4> aesl_mux_load_7_3_x_s::ap_const_lv4_0 = "0000";

aesl_mux_load_7_3_x_s::aesl_mux_load_7_3_x_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_enable_reg_pp0_iter0);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_idle_pp0_0to3);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_ap_reset_idle_pp0);
    sensitive << ( ap_start );
    sensitive << ( ap_idle_pp0_0to3 );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_enable_reg_pp0_iter4 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( empty_27_reg_332 );
    sensitive << ( sel_tmp10_reg_357 );
    sensitive << ( sel_tmp9_fu_234_p3 );

    SC_METHOD(thread_empty_2_Addr_A);
    sensitive << ( tmp_22_reg_256 );

    SC_METHOD(thread_empty_2_Din_A);

    SC_METHOD(thread_empty_2_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_2_WEN_A);

    SC_METHOD(thread_empty_3_Addr_A);
    sensitive << ( tmp_22_reg_256 );

    SC_METHOD(thread_empty_3_Din_A);

    SC_METHOD(thread_empty_3_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_3_WEN_A);

    SC_METHOD(thread_empty_4_Addr_A);
    sensitive << ( ap_reg_pp0_iter1_tmp_22_reg_256 );

    SC_METHOD(thread_empty_4_Din_A);

    SC_METHOD(thread_empty_4_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_4_WEN_A);

    SC_METHOD(thread_empty_5_Addr_A);
    sensitive << ( ap_reg_pp0_iter1_tmp_22_reg_256 );

    SC_METHOD(thread_empty_5_Din_A);

    SC_METHOD(thread_empty_5_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_5_WEN_A);

    SC_METHOD(thread_empty_6_Addr_A);
    sensitive << ( ap_reg_pp0_iter1_tmp_22_reg_256 );

    SC_METHOD(thread_empty_6_Din_A);

    SC_METHOD(thread_empty_6_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_6_WEN_A);

    SC_METHOD(thread_empty_7_Addr_A);
    sensitive << ( ap_reg_pp0_iter1_tmp_22_reg_256 );

    SC_METHOD(thread_empty_7_Din_A);

    SC_METHOD(thread_empty_7_EN_A);
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_7_WEN_A);

    SC_METHOD(thread_empty_8_Addr_A);
    sensitive << ( tmp_22_reg_256 );

    SC_METHOD(thread_empty_8_Din_A);

    SC_METHOD(thread_empty_8_EN_A);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );

    SC_METHOD(thread_empty_8_WEN_A);

    SC_METHOD(thread_p_cast1_fu_148_p1);
    sensitive << ( empty );

    SC_METHOD(thread_p_cast_fu_152_p1);
    sensitive << ( empty_10 );

    SC_METHOD(thread_p_shl_fu_164_p1);
    sensitive << ( tmp_fu_156_p3 );

    SC_METHOD(thread_sel_tmp10_fu_218_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_sel_tmp1_fu_185_p3);
    sensitive << ( empty_21_reg_302 );
    sensitive << ( empty_22_reg_307 );
    sensitive << ( sel_tmp_fu_180_p2 );

    SC_METHOD(thread_sel_tmp2_fu_191_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_sel_tmp3_fu_196_p3);
    sensitive << ( empty_23_reg_312 );
    sensitive << ( sel_tmp2_fu_191_p2 );
    sensitive << ( sel_tmp1_fu_185_p3 );

    SC_METHOD(thread_sel_tmp4_fu_203_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_sel_tmp5_fu_223_p3);
    sensitive << ( empty_24_reg_317 );
    sensitive << ( sel_tmp3_reg_337 );
    sensitive << ( sel_tmp4_reg_342 );

    SC_METHOD(thread_sel_tmp6_fu_208_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_sel_tmp7_fu_228_p3);
    sensitive << ( empty_25_reg_322 );
    sensitive << ( sel_tmp6_reg_347 );
    sensitive << ( sel_tmp5_fu_223_p3 );

    SC_METHOD(thread_sel_tmp8_fu_213_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_sel_tmp9_fu_234_p3);
    sensitive << ( empty_26_reg_327 );
    sensitive << ( sel_tmp8_reg_352 );
    sensitive << ( sel_tmp7_fu_228_p3 );

    SC_METHOD(thread_sel_tmp_fu_180_p2);
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter2_tmp_15_reg_246 );

    SC_METHOD(thread_tmp_21_fu_168_p2);
    sensitive << ( p_shl_fu_164_p1 );
    sensitive << ( p_cast_fu_152_p1 );

    SC_METHOD(thread_tmp_22_fu_174_p2);
    sensitive << ( p_cast1_fu_148_p1 );
    sensitive << ( tmp_21_fu_168_p2 );

    SC_METHOD(thread_tmp_fu_156_p3);
    sensitive << ( empty_10 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_reset_idle_pp0 );

    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aesl_mux_load_7_3_x_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, empty_2_Addr_A, "(port)empty_2_Addr_A");
    sc_trace(mVcdFile, empty_2_EN_A, "(port)empty_2_EN_A");
    sc_trace(mVcdFile, empty_2_WEN_A, "(port)empty_2_WEN_A");
    sc_trace(mVcdFile, empty_2_Din_A, "(port)empty_2_Din_A");
    sc_trace(mVcdFile, empty_2_Dout_A, "(port)empty_2_Dout_A");
    sc_trace(mVcdFile, empty_3_Addr_A, "(port)empty_3_Addr_A");
    sc_trace(mVcdFile, empty_3_EN_A, "(port)empty_3_EN_A");
    sc_trace(mVcdFile, empty_3_WEN_A, "(port)empty_3_WEN_A");
    sc_trace(mVcdFile, empty_3_Din_A, "(port)empty_3_Din_A");
    sc_trace(mVcdFile, empty_3_Dout_A, "(port)empty_3_Dout_A");
    sc_trace(mVcdFile, empty_4_Addr_A, "(port)empty_4_Addr_A");
    sc_trace(mVcdFile, empty_4_EN_A, "(port)empty_4_EN_A");
    sc_trace(mVcdFile, empty_4_WEN_A, "(port)empty_4_WEN_A");
    sc_trace(mVcdFile, empty_4_Din_A, "(port)empty_4_Din_A");
    sc_trace(mVcdFile, empty_4_Dout_A, "(port)empty_4_Dout_A");
    sc_trace(mVcdFile, empty_5_Addr_A, "(port)empty_5_Addr_A");
    sc_trace(mVcdFile, empty_5_EN_A, "(port)empty_5_EN_A");
    sc_trace(mVcdFile, empty_5_WEN_A, "(port)empty_5_WEN_A");
    sc_trace(mVcdFile, empty_5_Din_A, "(port)empty_5_Din_A");
    sc_trace(mVcdFile, empty_5_Dout_A, "(port)empty_5_Dout_A");
    sc_trace(mVcdFile, empty_6_Addr_A, "(port)empty_6_Addr_A");
    sc_trace(mVcdFile, empty_6_EN_A, "(port)empty_6_EN_A");
    sc_trace(mVcdFile, empty_6_WEN_A, "(port)empty_6_WEN_A");
    sc_trace(mVcdFile, empty_6_Din_A, "(port)empty_6_Din_A");
    sc_trace(mVcdFile, empty_6_Dout_A, "(port)empty_6_Dout_A");
    sc_trace(mVcdFile, empty_7_Addr_A, "(port)empty_7_Addr_A");
    sc_trace(mVcdFile, empty_7_EN_A, "(port)empty_7_EN_A");
    sc_trace(mVcdFile, empty_7_WEN_A, "(port)empty_7_WEN_A");
    sc_trace(mVcdFile, empty_7_Din_A, "(port)empty_7_Din_A");
    sc_trace(mVcdFile, empty_7_Dout_A, "(port)empty_7_Dout_A");
    sc_trace(mVcdFile, empty_8_Addr_A, "(port)empty_8_Addr_A");
    sc_trace(mVcdFile, empty_8_EN_A, "(port)empty_8_EN_A");
    sc_trace(mVcdFile, empty_8_WEN_A, "(port)empty_8_WEN_A");
    sc_trace(mVcdFile, empty_8_Din_A, "(port)empty_8_Din_A");
    sc_trace(mVcdFile, empty_8_Dout_A, "(port)empty_8_Dout_A");
    sc_trace(mVcdFile, empty_9, "(port)empty_9");
    sc_trace(mVcdFile, empty_10, "(port)empty_10");
    sc_trace(mVcdFile, empty, "(port)empty");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, tmp_15_reg_246, "tmp_15_reg_246");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_15_reg_246, "ap_reg_pp0_iter1_tmp_15_reg_246");
    sc_trace(mVcdFile, ap_reg_pp0_iter2_tmp_15_reg_246, "ap_reg_pp0_iter2_tmp_15_reg_246");
    sc_trace(mVcdFile, tmp_22_fu_174_p2, "tmp_22_fu_174_p2");
    sc_trace(mVcdFile, tmp_22_reg_256, "tmp_22_reg_256");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_tmp_22_reg_256, "ap_reg_pp0_iter1_tmp_22_reg_256");
    sc_trace(mVcdFile, empty_21_reg_302, "empty_21_reg_302");
    sc_trace(mVcdFile, empty_22_reg_307, "empty_22_reg_307");
    sc_trace(mVcdFile, empty_23_reg_312, "empty_23_reg_312");
    sc_trace(mVcdFile, empty_24_reg_317, "empty_24_reg_317");
    sc_trace(mVcdFile, empty_25_reg_322, "empty_25_reg_322");
    sc_trace(mVcdFile, empty_26_reg_327, "empty_26_reg_327");
    sc_trace(mVcdFile, empty_27_reg_332, "empty_27_reg_332");
    sc_trace(mVcdFile, sel_tmp3_fu_196_p3, "sel_tmp3_fu_196_p3");
    sc_trace(mVcdFile, sel_tmp3_reg_337, "sel_tmp3_reg_337");
    sc_trace(mVcdFile, sel_tmp4_fu_203_p2, "sel_tmp4_fu_203_p2");
    sc_trace(mVcdFile, sel_tmp4_reg_342, "sel_tmp4_reg_342");
    sc_trace(mVcdFile, sel_tmp6_fu_208_p2, "sel_tmp6_fu_208_p2");
    sc_trace(mVcdFile, sel_tmp6_reg_347, "sel_tmp6_reg_347");
    sc_trace(mVcdFile, sel_tmp8_fu_213_p2, "sel_tmp8_fu_213_p2");
    sc_trace(mVcdFile, sel_tmp8_reg_352, "sel_tmp8_reg_352");
    sc_trace(mVcdFile, sel_tmp10_fu_218_p2, "sel_tmp10_fu_218_p2");
    sc_trace(mVcdFile, sel_tmp10_reg_357, "sel_tmp10_reg_357");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, tmp_fu_156_p3, "tmp_fu_156_p3");
    sc_trace(mVcdFile, p_shl_fu_164_p1, "p_shl_fu_164_p1");
    sc_trace(mVcdFile, p_cast_fu_152_p1, "p_cast_fu_152_p1");
    sc_trace(mVcdFile, p_cast1_fu_148_p1, "p_cast1_fu_148_p1");
    sc_trace(mVcdFile, tmp_21_fu_168_p2, "tmp_21_fu_168_p2");
    sc_trace(mVcdFile, sel_tmp_fu_180_p2, "sel_tmp_fu_180_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_191_p2, "sel_tmp2_fu_191_p2");
    sc_trace(mVcdFile, sel_tmp1_fu_185_p3, "sel_tmp1_fu_185_p3");
    sc_trace(mVcdFile, sel_tmp5_fu_223_p3, "sel_tmp5_fu_223_p3");
    sc_trace(mVcdFile, sel_tmp7_fu_228_p3, "sel_tmp7_fu_228_p3");
    sc_trace(mVcdFile, sel_tmp9_fu_234_p3, "sel_tmp9_fu_234_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0_0to3, "ap_idle_pp0_0to3");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

aesl_mux_load_7_3_x_s::~aesl_mux_load_7_3_x_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void aesl_mux_load_7_3_x_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0))) {
            ap_enable_reg_pp0_iter1 = ap_start.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_tmp_15_reg_246 = tmp_15_reg_246.read();
        ap_reg_pp0_iter1_tmp_22_reg_256 = tmp_22_reg_256.read();
        tmp_15_reg_246 = empty_9.read();
        tmp_22_reg_256 = tmp_22_fu_174_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0)) {
        ap_reg_pp0_iter2_tmp_15_reg_246 = ap_reg_pp0_iter1_tmp_15_reg_246.read();
        empty_21_reg_302 = empty_8_Dout_A.read();
        empty_22_reg_307 = empty_2_Dout_A.read();
        empty_23_reg_312 = empty_3_Dout_A.read();
        empty_24_reg_317 = empty_4_Dout_A.read();
        empty_25_reg_322 = empty_5_Dout_A.read();
        empty_26_reg_327 = empty_6_Dout_A.read();
        empty_27_reg_332 = empty_7_Dout_A.read();
        sel_tmp10_reg_357 = sel_tmp10_fu_218_p2.read();
        sel_tmp3_reg_337 = sel_tmp3_fu_196_p3.read();
        sel_tmp4_reg_342 = sel_tmp4_fu_203_p2.read();
        sel_tmp6_reg_347 = sel_tmp6_fu_208_p2.read();
        sel_tmp8_reg_352 = sel_tmp8_fu_213_p2.read();
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void aesl_mux_load_7_3_x_s::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void aesl_mux_load_7_3_x_s::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()));
}

void aesl_mux_load_7_3_x_s::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read());
}

void aesl_mux_load_7_3_x_s::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter4.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void aesl_mux_load_7_3_x_s::thread_ap_enable_reg_pp0_iter0() {
    ap_enable_reg_pp0_iter0 = ap_start.read();
}

void aesl_mux_load_7_3_x_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_idle_pp0_0to3() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()))) {
        ap_idle_pp0_0to3 = ap_const_logic_1;
    } else {
        ap_idle_pp0_0to3 = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_reset_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_idle_pp0_0to3.read()))) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_ap_return() {
    ap_return = (!sel_tmp10_reg_357.read()[0].is_01())? sc_lv<32>(): ((sel_tmp10_reg_357.read()[0].to_bool())? empty_27_reg_332.read(): sel_tmp9_fu_234_p3.read());
}

void aesl_mux_load_7_3_x_s::thread_empty_2_Addr_A() {
    empty_2_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_2_Din_A() {
    empty_2_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_2_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        empty_2_EN_A = ap_const_logic_1;
    } else {
        empty_2_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_2_WEN_A() {
    empty_2_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_3_Addr_A() {
    empty_3_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_3_Din_A() {
    empty_3_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_3_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        empty_3_EN_A = ap_const_logic_1;
    } else {
        empty_3_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_3_WEN_A() {
    empty_3_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_4_Addr_A() {
    empty_4_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): ap_reg_pp0_iter1_tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_4_Din_A() {
    empty_4_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_4_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_4_EN_A = ap_const_logic_1;
    } else {
        empty_4_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_4_WEN_A() {
    empty_4_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_5_Addr_A() {
    empty_5_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): ap_reg_pp0_iter1_tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_5_Din_A() {
    empty_5_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_5_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_5_EN_A = ap_const_logic_1;
    } else {
        empty_5_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_5_WEN_A() {
    empty_5_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_6_Addr_A() {
    empty_6_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): ap_reg_pp0_iter1_tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_6_Din_A() {
    empty_6_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_6_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_6_EN_A = ap_const_logic_1;
    } else {
        empty_6_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_6_WEN_A() {
    empty_6_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_7_Addr_A() {
    empty_7_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): ap_reg_pp0_iter1_tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_7_Din_A() {
    empty_7_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_7_EN_A() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()))) {
        empty_7_EN_A = ap_const_logic_1;
    } else {
        empty_7_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_7_WEN_A() {
    empty_7_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_8_Addr_A() {
    empty_8_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_22_reg_256.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void aesl_mux_load_7_3_x_s::thread_empty_8_Din_A() {
    empty_8_Din_A = ap_const_lv32_0;
}

void aesl_mux_load_7_3_x_s::thread_empty_8_EN_A() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        empty_8_EN_A = ap_const_logic_1;
    } else {
        empty_8_EN_A = ap_const_logic_0;
    }
}

void aesl_mux_load_7_3_x_s::thread_empty_8_WEN_A() {
    empty_8_WEN_A = ap_const_lv4_0;
}

void aesl_mux_load_7_3_x_s::thread_p_cast1_fu_148_p1() {
    p_cast1_fu_148_p1 = esl_zext<32,3>(empty.read());
}

void aesl_mux_load_7_3_x_s::thread_p_cast_fu_152_p1() {
    p_cast_fu_152_p1 = esl_zext<32,2>(empty_10.read());
}

void aesl_mux_load_7_3_x_s::thread_p_shl_fu_164_p1() {
    p_shl_fu_164_p1 = esl_zext<32,5>(tmp_fu_156_p3.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp10_fu_218_p2() {
    sel_tmp10_fu_218_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_5);
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp1_fu_185_p3() {
    sel_tmp1_fu_185_p3 = (!sel_tmp_fu_180_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_180_p2.read()[0].to_bool())? empty_22_reg_307.read(): empty_21_reg_302.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp2_fu_191_p2() {
    sel_tmp2_fu_191_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_1);
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp3_fu_196_p3() {
    sel_tmp3_fu_196_p3 = (!sel_tmp2_fu_191_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp2_fu_191_p2.read()[0].to_bool())? empty_23_reg_312.read(): sel_tmp1_fu_185_p3.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp4_fu_203_p2() {
    sel_tmp4_fu_203_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_2.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_2);
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp5_fu_223_p3() {
    sel_tmp5_fu_223_p3 = (!sel_tmp4_reg_342.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_reg_342.read()[0].to_bool())? empty_24_reg_317.read(): sel_tmp3_reg_337.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp6_fu_208_p2() {
    sel_tmp6_fu_208_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_3);
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp7_fu_228_p3() {
    sel_tmp7_fu_228_p3 = (!sel_tmp6_reg_347.read()[0].is_01())? sc_lv<32>(): ((sel_tmp6_reg_347.read()[0].to_bool())? empty_25_reg_322.read(): sel_tmp5_fu_223_p3.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp8_fu_213_p2() {
    sel_tmp8_fu_213_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_4);
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp9_fu_234_p3() {
    sel_tmp9_fu_234_p3 = (!sel_tmp8_reg_352.read()[0].is_01())? sc_lv<32>(): ((sel_tmp8_reg_352.read()[0].to_bool())? empty_26_reg_327.read(): sel_tmp7_fu_228_p3.read());
}

void aesl_mux_load_7_3_x_s::thread_sel_tmp_fu_180_p2() {
    sel_tmp_fu_180_p2 = (!ap_reg_pp0_iter2_tmp_15_reg_246.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_reg_pp0_iter2_tmp_15_reg_246.read() == ap_const_lv3_0);
}

void aesl_mux_load_7_3_x_s::thread_tmp_21_fu_168_p2() {
    tmp_21_fu_168_p2 = (!p_shl_fu_164_p1.read().is_01() || !p_cast_fu_152_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_shl_fu_164_p1.read()) - sc_biguint<32>(p_cast_fu_152_p1.read()));
}

void aesl_mux_load_7_3_x_s::thread_tmp_22_fu_174_p2() {
    tmp_22_fu_174_p2 = (!p_cast1_fu_148_p1.read().is_01() || !tmp_21_fu_168_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(p_cast1_fu_148_p1.read()) + sc_biguint<32>(tmp_21_fu_168_p2.read()));
}

void aesl_mux_load_7_3_x_s::thread_tmp_fu_156_p3() {
    tmp_fu_156_p3 = esl_concat<2,3>(empty_10.read(), ap_const_lv3_0);
}

void aesl_mux_load_7_3_x_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

