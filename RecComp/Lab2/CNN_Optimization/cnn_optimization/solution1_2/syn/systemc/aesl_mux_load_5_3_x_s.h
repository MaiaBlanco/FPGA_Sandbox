// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _aesl_mux_load_5_3_x_s_HH_
#define _aesl_mux_load_5_3_x_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct aesl_mux_load_5_3_x_s : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_logic > ap_ce;
    sc_out< sc_lv<32> > empty_11_Addr_A;
    sc_out< sc_logic > empty_11_EN_A;
    sc_out< sc_lv<4> > empty_11_WEN_A;
    sc_out< sc_lv<32> > empty_11_Din_A;
    sc_in< sc_lv<32> > empty_11_Dout_A;
    sc_out< sc_lv<32> > empty_12_Addr_A;
    sc_out< sc_logic > empty_12_EN_A;
    sc_out< sc_lv<4> > empty_12_WEN_A;
    sc_out< sc_lv<32> > empty_12_Din_A;
    sc_in< sc_lv<32> > empty_12_Dout_A;
    sc_out< sc_lv<32> > empty_13_Addr_A;
    sc_out< sc_logic > empty_13_EN_A;
    sc_out< sc_lv<4> > empty_13_WEN_A;
    sc_out< sc_lv<32> > empty_13_Din_A;
    sc_in< sc_lv<32> > empty_13_Dout_A;
    sc_out< sc_lv<32> > empty_14_Addr_A;
    sc_out< sc_logic > empty_14_EN_A;
    sc_out< sc_lv<4> > empty_14_WEN_A;
    sc_out< sc_lv<32> > empty_14_Din_A;
    sc_in< sc_lv<32> > empty_14_Dout_A;
    sc_out< sc_lv<32> > empty_15_Addr_A;
    sc_out< sc_logic > empty_15_EN_A;
    sc_out< sc_lv<4> > empty_15_WEN_A;
    sc_out< sc_lv<32> > empty_15_Din_A;
    sc_in< sc_lv<32> > empty_15_Dout_A;
    sc_in< sc_lv<3> > empty_16;
    sc_in< sc_lv<2> > empty_17;
    sc_in< sc_lv<2> > empty_18;
    sc_in< sc_lv<4> > empty;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    aesl_mux_load_5_3_x_s(sc_module_name name);
    SC_HAS_PROCESS(aesl_mux_load_5_3_x_s);

    ~aesl_mux_load_5_3_x_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<4> > tmp_16_reg_224;
    sc_signal< sc_lv<3> > tmp_19_reg_229;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter1_tmp_19_reg_229;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter2_tmp_19_reg_229;
    sc_signal< sc_lv<32> > tmp_23_fu_156_p2;
    sc_signal< sc_lv<32> > tmp_23_reg_237;
    sc_signal< sc_lv<32> > tmp_25_fu_175_p2;
    sc_signal< sc_lv<32> > tmp_25_reg_243;
    sc_signal< sc_lv<32> > empty_28_reg_277;
    sc_signal< sc_lv<32> > empty_29_reg_282;
    sc_signal< sc_lv<32> > empty_30_reg_287;
    sc_signal< sc_lv<32> > empty_31_reg_292;
    sc_signal< sc_lv<32> > empty_32_reg_297;
    sc_signal< sc_lv<1> > sel_tmp_fu_181_p2;
    sc_signal< sc_lv<1> > sel_tmp_reg_302;
    sc_signal< sc_lv<1> > sel_tmp2_fu_186_p2;
    sc_signal< sc_lv<1> > sel_tmp2_reg_307;
    sc_signal< sc_lv<1> > sel_tmp4_fu_191_p2;
    sc_signal< sc_lv<1> > sel_tmp4_reg_312;
    sc_signal< sc_lv<1> > sel_tmp6_fu_196_p2;
    sc_signal< sc_lv<1> > sel_tmp6_reg_317;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_lv<4> > tmp_fu_138_p3;
    sc_signal< sc_lv<32> > p_shl1_fu_146_p1;
    sc_signal< sc_lv<32> > p_cast_fu_134_p1;
    sc_signal< sc_lv<32> > tmp_s_fu_150_p2;
    sc_signal< sc_lv<32> > p_cast1_fu_130_p1;
    sc_signal< sc_lv<32> > tmp_20_fu_165_p2;
    sc_signal< sc_lv<32> > tmp_24_fu_170_p2;
    sc_signal< sc_lv<32> > p_cast2_fu_162_p1;
    sc_signal< sc_lv<32> > sel_tmp1_fu_201_p3;
    sc_signal< sc_lv<32> > sel_tmp3_fu_206_p3;
    sc_signal< sc_lv<32> > sel_tmp5_fu_212_p3;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to3;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_reset_start_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<4> ap_const_lv4_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_block_state4_pp0_stage0_iter3();
    void thread_ap_block_state5_pp0_stage0_iter4();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to3();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_ap_reset_start_pp0();
    void thread_ap_return();
    void thread_empty_11_Addr_A();
    void thread_empty_11_Din_A();
    void thread_empty_11_EN_A();
    void thread_empty_11_WEN_A();
    void thread_empty_12_Addr_A();
    void thread_empty_12_Din_A();
    void thread_empty_12_EN_A();
    void thread_empty_12_WEN_A();
    void thread_empty_13_Addr_A();
    void thread_empty_13_Din_A();
    void thread_empty_13_EN_A();
    void thread_empty_13_WEN_A();
    void thread_empty_14_Addr_A();
    void thread_empty_14_Din_A();
    void thread_empty_14_EN_A();
    void thread_empty_14_WEN_A();
    void thread_empty_15_Addr_A();
    void thread_empty_15_Din_A();
    void thread_empty_15_EN_A();
    void thread_empty_15_WEN_A();
    void thread_p_cast1_fu_130_p1();
    void thread_p_cast2_fu_162_p1();
    void thread_p_cast_fu_134_p1();
    void thread_p_shl1_fu_146_p1();
    void thread_sel_tmp1_fu_201_p3();
    void thread_sel_tmp2_fu_186_p2();
    void thread_sel_tmp3_fu_206_p3();
    void thread_sel_tmp4_fu_191_p2();
    void thread_sel_tmp5_fu_212_p3();
    void thread_sel_tmp6_fu_196_p2();
    void thread_sel_tmp_fu_181_p2();
    void thread_tmp_20_fu_165_p2();
    void thread_tmp_23_fu_156_p2();
    void thread_tmp_24_fu_170_p2();
    void thread_tmp_25_fu_175_p2();
    void thread_tmp_fu_138_p3();
    void thread_tmp_s_fu_150_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
