// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.664000,HLS_SYN_LAT=451,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=198,HLS_SYN_LUT=228}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0,
        prod_q0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_pp0_stage0 = 8'd32;
parameter    ap_ST_fsm_pp0_stage1 = 8'd64;
parameter    ap_ST_fsm_state11 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [4:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;
input  [15:0] prod_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg prod_ce0;
reg prod_we0;
reg[15:0] prod_d0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] k_reg_127;
wire   [4:0] indvar_flatten_next_fu_144_p2;
reg   [4:0] indvar_flatten_next_reg_288;
wire    ap_CS_fsm_state2;
wire   [2:0] j_mid2_fu_162_p3;
reg   [2:0] j_mid2_reg_293;
wire   [0:0] exitcond_flatten_fu_138_p2;
wire   [2:0] i_cast3_mid2_v_fu_170_p3;
reg   [2:0] i_cast3_mid2_v_reg_299;
wire   [5:0] tmp_7_fu_192_p2;
reg   [5:0] tmp_7_reg_306;
wire    ap_CS_fsm_state3;
wire   [5:0] j_cast2_cast_fu_198_p1;
reg   [5:0] j_cast2_cast_reg_312;
wire    ap_CS_fsm_state4;
reg   [4:0] prod_addr_reg_317;
wire   [0:0] exitcond_fu_211_p2;
reg   [0:0] exitcond_reg_322;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_322;
wire   [2:0] k_1_fu_217_p2;
reg   [2:0] k_1_reg_326;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] tmp_9_fu_227_p2;
reg   [5:0] tmp_9_reg_331;
wire   [5:0] tmp_11_fu_250_p2;
reg   [5:0] tmp_11_reg_336;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
wire   [2:0] j_1_fu_271_p2;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] indvar_flatten_reg_94;
reg   [2:0] i_reg_105;
reg   [2:0] j_reg_116;
reg   [2:0] k_phi_fu_131_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] tmp_8_cast_fu_206_p1;
wire   [31:0] tmp_9_cast_fu_255_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire   [31:0] tmp_12_cast_fu_259_p1;
wire  signed [15:0] grp_fu_276_p3;
wire   [0:0] exitcond1_fu_156_p2;
wire   [2:0] i_1_fu_150_p2;
wire   [4:0] tmp_4_fu_181_p3;
wire   [5:0] i_cast3_mid2_cast_fu_178_p1;
wire   [5:0] p_shl_cast_fu_188_p1;
wire   [5:0] tmp_8_fu_201_p2;
wire   [5:0] k_cast1_cast_fu_223_p1;
wire   [4:0] tmp_s_fu_232_p3;
wire   [5:0] p_shl1_cast_fu_240_p1;
wire   [5:0] tmp_10_fu_244_p2;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

matrix_mult_mac_mbkb #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_q0),
    .din1(b_q0),
    .din2(prod_q0),
    .ce(1'b1),
    .dout(grp_fu_276_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state6)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state6 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011011 == 1'b0)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_reg_105 <= i_cast3_mid2_v_reg_299;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_105 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        indvar_flatten_reg_94 <= indvar_flatten_next_reg_288;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_94 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_reg_116 <= j_1_fu_271_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_116 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_322) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        k_reg_127 <= k_1_reg_326;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_322 <= exitcond_reg_322;
        exitcond_reg_322 <= exitcond_fu_211_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_138_p2 == 1'd0))) begin
        i_cast3_mid2_v_reg_299 <= i_cast3_mid2_v_fu_170_p3;
        j_mid2_reg_293 <= j_mid2_fu_162_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        indvar_flatten_next_reg_288 <= indvar_flatten_next_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_cast2_cast_reg_312[2 : 0] <= j_cast2_cast_fu_198_p1[2 : 0];
        prod_addr_reg_317 <= tmp_8_cast_fu_206_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        k_1_reg_326 <= k_1_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_211_p2))) begin
        tmp_11_reg_336 <= tmp_11_fu_250_p2;
        tmp_9_reg_331 <= tmp_9_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_7_reg_306 <= tmp_7_fu_192_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_211_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_138_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_138_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_322) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        k_phi_fu_131_p4 = k_1_reg_326;
    end else begin
        k_phi_fu_131_p4 = k_reg_127;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2))) begin
        prod_d0 = grp_fu_276_p3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        prod_d0 = 16'd0;
    end else begin
        prod_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_322)))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_flatten_fu_138_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_211_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_211_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = tmp_9_cast_fu_255_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = tmp_12_cast_fu_259_p1;

assign exitcond1_fu_156_p2 = ((j_reg_116 == 3'd5) ? 1'b1 : 1'b0);

assign exitcond_flatten_fu_138_p2 = ((indvar_flatten_reg_94 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_fu_211_p2 = ((k_phi_fu_131_p4 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_150_p2 = (i_reg_105 + 3'd1);

assign i_cast3_mid2_cast_fu_178_p1 = i_cast3_mid2_v_reg_299;

assign i_cast3_mid2_v_fu_170_p3 = ((exitcond1_fu_156_p2[0:0] === 1'b1) ? i_1_fu_150_p2 : i_reg_105);

assign indvar_flatten_next_fu_144_p2 = (indvar_flatten_reg_94 + 5'd1);

assign j_1_fu_271_p2 = (j_mid2_reg_293 + 3'd1);

assign j_cast2_cast_fu_198_p1 = j_mid2_reg_293;

assign j_mid2_fu_162_p3 = ((exitcond1_fu_156_p2[0:0] === 1'b1) ? 3'd0 : j_reg_116);

assign k_1_fu_217_p2 = (k_phi_fu_131_p4 + 3'd1);

assign k_cast1_cast_fu_223_p1 = k_phi_fu_131_p4;

assign p_shl1_cast_fu_240_p1 = tmp_s_fu_232_p3;

assign p_shl_cast_fu_188_p1 = tmp_4_fu_181_p3;

assign prod_address0 = prod_addr_reg_317;

assign tmp_10_fu_244_p2 = (k_cast1_cast_fu_223_p1 + p_shl1_cast_fu_240_p1);

assign tmp_11_fu_250_p2 = (tmp_10_fu_244_p2 + j_cast2_cast_reg_312);

assign tmp_12_cast_fu_259_p1 = tmp_11_reg_336;

assign tmp_4_fu_181_p3 = {{i_cast3_mid2_v_reg_299}, {2'd0}};

assign tmp_7_fu_192_p2 = (i_cast3_mid2_cast_fu_178_p1 + p_shl_cast_fu_188_p1);

assign tmp_8_cast_fu_206_p1 = tmp_8_fu_201_p2;

assign tmp_8_fu_201_p2 = (tmp_7_reg_306 + j_cast2_cast_fu_198_p1);

assign tmp_9_cast_fu_255_p1 = tmp_9_reg_331;

assign tmp_9_fu_227_p2 = (tmp_7_reg_306 + k_cast1_cast_fu_223_p1);

assign tmp_s_fu_232_p3 = {{k_phi_fu_131_p4}, {2'd0}};

always @ (posedge ap_clk) begin
    j_cast2_cast_reg_312[5:3] <= 3'b000;
end

endmodule //matrix_mult
