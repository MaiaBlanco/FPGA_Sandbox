// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _matrix_mult_HH_
#define _matrix_mult_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "matrix_mult_mul_8bkb.h"
#include "matrix_mult_mac_mcud.h"
#include "matrix_mult_mac_mdEe.h"

namespace ap_rtl {

struct matrix_mult : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<3> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_in< sc_lv<40> > a_q0;
    sc_out< sc_lv<3> > b_address0;
    sc_out< sc_logic > b_ce0;
    sc_in< sc_lv<40> > b_q0;
    sc_out< sc_lv<5> > prod_address0;
    sc_out< sc_logic > prod_ce0;
    sc_out< sc_logic > prod_we0;
    sc_out< sc_lv<16> > prod_d0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    matrix_mult(sc_module_name name);
    SC_HAS_PROCESS(matrix_mult);

    ~matrix_mult();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    matrix_mult_mul_8bkb<1,5,8,8,16>* matrix_mult_mul_8bkb_U0;
    matrix_mult_mul_8bkb<1,5,8,8,16>* matrix_mult_mul_8bkb_U1;
    matrix_mult_mac_mcud<1,3,8,8,16,16>* matrix_mult_mac_mcud_U2;
    matrix_mult_mac_mcud<1,3,8,8,16,16>* matrix_mult_mac_mcud_U3;
    matrix_mult_mac_mdEe<1,3,8,8,16,16>* matrix_mult_mac_mdEe_U4;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > indvar_flatten_reg_104;
    sc_signal< sc_lv<3> > i_reg_115;
    sc_signal< sc_lv<3> > j_reg_126;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_137_p2;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_379;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter6;
    sc_signal< bool > ap_block_state9_pp0_stage0_iter7;
    sc_signal< bool > ap_block_state10_pp0_stage0_iter8;
    sc_signal< bool > ap_block_state11_pp0_stage0_iter9;
    sc_signal< bool > ap_block_state12_pp0_stage0_iter10;
    sc_signal< bool > ap_block_state13_pp0_stage0_iter11;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter2_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter3_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter4_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter5_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter6_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter7_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter8_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter9_exitcond_flatten_reg_379;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter10_exitcond_flatten_reg_379;
    sc_signal< sc_lv<5> > indvar_flatten_next_fu_143_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > j_mid2_fu_161_p3;
    sc_signal< sc_lv<3> > j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter1_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter2_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter3_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter4_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter5_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter6_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter7_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter8_j_mid2_reg_388;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter9_j_mid2_reg_388;
    sc_signal< sc_lv<3> > i_cast6_mid2_v_fu_169_p3;
    sc_signal< sc_lv<3> > i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394;
    sc_signal< sc_lv<3> > j_1_fu_177_p2;
    sc_signal< sc_lv<8> > tmp_17_fu_191_p1;
    sc_signal< sc_lv<8> > tmp_17_reg_417;
    sc_signal< sc_lv<8> > tmp_18_fu_195_p1;
    sc_signal< sc_lv<8> > tmp_18_reg_422;
    sc_signal< sc_lv<8> > tmp_6_reg_427;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_6_reg_427;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_6_reg_427;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_6_reg_427;
    sc_signal< sc_lv<8> > tmp_7_reg_432;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_7_reg_432;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_7_reg_432;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_7_reg_432;
    sc_signal< sc_lv<8> > tmp_8_reg_437;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_8_reg_437;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_8_reg_437;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_8_reg_437;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter6_tmp_8_reg_437;
    sc_signal< sc_lv<8> > tmp_9_reg_442;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_9_reg_442;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_9_reg_442;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_9_reg_442;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter6_tmp_9_reg_442;
    sc_signal< sc_lv<8> > tmp_10_reg_447;
    sc_signal< sc_lv<8> > tmp_13_reg_452;
    sc_signal< sc_lv<8> > tmp_14_reg_457;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_14_reg_457;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_14_reg_457;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_14_reg_457;
    sc_signal< sc_lv<8> > tmp_15_reg_462;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter3_tmp_15_reg_462;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter4_tmp_15_reg_462;
    sc_signal< sc_lv<8> > ap_reg_pp0_iter5_tmp_15_reg_462;
    sc_signal< sc_lv<16> > grp_fu_285_p2;
    sc_signal< sc_lv<16> > tmp_16_reg_507;
    sc_signal< sc_lv<16> > grp_fu_297_p2;
    sc_signal< sc_lv<16> > tmp_2_3_reg_522;
    sc_signal< sc_lv<16> > grp_fu_358_p3;
    sc_signal< sc_lv<16> > tmp1_reg_527;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter8;
    sc_signal< sc_lv<16> > ap_reg_pp0_iter9_tmp1_reg_527;
    sc_signal< sc_lv<16> > grp_fu_365_p3;
    sc_signal< sc_lv<16> > tmp4_reg_532;
    sc_signal< sc_lv<16> > grp_fu_372_p3;
    sc_signal< sc_lv<16> > tmp2_reg_537;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter9;
    sc_signal< sc_lv<6> > tmp_5_fu_344_p2;
    sc_signal< sc_lv<6> > tmp_5_reg_542;
    sc_signal< sc_lv<16> > tmp_3_4_fu_350_p2;
    sc_signal< sc_lv<16> > tmp_3_4_reg_547;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter10;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter11;
    sc_signal< sc_lv<3> > i_phi_fu_119_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<32> > i_cast6_mid2_fu_183_p1;
    sc_signal< sc_lv<32> > j_cast5_fu_187_p1;
    sc_signal< sc_lv<32> > tmp_18_cast_fu_354_p1;
    sc_signal< sc_lv<1> > exitcond_fu_155_p2;
    sc_signal< sc_lv<3> > i_1_fu_149_p2;
    sc_signal< sc_lv<5> > tmp_fu_324_p3;
    sc_signal< sc_lv<6> > p_shl_cast_fu_331_p1;
    sc_signal< sc_lv<6> > i_cast6_mid2_cast_fu_321_p1;
    sc_signal< sc_lv<6> > j_cast5_cast_fu_341_p1;
    sc_signal< sc_lv<6> > tmp_2_fu_335_p2;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state14;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<5> ap_const_lv5_19;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_27;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_ce0();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_state10_pp0_stage0_iter8();
    void thread_ap_block_state11_pp0_stage0_iter9();
    void thread_ap_block_state12_pp0_stage0_iter10();
    void thread_ap_block_state13_pp0_stage0_iter11();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_block_state8_pp0_stage0_iter6();
    void thread_ap_block_state9_pp0_stage0_iter7();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_b_address0();
    void thread_b_ce0();
    void thread_exitcond_flatten_fu_137_p2();
    void thread_exitcond_fu_155_p2();
    void thread_i_1_fu_149_p2();
    void thread_i_cast6_mid2_cast_fu_321_p1();
    void thread_i_cast6_mid2_fu_183_p1();
    void thread_i_cast6_mid2_v_fu_169_p3();
    void thread_i_phi_fu_119_p4();
    void thread_indvar_flatten_next_fu_143_p2();
    void thread_j_1_fu_177_p2();
    void thread_j_cast5_cast_fu_341_p1();
    void thread_j_cast5_fu_187_p1();
    void thread_j_mid2_fu_161_p3();
    void thread_p_shl_cast_fu_331_p1();
    void thread_prod_address0();
    void thread_prod_ce0();
    void thread_prod_d0();
    void thread_prod_we0();
    void thread_tmp_17_fu_191_p1();
    void thread_tmp_18_cast_fu_354_p1();
    void thread_tmp_18_fu_195_p1();
    void thread_tmp_2_fu_335_p2();
    void thread_tmp_3_4_fu_350_p2();
    void thread_tmp_5_fu_344_p2();
    void thread_tmp_fu_324_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
