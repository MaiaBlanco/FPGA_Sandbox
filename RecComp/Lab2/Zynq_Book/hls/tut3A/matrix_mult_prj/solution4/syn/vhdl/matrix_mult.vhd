-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (39 downto 0);
    prod_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_ce0 : OUT STD_LOGIC;
    prod_we0 : OUT STD_LOGIC;
    prod_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.402000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1112,HLS_SYN_LUT=595}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_115 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_379 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_143_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_161_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter2_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_j_mid2_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast6_mid2_v_fu_169_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_fu_177_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_17_fu_191_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_reg_417 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_195_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_reg_422 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_6_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_6_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_6_reg_427 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_7_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_7_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_7_reg_432 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_8_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_8_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_8_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_tmp_8_reg_437 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_9_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_9_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_9_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter6_tmp_9_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_447 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_452 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_14_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_14_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_14_reg_457 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter3_tmp_15_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter4_tmp_15_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_reg_pp0_iter5_tmp_15_reg_462 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_297_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_3_reg_522 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_358_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter9_tmp1_reg_527 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_365_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_532 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_372_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp2_reg_537 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal tmp_5_fu_344_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_reg_542 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_4_fu_350_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_3_4_fu_350_p2 : signal is "no";
    signal tmp_3_4_reg_547 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal i_phi_fu_119_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_cast6_mid2_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast5_fu_187_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_149_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_331_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast6_mid2_cast_fu_321_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast5_cast_fu_341_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_335_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_mult_mul_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_mac_mcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_mac_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrix_mult_mul_8bkb_U0 : component matrix_mult_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_422,
        din1 => tmp_17_reg_417,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    matrix_mult_mul_8bkb_U1 : component matrix_mult_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_13_reg_452,
        din1 => tmp_10_reg_447,
        ce => ap_const_logic_1,
        dout => grp_fu_297_p2);

    matrix_mult_mac_mcud_U2 : component matrix_mult_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_reg_pp0_iter5_tmp_7_reg_432,
        din1 => ap_reg_pp0_iter5_tmp_6_reg_427,
        din2 => tmp_16_reg_507,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p3);

    matrix_mult_mac_mcud_U3 : component matrix_mult_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_reg_pp0_iter5_tmp_15_reg_462,
        din1 => ap_reg_pp0_iter5_tmp_14_reg_457,
        din2 => tmp_2_3_reg_522,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p3);

    matrix_mult_mac_mdEe_U4 : component matrix_mult_mac_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_reg_pp0_iter6_tmp_9_reg_442,
        din1 => ap_reg_pp0_iter6_tmp_8_reg_437,
        din2 => tmp4_reg_532,
        ce => ap_const_logic_1,
        dout => grp_fu_372_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
                i_reg_115 <= i_cast6_mid2_v_reg_394;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_115 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_104 <= indvar_flatten_next_fu_143_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_104 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_0))) then 
                j_reg_126 <= j_1_fu_177_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_379 <= ap_reg_pp0_iter9_exitcond_flatten_reg_379;
                ap_reg_pp0_iter2_exitcond_flatten_reg_379 <= ap_reg_pp0_iter1_exitcond_flatten_reg_379;
                ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter2_j_mid2_reg_388 <= ap_reg_pp0_iter1_j_mid2_reg_388;
                ap_reg_pp0_iter3_exitcond_flatten_reg_379 <= ap_reg_pp0_iter2_exitcond_flatten_reg_379;
                ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter3_j_mid2_reg_388 <= ap_reg_pp0_iter2_j_mid2_reg_388;
                ap_reg_pp0_iter3_tmp_14_reg_457 <= tmp_14_reg_457;
                ap_reg_pp0_iter3_tmp_15_reg_462 <= tmp_15_reg_462;
                ap_reg_pp0_iter3_tmp_6_reg_427 <= tmp_6_reg_427;
                ap_reg_pp0_iter3_tmp_7_reg_432 <= tmp_7_reg_432;
                ap_reg_pp0_iter3_tmp_8_reg_437 <= tmp_8_reg_437;
                ap_reg_pp0_iter3_tmp_9_reg_442 <= tmp_9_reg_442;
                ap_reg_pp0_iter4_exitcond_flatten_reg_379 <= ap_reg_pp0_iter3_exitcond_flatten_reg_379;
                ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter4_j_mid2_reg_388 <= ap_reg_pp0_iter3_j_mid2_reg_388;
                ap_reg_pp0_iter4_tmp_14_reg_457 <= ap_reg_pp0_iter3_tmp_14_reg_457;
                ap_reg_pp0_iter4_tmp_15_reg_462 <= ap_reg_pp0_iter3_tmp_15_reg_462;
                ap_reg_pp0_iter4_tmp_6_reg_427 <= ap_reg_pp0_iter3_tmp_6_reg_427;
                ap_reg_pp0_iter4_tmp_7_reg_432 <= ap_reg_pp0_iter3_tmp_7_reg_432;
                ap_reg_pp0_iter4_tmp_8_reg_437 <= ap_reg_pp0_iter3_tmp_8_reg_437;
                ap_reg_pp0_iter4_tmp_9_reg_442 <= ap_reg_pp0_iter3_tmp_9_reg_442;
                ap_reg_pp0_iter5_exitcond_flatten_reg_379 <= ap_reg_pp0_iter4_exitcond_flatten_reg_379;
                ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter5_j_mid2_reg_388 <= ap_reg_pp0_iter4_j_mid2_reg_388;
                ap_reg_pp0_iter5_tmp_14_reg_457 <= ap_reg_pp0_iter4_tmp_14_reg_457;
                ap_reg_pp0_iter5_tmp_15_reg_462 <= ap_reg_pp0_iter4_tmp_15_reg_462;
                ap_reg_pp0_iter5_tmp_6_reg_427 <= ap_reg_pp0_iter4_tmp_6_reg_427;
                ap_reg_pp0_iter5_tmp_7_reg_432 <= ap_reg_pp0_iter4_tmp_7_reg_432;
                ap_reg_pp0_iter5_tmp_8_reg_437 <= ap_reg_pp0_iter4_tmp_8_reg_437;
                ap_reg_pp0_iter5_tmp_9_reg_442 <= ap_reg_pp0_iter4_tmp_9_reg_442;
                ap_reg_pp0_iter6_exitcond_flatten_reg_379 <= ap_reg_pp0_iter5_exitcond_flatten_reg_379;
                ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter6_j_mid2_reg_388 <= ap_reg_pp0_iter5_j_mid2_reg_388;
                ap_reg_pp0_iter6_tmp_8_reg_437 <= ap_reg_pp0_iter5_tmp_8_reg_437;
                ap_reg_pp0_iter6_tmp_9_reg_442 <= ap_reg_pp0_iter5_tmp_9_reg_442;
                ap_reg_pp0_iter7_exitcond_flatten_reg_379 <= ap_reg_pp0_iter6_exitcond_flatten_reg_379;
                ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter7_j_mid2_reg_388 <= ap_reg_pp0_iter6_j_mid2_reg_388;
                ap_reg_pp0_iter8_exitcond_flatten_reg_379 <= ap_reg_pp0_iter7_exitcond_flatten_reg_379;
                ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter8_j_mid2_reg_388 <= ap_reg_pp0_iter7_j_mid2_reg_388;
                ap_reg_pp0_iter9_exitcond_flatten_reg_379 <= ap_reg_pp0_iter8_exitcond_flatten_reg_379;
                ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter9_j_mid2_reg_388 <= ap_reg_pp0_iter8_j_mid2_reg_388;
                ap_reg_pp0_iter9_tmp1_reg_527 <= tmp1_reg_527;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_379 <= exitcond_flatten_reg_379;
                ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394 <= i_cast6_mid2_v_reg_394;
                ap_reg_pp0_iter1_j_mid2_reg_388 <= j_mid2_reg_388;
                exitcond_flatten_reg_379 <= exitcond_flatten_fu_137_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_0))) then
                i_cast6_mid2_v_reg_394 <= i_cast6_mid2_v_fu_169_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_0))) then
                j_mid2_reg_388 <= j_mid2_fu_161_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter8) and (ap_reg_pp0_iter7_exitcond_flatten_reg_379 = ap_const_lv1_0))) then
                tmp1_reg_527 <= grp_fu_358_p3;
                tmp4_reg_532 <= grp_fu_365_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter9) and (ap_reg_pp0_iter8_exitcond_flatten_reg_379 = ap_const_lv1_0))) then
                tmp2_reg_537 <= grp_fu_372_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter1_exitcond_flatten_reg_379 = ap_const_lv1_0))) then
                tmp_10_reg_447 <= a_q0(31 downto 24);
                tmp_13_reg_452 <= b_q0(31 downto 24);
                tmp_14_reg_457 <= a_q0(39 downto 32);
                tmp_15_reg_462 <= b_q0(39 downto 32);
                tmp_17_reg_417 <= tmp_17_fu_191_p1;
                tmp_18_reg_422 <= tmp_18_fu_195_p1;
                tmp_6_reg_427 <= a_q0(15 downto 8);
                tmp_7_reg_432 <= b_q0(15 downto 8);
                tmp_8_reg_437 <= a_q0(23 downto 16);
                tmp_9_reg_442 <= b_q0(23 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter6_exitcond_flatten_reg_379 = ap_const_lv1_0))) then
                tmp_16_reg_507 <= grp_fu_285_p2;
                tmp_2_3_reg_522 <= grp_fu_297_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_reg_pp0_iter9_exitcond_flatten_reg_379 = ap_const_lv1_0))) then
                tmp_3_4_reg_547 <= tmp_3_4_fu_350_p2;
                tmp_5_reg_542 <= tmp_5_fu_344_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten_fu_137_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011011, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_137_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    a_address0 <= i_cast6_mid2_fu_183_p1(3 - 1 downto 0);

    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(2);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_137_p2)
    begin
        if ((exitcond_flatten_fu_137_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4) and (ap_const_logic_0 = ap_enable_reg_pp0_iter5) and (ap_const_logic_0 = ap_enable_reg_pp0_iter6) and (ap_const_logic_0 = ap_enable_reg_pp0_iter7) and (ap_const_logic_0 = ap_enable_reg_pp0_iter8) and (ap_const_logic_0 = ap_enable_reg_pp0_iter9) and (ap_const_logic_0 = ap_enable_reg_pp0_iter10) and (ap_const_logic_0 = ap_enable_reg_pp0_iter11))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b_address0 <= j_cast5_fu_187_p1(3 - 1 downto 0);

    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_137_p2 <= "1" when (indvar_flatten_reg_104 = ap_const_lv5_19) else "0";
    exitcond_fu_155_p2 <= "1" when (j_reg_126 = ap_const_lv3_5) else "0";
    i_1_fu_149_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_phi_fu_119_p4));
    i_cast6_mid2_cast_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394),6));
    i_cast6_mid2_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast6_mid2_v_reg_394),32));
    i_cast6_mid2_v_fu_169_p3 <= 
        i_1_fu_149_p2 when (exitcond_fu_155_p2(0) = '1') else 
        i_phi_fu_119_p4;

    i_phi_fu_119_p4_assign_proc : process(i_reg_115, exitcond_flatten_reg_379, ap_CS_fsm_pp0_stage0, i_cast6_mid2_v_reg_394, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (exitcond_flatten_reg_379 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_119_p4 <= i_cast6_mid2_v_reg_394;
        else 
            i_phi_fu_119_p4 <= i_reg_115;
        end if; 
    end process;

    indvar_flatten_next_fu_143_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_104) + unsigned(ap_const_lv5_1));
    j_1_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(j_mid2_fu_161_p3));
    j_cast5_cast_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter9_j_mid2_reg_388),6));
    j_cast5_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_388),32));
    j_mid2_fu_161_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_155_p2(0) = '1') else 
        j_reg_126;
    p_shl_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_324_p3),6));
    prod_address0 <= tmp_18_cast_fu_354_p1(5 - 1 downto 0);

    prod_ce0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= tmp_3_4_reg_547;

    prod_we0_assign_proc : process(ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter10_exitcond_flatten_reg_379, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter11) and (ap_reg_pp0_iter10_exitcond_flatten_reg_379 = ap_const_lv1_0))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_17_fu_191_p1 <= a_q0(8 - 1 downto 0);
    tmp_18_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_542),32));
    tmp_18_fu_195_p1 <= b_q0(8 - 1 downto 0);
    tmp_2_fu_335_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_331_p1) + unsigned(i_cast6_mid2_cast_fu_321_p1));
    tmp_3_4_fu_350_p2 <= std_logic_vector(signed(tmp2_reg_537) + signed(ap_reg_pp0_iter9_tmp1_reg_527));
    tmp_5_fu_344_p2 <= std_logic_vector(unsigned(j_cast5_cast_fu_341_p1) + unsigned(tmp_2_fu_335_p2));
    tmp_fu_324_p3 <= (ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394 & ap_const_lv2_0);
end behav;
