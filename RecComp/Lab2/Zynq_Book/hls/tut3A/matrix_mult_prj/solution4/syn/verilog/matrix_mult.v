// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.402000,HLS_SYN_LAT=37,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1112,HLS_SYN_LUT=595}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        b_address0,
        b_ce0,
        b_q0,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state14 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] a_address0;
output   a_ce0;
input  [39:0] a_q0;
output  [2:0] b_address0;
output   b_ce0;
input  [39:0] b_q0;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_ce0;
reg b_ce0;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_104;
reg   [2:0] i_reg_115;
reg   [2:0] j_reg_126;
wire   [0:0] exitcond_flatten_fu_137_p2;
reg   [0:0] exitcond_flatten_reg_379;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_379;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_379;
wire   [4:0] indvar_flatten_next_fu_143_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_161_p3;
reg   [2:0] j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter1_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter2_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter3_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter4_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter5_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter6_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter7_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter8_j_mid2_reg_388;
reg   [2:0] ap_reg_pp0_iter9_j_mid2_reg_388;
wire   [2:0] i_cast6_mid2_v_fu_169_p3;
reg   [2:0] i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394;
reg   [2:0] ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394;
wire   [2:0] j_1_fu_177_p2;
wire   [7:0] tmp_17_fu_191_p1;
reg  signed [7:0] tmp_17_reg_417;
wire   [7:0] tmp_18_fu_195_p1;
reg  signed [7:0] tmp_18_reg_422;
reg   [7:0] tmp_6_reg_427;
reg   [7:0] ap_reg_pp0_iter3_tmp_6_reg_427;
reg   [7:0] ap_reg_pp0_iter4_tmp_6_reg_427;
reg  signed [7:0] ap_reg_pp0_iter5_tmp_6_reg_427;
reg   [7:0] tmp_7_reg_432;
reg   [7:0] ap_reg_pp0_iter3_tmp_7_reg_432;
reg   [7:0] ap_reg_pp0_iter4_tmp_7_reg_432;
reg  signed [7:0] ap_reg_pp0_iter5_tmp_7_reg_432;
reg   [7:0] tmp_8_reg_437;
reg   [7:0] ap_reg_pp0_iter3_tmp_8_reg_437;
reg   [7:0] ap_reg_pp0_iter4_tmp_8_reg_437;
reg   [7:0] ap_reg_pp0_iter5_tmp_8_reg_437;
reg  signed [7:0] ap_reg_pp0_iter6_tmp_8_reg_437;
reg   [7:0] tmp_9_reg_442;
reg   [7:0] ap_reg_pp0_iter3_tmp_9_reg_442;
reg   [7:0] ap_reg_pp0_iter4_tmp_9_reg_442;
reg   [7:0] ap_reg_pp0_iter5_tmp_9_reg_442;
reg  signed [7:0] ap_reg_pp0_iter6_tmp_9_reg_442;
reg  signed [7:0] tmp_10_reg_447;
reg  signed [7:0] tmp_13_reg_452;
reg   [7:0] tmp_14_reg_457;
reg   [7:0] ap_reg_pp0_iter3_tmp_14_reg_457;
reg   [7:0] ap_reg_pp0_iter4_tmp_14_reg_457;
reg  signed [7:0] ap_reg_pp0_iter5_tmp_14_reg_457;
reg   [7:0] tmp_15_reg_462;
reg   [7:0] ap_reg_pp0_iter3_tmp_15_reg_462;
reg   [7:0] ap_reg_pp0_iter4_tmp_15_reg_462;
reg  signed [7:0] ap_reg_pp0_iter5_tmp_15_reg_462;
wire   [15:0] grp_fu_285_p2;
reg   [15:0] tmp_16_reg_507;
wire   [15:0] grp_fu_297_p2;
reg   [15:0] tmp_2_3_reg_522;
wire  signed [15:0] grp_fu_358_p3;
reg  signed [15:0] tmp1_reg_527;
reg    ap_enable_reg_pp0_iter8;
reg  signed [15:0] ap_reg_pp0_iter9_tmp1_reg_527;
wire  signed [15:0] grp_fu_365_p3;
reg  signed [15:0] tmp4_reg_532;
wire  signed [15:0] grp_fu_372_p3;
reg  signed [15:0] tmp2_reg_537;
reg    ap_enable_reg_pp0_iter9;
wire   [5:0] tmp_5_fu_344_p2;
reg   [5:0] tmp_5_reg_542;
(* use_dsp48 = "no" *) wire   [15:0] tmp_3_4_fu_350_p2;
reg   [15:0] tmp_3_4_reg_547;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg   [2:0] i_phi_fu_119_p4;
wire    ap_block_pp0_stage0_flag00000000;
wire   [31:0] i_cast6_mid2_fu_183_p1;
wire   [31:0] j_cast5_fu_187_p1;
wire   [31:0] tmp_18_cast_fu_354_p1;
wire   [0:0] exitcond_fu_155_p2;
wire   [2:0] i_1_fu_149_p2;
wire   [4:0] tmp_fu_324_p3;
wire   [5:0] p_shl_cast_fu_331_p1;
wire   [5:0] i_cast6_mid2_cast_fu_321_p1;
wire   [5:0] j_cast5_cast_fu_341_p1;
wire   [5:0] tmp_2_fu_335_p2;
wire    ap_CS_fsm_state14;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
end

matrix_mult_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
matrix_mult_mul_8bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_reg_422),
    .din1(tmp_17_reg_417),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

matrix_mult_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
matrix_mult_mul_8bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_13_reg_452),
    .din1(tmp_10_reg_447),
    .ce(1'b1),
    .dout(grp_fu_297_p2)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_reg_pp0_iter5_tmp_7_reg_432),
    .din1(ap_reg_pp0_iter5_tmp_6_reg_427),
    .din2(tmp_16_reg_507),
    .ce(1'b1),
    .dout(grp_fu_358_p3)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_reg_pp0_iter5_tmp_15_reg_462),
    .din1(ap_reg_pp0_iter5_tmp_14_reg_457),
    .din2(tmp_2_3_reg_522),
    .ce(1'b1),
    .dout(grp_fu_365_p3)
);

matrix_mult_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(ap_reg_pp0_iter6_tmp_9_reg_442),
    .din1(ap_reg_pp0_iter6_tmp_8_reg_437),
    .din2(tmp4_reg_532),
    .ce(1'b1),
    .dout(grp_fu_372_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter11 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_379 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        i_reg_115 <= i_cast6_mid2_v_reg_394;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_115 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_137_p2 == 1'd0))) begin
        indvar_flatten_reg_104 <= indvar_flatten_next_fu_143_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_104 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_137_p2 == 1'd0))) begin
        j_reg_126 <= j_1_fu_177_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_126 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_block_pp0_stage0_flag00011001 == 1'b0)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_379 <= ap_reg_pp0_iter9_exitcond_flatten_reg_379;
        ap_reg_pp0_iter2_exitcond_flatten_reg_379 <= ap_reg_pp0_iter1_exitcond_flatten_reg_379;
        ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter2_j_mid2_reg_388 <= ap_reg_pp0_iter1_j_mid2_reg_388;
        ap_reg_pp0_iter3_exitcond_flatten_reg_379 <= ap_reg_pp0_iter2_exitcond_flatten_reg_379;
        ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter2_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter3_j_mid2_reg_388 <= ap_reg_pp0_iter2_j_mid2_reg_388;
        ap_reg_pp0_iter3_tmp_14_reg_457 <= tmp_14_reg_457;
        ap_reg_pp0_iter3_tmp_15_reg_462 <= tmp_15_reg_462;
        ap_reg_pp0_iter3_tmp_6_reg_427 <= tmp_6_reg_427;
        ap_reg_pp0_iter3_tmp_7_reg_432 <= tmp_7_reg_432;
        ap_reg_pp0_iter3_tmp_8_reg_437 <= tmp_8_reg_437;
        ap_reg_pp0_iter3_tmp_9_reg_442 <= tmp_9_reg_442;
        ap_reg_pp0_iter4_exitcond_flatten_reg_379 <= ap_reg_pp0_iter3_exitcond_flatten_reg_379;
        ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter3_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter4_j_mid2_reg_388 <= ap_reg_pp0_iter3_j_mid2_reg_388;
        ap_reg_pp0_iter4_tmp_14_reg_457 <= ap_reg_pp0_iter3_tmp_14_reg_457;
        ap_reg_pp0_iter4_tmp_15_reg_462 <= ap_reg_pp0_iter3_tmp_15_reg_462;
        ap_reg_pp0_iter4_tmp_6_reg_427 <= ap_reg_pp0_iter3_tmp_6_reg_427;
        ap_reg_pp0_iter4_tmp_7_reg_432 <= ap_reg_pp0_iter3_tmp_7_reg_432;
        ap_reg_pp0_iter4_tmp_8_reg_437 <= ap_reg_pp0_iter3_tmp_8_reg_437;
        ap_reg_pp0_iter4_tmp_9_reg_442 <= ap_reg_pp0_iter3_tmp_9_reg_442;
        ap_reg_pp0_iter5_exitcond_flatten_reg_379 <= ap_reg_pp0_iter4_exitcond_flatten_reg_379;
        ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter4_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter5_j_mid2_reg_388 <= ap_reg_pp0_iter4_j_mid2_reg_388;
        ap_reg_pp0_iter5_tmp_14_reg_457 <= ap_reg_pp0_iter4_tmp_14_reg_457;
        ap_reg_pp0_iter5_tmp_15_reg_462 <= ap_reg_pp0_iter4_tmp_15_reg_462;
        ap_reg_pp0_iter5_tmp_6_reg_427 <= ap_reg_pp0_iter4_tmp_6_reg_427;
        ap_reg_pp0_iter5_tmp_7_reg_432 <= ap_reg_pp0_iter4_tmp_7_reg_432;
        ap_reg_pp0_iter5_tmp_8_reg_437 <= ap_reg_pp0_iter4_tmp_8_reg_437;
        ap_reg_pp0_iter5_tmp_9_reg_442 <= ap_reg_pp0_iter4_tmp_9_reg_442;
        ap_reg_pp0_iter6_exitcond_flatten_reg_379 <= ap_reg_pp0_iter5_exitcond_flatten_reg_379;
        ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter5_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter6_j_mid2_reg_388 <= ap_reg_pp0_iter5_j_mid2_reg_388;
        ap_reg_pp0_iter6_tmp_8_reg_437 <= ap_reg_pp0_iter5_tmp_8_reg_437;
        ap_reg_pp0_iter6_tmp_9_reg_442 <= ap_reg_pp0_iter5_tmp_9_reg_442;
        ap_reg_pp0_iter7_exitcond_flatten_reg_379 <= ap_reg_pp0_iter6_exitcond_flatten_reg_379;
        ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter6_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter7_j_mid2_reg_388 <= ap_reg_pp0_iter6_j_mid2_reg_388;
        ap_reg_pp0_iter8_exitcond_flatten_reg_379 <= ap_reg_pp0_iter7_exitcond_flatten_reg_379;
        ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter7_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter8_j_mid2_reg_388 <= ap_reg_pp0_iter7_j_mid2_reg_388;
        ap_reg_pp0_iter9_exitcond_flatten_reg_379 <= ap_reg_pp0_iter8_exitcond_flatten_reg_379;
        ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394 <= ap_reg_pp0_iter8_i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter9_j_mid2_reg_388 <= ap_reg_pp0_iter8_j_mid2_reg_388;
        ap_reg_pp0_iter9_tmp1_reg_527 <= tmp1_reg_527;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_379 <= exitcond_flatten_reg_379;
        ap_reg_pp0_iter1_i_cast6_mid2_v_reg_394 <= i_cast6_mid2_v_reg_394;
        ap_reg_pp0_iter1_j_mid2_reg_388 <= j_mid2_reg_388;
        exitcond_flatten_reg_379 <= exitcond_flatten_fu_137_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (exitcond_flatten_fu_137_p2 == 1'd0))) begin
        i_cast6_mid2_v_reg_394 <= i_cast6_mid2_v_fu_169_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_fu_137_p2 == 1'd0))) begin
        j_mid2_reg_388 <= j_mid2_fu_161_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter8) & (ap_reg_pp0_iter7_exitcond_flatten_reg_379 == 1'd0))) begin
        tmp1_reg_527 <= grp_fu_358_p3;
        tmp4_reg_532 <= grp_fu_365_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter9) & (ap_reg_pp0_iter8_exitcond_flatten_reg_379 == 1'd0))) begin
        tmp2_reg_537 <= grp_fu_372_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter1_exitcond_flatten_reg_379 == 1'd0))) begin
        tmp_10_reg_447 <= {{a_q0[31:24]}};
        tmp_13_reg_452 <= {{b_q0[31:24]}};
        tmp_14_reg_457 <= {{a_q0[39:32]}};
        tmp_15_reg_462 <= {{b_q0[39:32]}};
        tmp_17_reg_417 <= tmp_17_fu_191_p1;
        tmp_18_reg_422 <= tmp_18_fu_195_p1;
        tmp_6_reg_427 <= {{a_q0[15:8]}};
        tmp_7_reg_432 <= {{b_q0[15:8]}};
        tmp_8_reg_437 <= {{a_q0[23:16]}};
        tmp_9_reg_442 <= {{b_q0[23:16]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter6_exitcond_flatten_reg_379 == 1'd0))) begin
        tmp_16_reg_507 <= grp_fu_285_p2;
        tmp_2_3_reg_522 <= grp_fu_297_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (ap_reg_pp0_iter9_exitcond_flatten_reg_379 == 1'd0))) begin
        tmp_3_4_reg_547 <= tmp_3_4_fu_350_p2;
        tmp_5_reg_542 <= tmp_5_fu_344_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_137_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4) & (1'b0 == ap_enable_reg_pp0_iter5) & (1'b0 == ap_enable_reg_pp0_iter6) & (1'b0 == ap_enable_reg_pp0_iter7) & (1'b0 == ap_enable_reg_pp0_iter8) & (1'b0 == ap_enable_reg_pp0_iter9) & (1'b0 == ap_enable_reg_pp0_iter10) & (1'b0 == ap_enable_reg_pp0_iter11))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_379 == 1'd0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_119_p4 = i_cast6_mid2_v_reg_394;
    end else begin
        i_phi_fu_119_p4 = i_reg_115;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (ap_reg_pp0_iter10_exitcond_flatten_reg_379 == 1'd0))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (ap_enable_reg_pp0_iter10 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_137_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter11) & (ap_enable_reg_pp0_iter10 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_137_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_address0 = i_cast6_mid2_fu_183_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign b_address0 = j_cast5_fu_187_p1;

assign exitcond_flatten_fu_137_p2 = ((indvar_flatten_reg_104 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_fu_155_p2 = ((j_reg_126 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_149_p2 = (3'd1 + i_phi_fu_119_p4);

assign i_cast6_mid2_cast_fu_321_p1 = ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394;

assign i_cast6_mid2_fu_183_p1 = i_cast6_mid2_v_reg_394;

assign i_cast6_mid2_v_fu_169_p3 = ((exitcond_fu_155_p2[0:0] === 1'b1) ? i_1_fu_149_p2 : i_phi_fu_119_p4);

assign indvar_flatten_next_fu_143_p2 = (indvar_flatten_reg_104 + 5'd1);

assign j_1_fu_177_p2 = (3'd1 + j_mid2_fu_161_p3);

assign j_cast5_cast_fu_341_p1 = ap_reg_pp0_iter9_j_mid2_reg_388;

assign j_cast5_fu_187_p1 = j_mid2_reg_388;

assign j_mid2_fu_161_p3 = ((exitcond_fu_155_p2[0:0] === 1'b1) ? 3'd0 : j_reg_126);

assign p_shl_cast_fu_331_p1 = tmp_fu_324_p3;

assign prod_address0 = tmp_18_cast_fu_354_p1;

assign prod_d0 = tmp_3_4_reg_547;

assign tmp_17_fu_191_p1 = a_q0[7:0];

assign tmp_18_cast_fu_354_p1 = tmp_5_reg_542;

assign tmp_18_fu_195_p1 = b_q0[7:0];

assign tmp_2_fu_335_p2 = (p_shl_cast_fu_331_p1 + i_cast6_mid2_cast_fu_321_p1);

assign tmp_3_4_fu_350_p2 = ($signed(tmp2_reg_537) + $signed(ap_reg_pp0_iter9_tmp1_reg_527));

assign tmp_5_fu_344_p2 = (j_cast5_cast_fu_341_p1 + tmp_2_fu_335_p2);

assign tmp_fu_324_p3 = {{ap_reg_pp0_iter9_i_cast6_mid2_v_reg_394}, {2'd0}};

endmodule //matrix_mult
