

================================================================
== Vivado HLS Report for 'matrix_mult'
================================================================
* Date:           Mon Sep 25 12:35:30 2017

* Version:        2017.2 (Build 1909853 on Wed Aug 09 16:50:22 MDT 2017)
* Project:        matrix_mult_prj
* Solution:       solution3
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |   5.00|      5.42|        0.63|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   88|   88|   89|   89|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |           |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name | min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +-----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Row_Col  |   86|   86|        15|          3|          1|    25|    yes   |
        +-----------+-----+-----+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 3, depth = 15


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 17
* Pipeline: 1
  Pipeline-0: II = 3, D = 15, States = { 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	17  / (exitcond_flatten)
	3  / (!exitcond_flatten)
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	2  / true
17 --> 
* FSM state operations: 

 <State 1>: 1.59ns
ST_1: StgValue_18 (4)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap([25 x i8]* %a) nounwind, !map !7

ST_1: StgValue_19 (5)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([25 x i8]* %b) nounwind, !map !13

ST_1: StgValue_20 (6)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap([25 x i16]* %prod) nounwind, !map !17

ST_1: StgValue_21 (7)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecTopModule([12 x i8]* @matrix_mult_str) nounwind

ST_1: StgValue_22 (8)  [1/1] 1.59ns  loc: matrix_mult.cpp:10
:4  br label %1


 <State 2>: 4.33ns
ST_2: indvar_flatten (10)  [1/1] 0.00ns
:0  %indvar_flatten = phi i5 [ 0, %0 ], [ %indvar_flatten_next, %.reset ]

ST_2: i (11)  [1/1] 0.00ns  loc: matrix_mult.cpp:10
:1  %i = phi i3 [ 0, %0 ], [ %i_cast6_mid2_v, %.reset ]

ST_2: j (12)  [1/1] 0.00ns
:2  %j = phi i3 [ 0, %0 ], [ %j_1, %.reset ]

ST_2: exitcond_flatten (13)  [1/1] 3.31ns
:3  %exitcond_flatten = icmp eq i5 %indvar_flatten, -7

ST_2: indvar_flatten_next (14)  [1/1] 2.33ns
:4  %indvar_flatten_next = add i5 %indvar_flatten, 1

ST_2: StgValue_28 (15)  [1/1] 0.00ns
:5  br i1 %exitcond_flatten, label %2, label %.reset

ST_2: i_1 (17)  [1/1] 2.26ns  loc: matrix_mult.cpp:10
.reset:0  %i_1 = add i3 %i, 1

ST_2: exitcond (20)  [1/1] 2.07ns  loc: matrix_mult.cpp:12
.reset:3  %exitcond = icmp eq i3 %j, -3

ST_2: j_mid2 (21)  [1/1] 2.07ns  loc: matrix_mult.cpp:12
.reset:4  %j_mid2 = select i1 %exitcond, i3 0, i3 %j

ST_2: i_cast6_mid2_v (22)  [1/1] 2.07ns  loc: matrix_mult.cpp:10
.reset:5  %i_cast6_mid2_v = select i1 %exitcond, i3 %i_1, i3 %i


 <State 3>: 2.35ns
ST_3: i_cast6_mid2_cast (23)  [1/1] 0.00ns  loc: matrix_mult.cpp:10
.reset:6  %i_cast6_mid2_cast = zext i3 %i_cast6_mid2_v to i6

ST_3: tmp (24)  [1/1] 0.00ns  loc: matrix_mult.cpp:10
.reset:7  %tmp = call i5 @_ssdm_op_BitConcatenate.i5.i3.i2(i3 %i_cast6_mid2_v, i2 0)

ST_3: p_shl_cast (25)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:8  %p_shl_cast = zext i5 %tmp to i6

ST_3: tmp_7 (26)  [1/1] 2.33ns  loc: matrix_mult.cpp:16
.reset:9  %tmp_7 = add i6 %i_cast6_mid2_cast, %p_shl_cast

ST_3: j_cast5_cast3 (43)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:26  %j_cast5_cast3 = zext i3 %j_mid2 to i5

ST_3: j_cast5_cast (44)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:27  %j_cast5_cast = zext i3 %j_mid2 to i4

ST_3: tmp_12 (46)  [1/1] 2.35ns  loc: matrix_mult.cpp:16
.reset:29  %tmp_12 = add i4 %j_cast5_cast, 5

ST_3: tmp_15 (55)  [1/1] 2.33ns  loc: matrix_mult.cpp:16
.reset:38  %tmp_15 = add i5 %j_cast5_cast3, -12


 <State 4>: 2.32ns
ST_4: tmp_8 (29)  [1/1] 2.31ns  loc: matrix_mult.cpp:16
.reset:12  %tmp_8 = add i6 %tmp_7, 1

ST_4: tmp_11 (38)  [1/1] 2.31ns  loc: matrix_mult.cpp:16
.reset:21  %tmp_11 = add i6 %tmp_7, 4

ST_4: tmp_12_cast (47)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:30  %tmp_12_cast = zext i4 %tmp_12 to i32

ST_4: b_addr_1 (48)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:31  %b_addr_1 = getelementptr [25 x i8]* %b, i32 0, i32 %tmp_12_cast

ST_4: tmp_15_cast (56)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:39  %tmp_15_cast = zext i5 %tmp_15 to i32

ST_4: b_addr_4 (57)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:40  %b_addr_4 = getelementptr [25 x i8]* %b, i32 0, i32 %tmp_15_cast

ST_4: b_load_1 (71)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:54  %b_load_1 = load i8* %b_addr_1, align 1

ST_4: b_load_4 (86)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:69  %b_load_4 = load i8* %b_addr_4, align 1

ST_4: j_1 (95)  [1/1] 2.26ns  loc: matrix_mult.cpp:12
.reset:78  %j_1 = add i3 %j_mid2, 1


 <State 5>: 2.32ns
ST_5: tmp_8_cast (30)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:13  %tmp_8_cast = zext i6 %tmp_8 to i32

ST_5: a_addr_1 (31)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:14  %a_addr_1 = getelementptr [25 x i8]* %a, i32 0, i32 %tmp_8_cast

ST_5: tmp_11_cast (39)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:22  %tmp_11_cast = sext i6 %tmp_11 to i32

ST_5: a_addr_4 (40)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:23  %a_addr_4 = getelementptr [25 x i8]* %a, i32 0, i32 %tmp_11_cast

ST_5: a_load_1 (69)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:52  %a_load_1 = load i8* %a_addr_1, align 1

ST_5: b_load_1 (71)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:54  %b_load_1 = load i8* %b_addr_1, align 1

ST_5: a_load_4 (84)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:67  %a_load_4 = load i8* %a_addr_4, align 1

ST_5: b_load_4 (86)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:69  %b_load_4 = load i8* %b_addr_4, align 1


 <State 6>: 2.32ns
ST_6: a_load_1 (69)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:52  %a_load_1 = load i8* %a_addr_1, align 1

ST_6: a_load_4 (84)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:67  %a_load_4 = load i8* %a_addr_4, align 1


 <State 7>: 5.42ns
ST_7: tmp_14 (52)  [1/1] 2.33ns  loc: matrix_mult.cpp:16
.reset:35  %tmp_14 = add i5 %j_cast5_cast3, 15

ST_7: tmp_4 (85)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:68  %tmp_4 = sext i8 %a_load_4 to i16

ST_7: tmp_1_4 (87)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:70  %tmp_1_4 = sext i8 %b_load_4 to i16

ST_7: tmp_2_4 (88)  [5/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:71  %tmp_2_4 = mul i16 %tmp_4, %tmp_1_4


 <State 8>: 5.42ns
ST_8: tmp_9 (32)  [1/1] 2.31ns  loc: matrix_mult.cpp:16
.reset:15  %tmp_9 = add i6 %tmp_7, 2

ST_8: tmp_10 (35)  [1/1] 2.31ns  loc: matrix_mult.cpp:16
.reset:18  %tmp_10 = add i6 %tmp_7, 3

ST_8: tmp_14_cast (53)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:36  %tmp_14_cast = zext i5 %tmp_14 to i32

ST_8: b_addr_3 (54)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:37  %b_addr_3 = getelementptr [25 x i8]* %b, i32 0, i32 %tmp_14_cast

ST_8: tmp_s (70)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:53  %tmp_s = sext i8 %a_load_1 to i16

ST_8: tmp_1_1 (72)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:55  %tmp_1_1 = sext i8 %b_load_1 to i16

ST_8: tmp_2_1 (73)  [5/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:56  %tmp_2_1 = mul i16 %tmp_s, %tmp_1_1

ST_8: b_load_3 (81)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:64  %b_load_3 = load i8* %b_addr_3, align 1

ST_8: tmp_2_4 (88)  [4/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:71  %tmp_2_4 = mul i16 %tmp_4, %tmp_1_4


 <State 9>: 5.42ns
ST_9: tmp_9_cast (33)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:16  %tmp_9_cast = sext i6 %tmp_9 to i32

ST_9: a_addr_2 (34)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:17  %a_addr_2 = getelementptr [25 x i8]* %a, i32 0, i32 %tmp_9_cast

ST_9: tmp_10_cast (36)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:19  %tmp_10_cast = sext i6 %tmp_10 to i32

ST_9: a_addr_3 (37)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:20  %a_addr_3 = getelementptr [25 x i8]* %a, i32 0, i32 %tmp_10_cast

ST_9: j_cast5 (41)  [1/1] 0.00ns  loc: matrix_mult.cpp:12
.reset:24  %j_cast5 = zext i3 %j_mid2 to i32

ST_9: b_addr (45)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:28  %b_addr = getelementptr [25 x i8]* %b, i32 0, i32 %j_cast5

ST_9: b_load (66)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:49  %b_load = load i8* %b_addr, align 1

ST_9: tmp_2_1 (73)  [4/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:56  %tmp_2_1 = mul i16 %tmp_s, %tmp_1_1

ST_9: a_load_2 (74)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:57  %a_load_2 = load i8* %a_addr_2, align 1

ST_9: a_load_3 (79)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:62  %a_load_3 = load i8* %a_addr_3, align 1

ST_9: b_load_3 (81)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:64  %b_load_3 = load i8* %b_addr_3, align 1

ST_9: tmp_2_4 (88)  [3/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:71  %tmp_2_4 = mul i16 %tmp_4, %tmp_1_4


 <State 10>: 5.42ns
ST_10: tmp_7_cast (27)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:10  %tmp_7_cast = zext i6 %tmp_7 to i32

ST_10: a_addr (28)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:11  %a_addr = getelementptr [25 x i8]* %a, i32 0, i32 %tmp_7_cast

ST_10: j_cast5_cast4 (42)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:25  %j_cast5_cast4 = zext i3 %j_mid2 to i6

ST_10: tmp_13 (49)  [1/1] 2.33ns  loc: matrix_mult.cpp:16
.reset:32  %tmp_13 = add i5 %j_cast5_cast3, 10

ST_10: tmp_16 (58)  [1/1] 2.31ns  loc: matrix_mult.cpp:13
.reset:41  %tmp_16 = add i6 %tmp_7, %j_cast5_cast4

ST_10: a_load (64)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:47  %a_load = load i8* %a_addr, align 1

ST_10: b_load (66)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:49  %b_load = load i8* %b_addr, align 1

ST_10: tmp_2_1 (73)  [3/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:56  %tmp_2_1 = mul i16 %tmp_s, %tmp_1_1

ST_10: a_load_2 (74)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:57  %a_load_2 = load i8* %a_addr_2, align 1

ST_10: a_load_3 (79)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:62  %a_load_3 = load i8* %a_addr_3, align 1

ST_10: tmp_5 (80)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:63  %tmp_5 = sext i8 %a_load_3 to i16

ST_10: tmp_1_3 (82)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:65  %tmp_1_3 = sext i8 %b_load_3 to i16

ST_10: tmp_2_3 (83)  [3/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:66  %tmp_2_3 = mul i16 %tmp_5, %tmp_1_3

ST_10: tmp_2_4 (88)  [2/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:71  %tmp_2_4 = mul i16 %tmp_4, %tmp_1_4


 <State 11>: 5.42ns
ST_11: tmp_13_cast (50)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:33  %tmp_13_cast = zext i5 %tmp_13 to i32

ST_11: b_addr_2 (51)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:34  %b_addr_2 = getelementptr [25 x i8]* %b, i32 0, i32 %tmp_13_cast

ST_11: a_load (64)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:47  %a_load = load i8* %a_addr, align 1

ST_11: tmp2 (65)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:48  %tmp2 = sext i8 %a_load to i16

ST_11: tmp_6 (67)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:50  %tmp_6 = sext i8 %b_load to i16

ST_11: tmp_2 (68)  [3/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:51  %tmp_2 = mul i16 %tmp2, %tmp_6

ST_11: tmp_2_1 (73)  [2/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:56  %tmp_2_1 = mul i16 %tmp_s, %tmp_1_1

ST_11: b_load_2 (76)  [2/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:59  %b_load_2 = load i8* %b_addr_2, align 1

ST_11: tmp_2_3 (83)  [2/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:66  %tmp_2_3 = mul i16 %tmp_5, %tmp_1_3

ST_11: tmp_2_4 (88)  [1/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:71  %tmp_2_4 = mul i16 %tmp_4, %tmp_1_4


 <State 12>: 5.42ns
ST_12: tmp_2 (68)  [2/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:51  %tmp_2 = mul i16 %tmp2, %tmp_6

ST_12: tmp_2_1 (73)  [1/5] 5.42ns  loc: matrix_mult.cpp:16
.reset:56  %tmp_2_1 = mul i16 %tmp_s, %tmp_1_1

ST_12: tmp_3 (75)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:58  %tmp_3 = sext i8 %a_load_2 to i16

ST_12: b_load_2 (76)  [1/2] 2.32ns  loc: matrix_mult.cpp:16
.reset:59  %b_load_2 = load i8* %b_addr_2, align 1

ST_12: tmp_1_2 (77)  [1/1] 0.00ns  loc: matrix_mult.cpp:16
.reset:60  %tmp_1_2 = sext i8 %b_load_2 to i16

ST_12: tmp_2_2 (78)  [3/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:61  %tmp_2_2 = mul i16 %tmp_3, %tmp_1_2

ST_12: tmp_2_3 (83)  [1/3] 0.00ns  loc: matrix_mult.cpp:16
.reset:66  %tmp_2_3 = mul i16 %tmp_5, %tmp_1_3

ST_12: tmp4 (90)  [1/1] 3.02ns  loc: matrix_mult.cpp:16
.reset:73  %tmp4 = add i16 %tmp_2_4, %tmp_2_3


 <State 13>: 3.02ns
ST_13: tmp_2 (68)  [1/3] 0.00ns  loc: matrix_mult.cpp:16
.reset:51  %tmp_2 = mul i16 %tmp2, %tmp_6

ST_13: tmp_2_2 (78)  [2/3] 1.05ns  loc: matrix_mult.cpp:16
.reset:61  %tmp_2_2 = mul i16 %tmp_3, %tmp_1_2

ST_13: tmp1 (89)  [1/1] 3.02ns  loc: matrix_mult.cpp:16
.reset:72  %tmp1 = add i16 %tmp_2_1, %tmp_2


 <State 14>: 3.02ns
ST_14: tmp_2_2 (78)  [1/3] 0.00ns  loc: matrix_mult.cpp:16
.reset:61  %tmp_2_2 = mul i16 %tmp_3, %tmp_1_2

ST_14: tmp3 (91)  [1/1] 3.02ns  loc: matrix_mult.cpp:16
.reset:74  %tmp3 = add i16 %tmp_2_2, %tmp4


 <State 15>: 2.39ns
ST_15: tmp_3_4 (92)  [1/1] 2.39ns  loc: matrix_mult.cpp:16
.reset:75  %tmp_3_4 = add i16 %tmp1, %tmp3


 <State 16>: 2.32ns
ST_16: StgValue_123 (18)  [1/1] 0.00ns
.reset:1  call void (...)* @_ssdm_op_SpecLoopName([8 x i8]* @Row_Col_str)

ST_16: empty (19)  [1/1] 0.00ns
.reset:2  %empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 25, i64 25, i64 25) nounwind

ST_16: tmp_16_cast (59)  [1/1] 0.00ns  loc: matrix_mult.cpp:13
.reset:42  %tmp_16_cast = zext i6 %tmp_16 to i32

ST_16: prod_addr (60)  [1/1] 0.00ns  loc: matrix_mult.cpp:13
.reset:43  %prod_addr = getelementptr [25 x i16]* %prod, i32 0, i32 %tmp_16_cast

ST_16: StgValue_127 (61)  [1/1] 0.00ns  loc: matrix_mult.cpp:12
.reset:44  call void (...)* @_ssdm_op_SpecLoopName([4 x i8]* @p_str1) nounwind

ST_16: tmp_1 (62)  [1/1] 0.00ns  loc: matrix_mult.cpp:12
.reset:45  %tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([4 x i8]* @p_str1) nounwind

ST_16: StgValue_129 (63)  [1/1] 0.00ns  loc: matrix_mult.cpp:13
.reset:46  call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str2) nounwind

ST_16: StgValue_130 (93)  [1/1] 2.32ns  loc: matrix_mult.cpp:16
.reset:76  store i16 %tmp_3_4, i16* %prod_addr, align 2

ST_16: empty_2 (94)  [1/1] 0.00ns  loc: matrix_mult.cpp:18
.reset:77  %empty_2 = call i32 (...)* @_ssdm_op_SpecRegionEnd([4 x i8]* @p_str1, i32 %tmp_1) nounwind

ST_16: StgValue_132 (96)  [1/1] 0.00ns
.reset:79  br label %1


 <State 17>: 0.00ns
ST_17: StgValue_133 (98)  [1/1] 0.00ns  loc: matrix_mult.cpp:21
:0  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 5ns, clock uncertainty: 0.625ns.

 <State 1>: 1.59ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('indvar_flatten') with incoming values : ('indvar_flatten_next') [10]  (1.59 ns)

 <State 2>: 4.33ns
The critical path consists of the following:
	'phi' operation ('i', matrix_mult.cpp:10) with incoming values : ('i_cast6_mid2_v', matrix_mult.cpp:10) [11]  (0 ns)
	'add' operation ('i', matrix_mult.cpp:10) [17]  (2.26 ns)
	'select' operation ('i_cast6_mid2_v', matrix_mult.cpp:10) [22]  (2.07 ns)

 <State 3>: 2.35ns
The critical path consists of the following:
	'add' operation ('tmp_12', matrix_mult.cpp:16) [46]  (2.35 ns)

 <State 4>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('b_addr_1', matrix_mult.cpp:16) [48]  (0 ns)
	'load' operation ('b_load_1', matrix_mult.cpp:16) on array 'b' [71]  (2.32 ns)

 <State 5>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('a_addr_1', matrix_mult.cpp:16) [31]  (0 ns)
	'load' operation ('a_load_1', matrix_mult.cpp:16) on array 'a' [69]  (2.32 ns)

 <State 6>: 2.32ns
The critical path consists of the following:
	'load' operation ('a_load_1', matrix_mult.cpp:16) on array 'a' [69]  (2.32 ns)

 <State 7>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_4', matrix_mult.cpp:16) [88]  (5.42 ns)

 <State 8>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_1', matrix_mult.cpp:16) [73]  (5.42 ns)

 <State 9>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_1', matrix_mult.cpp:16) [73]  (5.42 ns)

 <State 10>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_1', matrix_mult.cpp:16) [73]  (5.42 ns)

 <State 11>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_1', matrix_mult.cpp:16) [73]  (5.42 ns)

 <State 12>: 5.42ns
The critical path consists of the following:
	'mul' operation ('tmp_2_1', matrix_mult.cpp:16) [73]  (5.42 ns)

 <State 13>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_2', matrix_mult.cpp:16) [68]  (0 ns)
	'add' operation ('tmp1', matrix_mult.cpp:16) [89]  (3.02 ns)

 <State 14>: 3.02ns
The critical path consists of the following:
	'mul' operation ('tmp_2_2', matrix_mult.cpp:16) [78]  (0 ns)
	'add' operation ('tmp3', matrix_mult.cpp:16) [91]  (3.02 ns)

 <State 15>: 2.39ns
The critical path consists of the following:
	'add' operation ('tmp_3_4', matrix_mult.cpp:16) [92]  (2.39 ns)

 <State 16>: 2.32ns
The critical path consists of the following:
	'getelementptr' operation ('prod_addr', matrix_mult.cpp:13) [60]  (0 ns)
	'store' operation (matrix_mult.cpp:16) of variable 'tmp_3_4', matrix_mult.cpp:16 on array 'prod' [93]  (2.32 ns)

 <State 17>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
