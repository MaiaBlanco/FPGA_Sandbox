-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_mult is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce0 : OUT STD_LOGIC;
    a_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    a_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    a_ce1 : OUT STD_LOGIC;
    a_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    b_ce0 : OUT STD_LOGIC;
    b_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    b_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    b_ce1 : OUT STD_LOGIC;
    b_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    prod_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    prod_ce0 : OUT STD_LOGIC;
    prod_we0 : OUT STD_LOGIC;
    prod_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of matrix_mult is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matrix_mult,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.415000,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1012,HLS_SYN_LUT=635}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_172 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_183 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_194 : STD_LOGIC_VECTOR (2 downto 0);
    signal reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_209 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_453 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_next_reg_457 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal j_mid2_fu_238_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_mid2_reg_462 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter1_j_mid2_reg_462 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_pp0_iter2_j_mid2_reg_462 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast6_mid2_v_fu_246_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_cast6_mid2_v_reg_471 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_fu_268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_reg_478 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter1_tmp_7_reg_478 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter2_tmp_7_reg_478 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast5_cast3_fu_274_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_cast5_cast3_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter1_j_cast5_cast3_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_reg_pp0_iter2_j_cast5_cast3_reg_488 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_15_fu_286_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_15_reg_499 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_292_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_reg_504 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_297_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_reg_509 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_fu_310_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_524 : STD_LOGIC_VECTOR (2 downto 0);
    signal b_load_1_reg_539 : STD_LOGIC_VECTOR (7 downto 0);
    signal a_load_1_reg_544 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_323_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_14_reg_549 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_342_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_reg_564 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_fu_347_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_10_reg_569 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_load_3_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_387_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_reg_614 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_392_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_16_reg_619 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_reg_pp0_iter3_tmp_16_reg_619 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_336_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_4_reg_649 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_362_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_1_reg_654 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp4_reg_669 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal grp_fu_439_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_reg_674 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_446_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp3_reg_679 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal tmp_3_4_fu_424_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_3_4_fu_424_p2 : signal is "no";
    signal tmp_3_4_reg_684 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_flag00011011 : BOOLEAN;
    signal indvar_flatten_phi_fu_176_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal i_phi_fu_187_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_phi_fu_198_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_cast_fu_302_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_flag00000000 : BOOLEAN;
    signal tmp_15_cast_fu_306_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_cast_fu_319_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_cast_fu_352_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_10_cast_fu_372_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast5_fu_376_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_cast_fu_380_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_cast_fu_404_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_cast_fu_428_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_226_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_257_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_cast6_mid2_cast_fu_254_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_cast5_cast_fu_277_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_cast5_cast4_fu_384_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matrix_mult_mul_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_mac_mcud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component matrix_mult_mac_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    matrix_mult_mul_8bkb_U0 : component matrix_mult_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_209,
        din1 => reg_205,
        ce => ap_const_logic_1,
        dout => grp_fu_336_p2);

    matrix_mult_mul_8bkb_U1 : component matrix_mult_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_load_1_reg_544,
        din1 => b_load_1_reg_539,
        ce => ap_const_logic_1,
        dout => grp_fu_362_p2);

    matrix_mult_mac_mcud_U2 : component matrix_mult_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_q1,
        din1 => b_load_3_reg_604,
        din2 => tmp_2_4_reg_649,
        ce => ap_const_logic_1,
        dout => grp_fu_432_p3);

    matrix_mult_mac_mcud_U3 : component matrix_mult_mac_mcud
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => a_q0,
        din1 => reg_205,
        din2 => tmp_2_1_reg_654,
        ce => ap_const_logic_1,
        dout => grp_fu_439_p3);

    matrix_mult_mac_mdEe_U4 : component matrix_mult_mac_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_209,
        din1 => b_q1,
        din2 => tmp4_reg_669,
        ce => ap_const_logic_1,
        dout => grp_fu_446_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then 
                i_reg_183 <= i_cast6_mid2_v_reg_471;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_183 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then 
                indvar_flatten_reg_172 <= indvar_flatten_next_reg_457;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_172 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then 
                j_reg_194 <= j_1_reg_524;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_194 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_453))) then 
                reg_209 <= a_q0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_453))) then 
                reg_209 <= a_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_453))) then
                a_load_1_reg_544 <= a_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_453 <= exitcond_flatten_reg_453;
                ap_reg_pp0_iter1_j_mid2_reg_462 <= j_mid2_reg_462;
                ap_reg_pp0_iter2_exitcond_flatten_reg_453 <= ap_reg_pp0_iter1_exitcond_flatten_reg_453;
                ap_reg_pp0_iter2_j_mid2_reg_462 <= ap_reg_pp0_iter1_j_mid2_reg_462;
                ap_reg_pp0_iter3_exitcond_flatten_reg_453 <= ap_reg_pp0_iter2_exitcond_flatten_reg_453;
                ap_reg_pp0_iter4_exitcond_flatten_reg_453 <= ap_reg_pp0_iter3_exitcond_flatten_reg_453;
                exitcond_flatten_reg_453 <= exitcond_flatten_fu_214_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                    ap_reg_pp0_iter1_j_cast5_cast3_reg_488(2 downto 0) <= j_cast5_cast3_reg_488(2 downto 0);
                ap_reg_pp0_iter1_tmp_7_reg_478 <= tmp_7_reg_478;
                    ap_reg_pp0_iter2_j_cast5_cast3_reg_488(2 downto 0) <= ap_reg_pp0_iter1_j_cast5_cast3_reg_488(2 downto 0);
                ap_reg_pp0_iter2_tmp_7_reg_478 <= ap_reg_pp0_iter1_tmp_7_reg_478;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter3_tmp_16_reg_619 <= tmp_16_reg_619;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_453 = ap_const_lv1_0))) then
                b_load_1_reg_539 <= b_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_453) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                b_load_3_reg_604 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_214_p2))) then
                i_cast6_mid2_v_reg_471 <= i_cast6_mid2_v_fu_246_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_457 <= indvar_flatten_next_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                j_1_reg_524 <= j_1_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                    j_cast5_cast3_reg_488(2 downto 0) <= j_cast5_cast3_fu_274_p1(2 downto 0);
                tmp_12_reg_494 <= tmp_12_fu_280_p2;
                tmp_15_reg_499 <= tmp_15_fu_286_p2;
                tmp_7_reg_478 <= tmp_7_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_214_p2))) then
                j_mid2_reg_462 <= j_mid2_fu_238_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_453 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_453)))) then
                reg_205 <= b_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_453) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                tmp1_reg_674 <= grp_fu_439_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_453) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then
                tmp3_reg_679 <= grp_fu_446_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_453) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3))) then
                tmp4_reg_669 <= grp_fu_432_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_453))) then
                tmp_10_reg_569 <= tmp_10_fu_347_p2;
                tmp_9_reg_564 <= tmp_9_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0))) then
                tmp_11_reg_509 <= tmp_11_fu_297_p2;
                tmp_8_reg_504 <= tmp_8_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_453))) then
                tmp_13_reg_614 <= tmp_13_fu_387_p2;
                tmp_16_reg_619 <= tmp_16_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_453))) then
                tmp_14_reg_549 <= tmp_14_fu_323_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter3_exitcond_flatten_reg_453))) then
                tmp_2_1_reg_654 <= grp_fu_362_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_453))) then
                tmp_2_4_reg_649 <= grp_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_453))) then
                tmp_3_4_reg_684 <= tmp_3_4_fu_424_p2;
            end if;
        end if;
    end process;
    j_cast5_cast3_reg_488(4 downto 3) <= "00";
    ap_reg_pp0_iter1_j_cast5_cast3_reg_488(4 downto 3) <= "00";
    ap_reg_pp0_iter2_j_cast5_cast3_reg_488(4 downto 3) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, exitcond_flatten_fu_214_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage2_flag00011011, ap_block_pp0_stage1_flag00011011)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_214_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if (((ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_block_pp0_stage2_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    a_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage2_flag00000000, tmp_8_cast_fu_315_p1, tmp_9_cast_fu_368_p1, ap_block_pp0_stage1_flag00000000, tmp_7_cast_fu_380_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            a_address0 <= tmp_7_cast_fu_380_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            a_address0 <= tmp_9_cast_fu_368_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            a_address0 <= tmp_8_cast_fu_315_p1(5 - 1 downto 0);
        else 
            a_address0 <= "XXXXX";
        end if; 
    end process;


    a_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_flag00000000, tmp_11_cast_fu_319_p1, ap_block_pp0_stage1_flag00000000, tmp_10_cast_fu_372_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            a_address1 <= tmp_10_cast_fu_372_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            a_address1 <= tmp_11_cast_fu_319_p1(5 - 1 downto 0);
        else 
            a_address1 <= "XXXXX";
        end if; 
    end process;


    a_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            a_ce0 <= ap_const_logic_1;
        else 
            a_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)))) then 
            a_ce1 <= ap_const_logic_1;
        else 
            a_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(4);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_214_p2)
    begin
        if ((exitcond_flatten_fu_214_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2) and (ap_const_logic_0 = ap_enable_reg_pp0_iter3) and (ap_const_logic_0 = ap_enable_reg_pp0_iter4))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    b_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00000000, ap_block_pp0_stage2_flag00000000, tmp_15_cast_fu_306_p1, tmp_14_cast_fu_352_p1, ap_block_pp0_stage1_flag00000000, j_cast5_fu_376_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            b_address0 <= j_cast5_fu_376_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            b_address0 <= tmp_14_cast_fu_352_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            b_address0 <= tmp_15_cast_fu_306_p1(5 - 1 downto 0);
        else 
            b_address0 <= "XXXXX";
        end if; 
    end process;


    b_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_flag00000000, tmp_12_cast_fu_302_p1, ap_block_pp0_stage2_flag00000000, tmp_13_cast_fu_404_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            b_address1 <= tmp_13_cast_fu_404_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage2_flag00000000 = ap_const_boolean_0))) then 
            b_address1 <= tmp_12_cast_fu_302_p1(5 - 1 downto 0);
        else 
            b_address1 <= "XXXXX";
        end if; 
    end process;


    b_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)))) then 
            b_ce0 <= ap_const_logic_1;
        else 
            b_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    b_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter3)))) then 
            b_ce1 <= ap_const_logic_1;
        else 
            b_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_214_p2 <= "1" when (indvar_flatten_phi_fu_176_p4 = ap_const_lv5_19) else "0";
    exitcond_fu_232_p2 <= "1" when (j_phi_fu_198_p4 = ap_const_lv3_5) else "0";
    i_1_fu_226_p2 <= std_logic_vector(unsigned(i_phi_fu_187_p4) + unsigned(ap_const_lv3_1));
    i_cast6_mid2_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_cast6_mid2_v_reg_471),6));
    i_cast6_mid2_v_fu_246_p3 <= 
        i_1_fu_226_p2 when (exitcond_fu_232_p2(0) = '1') else 
        i_phi_fu_187_p4;

    i_phi_fu_187_p4_assign_proc : process(i_reg_183, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_453, i_cast6_mid2_v_reg_471, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            i_phi_fu_187_p4 <= i_cast6_mid2_v_reg_471;
        else 
            i_phi_fu_187_p4 <= i_reg_183;
        end if; 
    end process;

    indvar_flatten_next_fu_220_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_176_p4) + unsigned(ap_const_lv5_1));

    indvar_flatten_phi_fu_176_p4_assign_proc : process(indvar_flatten_reg_172, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_453, indvar_flatten_next_reg_457, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_176_p4 <= indvar_flatten_next_reg_457;
        else 
            indvar_flatten_phi_fu_176_p4 <= indvar_flatten_reg_172;
        end if; 
    end process;

    j_1_fu_310_p2 <= std_logic_vector(unsigned(j_mid2_reg_462) + unsigned(ap_const_lv3_1));
    j_cast5_cast3_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_462),5));
    j_cast5_cast4_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_j_mid2_reg_462),6));
    j_cast5_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_mid2_reg_462),4));
    j_cast5_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_j_mid2_reg_462),32));
    j_mid2_fu_238_p3 <= 
        ap_const_lv3_0 when (exitcond_fu_232_p2(0) = '1') else 
        j_phi_fu_198_p4;

    j_phi_fu_198_p4_assign_proc : process(j_reg_194, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_453, j_1_reg_524, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_453 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            j_phi_fu_198_p4 <= j_1_reg_524;
        else 
            j_phi_fu_198_p4 <= j_reg_194;
        end if; 
    end process;

    p_shl_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_257_p3),6));
    prod_address0 <= tmp_16_cast_fu_428_p1(5 - 1 downto 0);

    prod_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4))) then 
            prod_ce0 <= ap_const_logic_1;
        else 
            prod_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prod_d0 <= tmp_3_4_reg_684;

    prod_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_flag00011001, ap_reg_pp0_iter4_exitcond_flatten_reg_453, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_block_pp0_stage2_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter4) and (ap_const_lv1_0 = ap_reg_pp0_iter4_exitcond_flatten_reg_453))) then 
            prod_we0 <= ap_const_logic_1;
        else 
            prod_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_10_cast_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_10_reg_569),32));

    tmp_10_fu_347_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_tmp_7_reg_478) + unsigned(ap_const_lv6_3));
        tmp_11_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_11_reg_509),32));

    tmp_11_fu_297_p2 <= std_logic_vector(unsigned(tmp_7_reg_478) + unsigned(ap_const_lv6_4));
    tmp_12_cast_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_reg_494),32));
    tmp_12_fu_280_p2 <= std_logic_vector(unsigned(j_cast5_cast_fu_277_p1) + unsigned(ap_const_lv4_5));
    tmp_13_cast_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_614),32));
    tmp_13_fu_387_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter2_j_cast5_cast3_reg_488) + unsigned(ap_const_lv5_A));
    tmp_14_cast_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_549),32));
    tmp_14_fu_323_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_j_cast5_cast3_reg_488) + unsigned(ap_const_lv5_F));
    tmp_15_cast_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_reg_499),32));
    tmp_15_fu_286_p2 <= std_logic_vector(unsigned(j_cast5_cast3_fu_274_p1) + unsigned(ap_const_lv5_14));
    tmp_16_cast_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter3_tmp_16_reg_619),32));
    tmp_16_fu_392_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter2_tmp_7_reg_478) + unsigned(j_cast5_cast4_fu_384_p1));
    tmp_3_4_fu_424_p2 <= std_logic_vector(signed(tmp1_reg_674) + signed(tmp3_reg_679));
    tmp_7_cast_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter2_tmp_7_reg_478),32));
    tmp_7_fu_268_p2 <= std_logic_vector(unsigned(i_cast6_mid2_cast_fu_254_p1) + unsigned(p_shl_cast_fu_264_p1));
    tmp_8_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_504),32));
    tmp_8_fu_292_p2 <= std_logic_vector(unsigned(tmp_7_reg_478) + unsigned(ap_const_lv6_1));
        tmp_9_cast_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_9_reg_564),32));

    tmp_9_fu_342_p2 <= std_logic_vector(unsigned(ap_reg_pp0_iter1_tmp_7_reg_478) + unsigned(ap_const_lv6_2));
    tmp_fu_257_p3 <= (i_cast6_mid2_v_reg_471 & ap_const_lv2_0);
end behav;
