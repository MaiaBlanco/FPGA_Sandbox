// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matrix_mult,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.415000,HLS_SYN_LAT=88,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=1012,HLS_SYN_LUT=635}" *)

module matrix_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_address0,
        a_ce0,
        a_q0,
        a_address1,
        a_ce1,
        a_q1,
        b_address0,
        b_ce0,
        b_q0,
        b_address1,
        b_ce1,
        b_q1,
        prod_address0,
        prod_ce0,
        prod_we0,
        prod_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state17 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] a_address0;
output   a_ce0;
input  [7:0] a_q0;
output  [4:0] a_address1;
output   a_ce1;
input  [7:0] a_q1;
output  [4:0] b_address0;
output   b_ce0;
input  [7:0] b_q0;
output  [4:0] b_address1;
output   b_ce1;
input  [7:0] b_q1;
output  [4:0] prod_address0;
output   prod_ce0;
output   prod_we0;
output  [15:0] prod_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] a_address0;
reg a_ce0;
reg[4:0] a_address1;
reg a_ce1;
reg[4:0] b_address0;
reg b_ce0;
reg[4:0] b_address1;
reg b_ce1;
reg prod_ce0;
reg prod_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [4:0] indvar_flatten_reg_172;
reg   [2:0] i_reg_183;
reg   [2:0] j_reg_194;
reg  signed [7:0] reg_205;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] exitcond_flatten_reg_453;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_state16_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_flag00011001;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_453;
reg  signed [7:0] reg_209;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state15_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_453;
wire   [0:0] exitcond_flatten_fu_214_p2;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_453;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_453;
wire   [4:0] indvar_flatten_next_fu_220_p2;
reg   [4:0] indvar_flatten_next_reg_457;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] j_mid2_fu_238_p3;
reg   [2:0] j_mid2_reg_462;
reg   [2:0] ap_reg_pp0_iter1_j_mid2_reg_462;
reg   [2:0] ap_reg_pp0_iter2_j_mid2_reg_462;
wire   [2:0] i_cast6_mid2_v_fu_246_p3;
reg   [2:0] i_cast6_mid2_v_reg_471;
wire   [5:0] tmp_7_fu_268_p2;
reg   [5:0] tmp_7_reg_478;
reg   [5:0] ap_reg_pp0_iter1_tmp_7_reg_478;
reg   [5:0] ap_reg_pp0_iter2_tmp_7_reg_478;
wire   [4:0] j_cast5_cast3_fu_274_p1;
reg   [4:0] j_cast5_cast3_reg_488;
reg   [4:0] ap_reg_pp0_iter1_j_cast5_cast3_reg_488;
reg   [4:0] ap_reg_pp0_iter2_j_cast5_cast3_reg_488;
wire   [3:0] tmp_12_fu_280_p2;
reg   [3:0] tmp_12_reg_494;
wire   [4:0] tmp_15_fu_286_p2;
reg   [4:0] tmp_15_reg_499;
wire   [5:0] tmp_8_fu_292_p2;
reg   [5:0] tmp_8_reg_504;
wire   [5:0] tmp_11_fu_297_p2;
reg   [5:0] tmp_11_reg_509;
wire   [2:0] j_1_fu_310_p2;
reg   [2:0] j_1_reg_524;
reg  signed [7:0] b_load_1_reg_539;
reg  signed [7:0] a_load_1_reg_544;
wire   [4:0] tmp_14_fu_323_p2;
reg   [4:0] tmp_14_reg_549;
wire   [5:0] tmp_9_fu_342_p2;
reg   [5:0] tmp_9_reg_564;
wire   [5:0] tmp_10_fu_347_p2;
reg   [5:0] tmp_10_reg_569;
reg  signed [7:0] b_load_3_reg_604;
wire   [4:0] tmp_13_fu_387_p2;
reg   [4:0] tmp_13_reg_614;
wire   [5:0] tmp_16_fu_392_p2;
reg   [5:0] tmp_16_reg_619;
reg   [5:0] ap_reg_pp0_iter3_tmp_16_reg_619;
wire   [15:0] grp_fu_336_p2;
reg   [15:0] tmp_2_4_reg_649;
wire   [15:0] grp_fu_362_p2;
reg   [15:0] tmp_2_1_reg_654;
wire  signed [15:0] grp_fu_432_p3;
reg  signed [15:0] tmp4_reg_669;
reg    ap_enable_reg_pp0_iter3;
wire  signed [15:0] grp_fu_439_p3;
reg  signed [15:0] tmp1_reg_674;
wire  signed [15:0] grp_fu_446_p3;
reg  signed [15:0] tmp3_reg_679;
reg    ap_enable_reg_pp0_iter4;
(* use_dsp48 = "no" *) wire   [15:0] tmp_3_4_fu_424_p2;
reg   [15:0] tmp_3_4_reg_684;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage2_flag00011011;
reg   [4:0] indvar_flatten_phi_fu_176_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg   [2:0] i_phi_fu_187_p4;
reg   [2:0] j_phi_fu_198_p4;
wire   [31:0] tmp_12_cast_fu_302_p1;
wire    ap_block_pp0_stage2_flag00000000;
wire   [31:0] tmp_15_cast_fu_306_p1;
wire   [31:0] tmp_8_cast_fu_315_p1;
wire  signed [31:0] tmp_11_cast_fu_319_p1;
wire   [31:0] tmp_14_cast_fu_352_p1;
wire  signed [31:0] tmp_9_cast_fu_368_p1;
wire    ap_block_pp0_stage1_flag00000000;
wire  signed [31:0] tmp_10_cast_fu_372_p1;
wire   [31:0] j_cast5_fu_376_p1;
wire   [31:0] tmp_7_cast_fu_380_p1;
wire   [31:0] tmp_13_cast_fu_404_p1;
wire   [31:0] tmp_16_cast_fu_428_p1;
wire   [0:0] exitcond_fu_232_p2;
wire   [2:0] i_1_fu_226_p2;
wire   [4:0] tmp_fu_257_p3;
wire   [5:0] i_cast6_mid2_cast_fu_254_p1;
wire   [5:0] p_shl_cast_fu_264_p1;
wire   [3:0] j_cast5_cast_fu_277_p1;
wire   [5:0] j_cast5_cast4_fu_384_p1;
wire    ap_CS_fsm_state17;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

matrix_mult_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
matrix_mult_mul_8bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_209),
    .din1(reg_205),
    .ce(1'b1),
    .dout(grp_fu_336_p2)
);

matrix_mult_mul_8bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
matrix_mult_mul_8bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_load_1_reg_544),
    .din1(b_load_1_reg_539),
    .ce(1'b1),
    .dout(grp_fu_362_p2)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_q1),
    .din1(b_load_3_reg_604),
    .din2(tmp_2_4_reg_649),
    .ce(1'b1),
    .dout(grp_fu_432_p3)
);

matrix_mult_mac_mcud #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mcud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(a_q0),
    .din1(reg_205),
    .din2(tmp_2_1_reg_654),
    .ce(1'b1),
    .dout(grp_fu_439_p3)
);

matrix_mult_mac_mdEe #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
matrix_mult_mac_mdEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_209),
    .din1(b_q1),
    .din2(tmp4_reg_669),
    .ce(1'b1),
    .dout(grp_fu_446_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state2 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011011 == 1'b0))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_453 == 1'd0))) begin
        i_reg_183 <= i_cast6_mid2_v_reg_471;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_183 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_453 == 1'd0))) begin
        indvar_flatten_reg_172 <= indvar_flatten_next_reg_457;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_172 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_453 == 1'd0))) begin
        j_reg_194 <= j_1_reg_524;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_194 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_453))) begin
        reg_209 <= a_q0;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_453))) begin
        reg_209 <= a_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_453))) begin
        a_load_1_reg_544 <= a_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_453 <= exitcond_flatten_reg_453;
        ap_reg_pp0_iter1_j_mid2_reg_462 <= j_mid2_reg_462;
        ap_reg_pp0_iter2_exitcond_flatten_reg_453 <= ap_reg_pp0_iter1_exitcond_flatten_reg_453;
        ap_reg_pp0_iter2_j_mid2_reg_462 <= ap_reg_pp0_iter1_j_mid2_reg_462;
        ap_reg_pp0_iter3_exitcond_flatten_reg_453 <= ap_reg_pp0_iter2_exitcond_flatten_reg_453;
        ap_reg_pp0_iter4_exitcond_flatten_reg_453 <= ap_reg_pp0_iter3_exitcond_flatten_reg_453;
        exitcond_flatten_reg_453 <= exitcond_flatten_fu_214_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_j_cast5_cast3_reg_488[2 : 0] <= j_cast5_cast3_reg_488[2 : 0];
        ap_reg_pp0_iter1_tmp_7_reg_478 <= tmp_7_reg_478;
        ap_reg_pp0_iter2_j_cast5_cast3_reg_488[2 : 0] <= ap_reg_pp0_iter1_j_cast5_cast3_reg_488[2 : 0];
        ap_reg_pp0_iter2_tmp_7_reg_478 <= ap_reg_pp0_iter1_tmp_7_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter3_tmp_16_reg_619 <= tmp_16_reg_619;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_453 == 1'd0))) begin
        b_load_1_reg_539 <= b_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_453) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        b_load_3_reg_604 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_flatten_fu_214_p2))) begin
        i_cast6_mid2_v_reg_471 <= i_cast6_mid2_v_fu_246_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        indvar_flatten_next_reg_457 <= indvar_flatten_next_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0))) begin
        j_1_reg_524 <= j_1_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0))) begin
        j_cast5_cast3_reg_488[2 : 0] <= j_cast5_cast3_fu_274_p1[2 : 0];
        tmp_12_reg_494 <= tmp_12_fu_280_p2;
        tmp_15_reg_499 <= tmp_15_fu_286_p2;
        tmp_7_reg_478 <= tmp_7_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_flatten_fu_214_p2))) begin
        j_mid2_reg_462 <= j_mid2_fu_238_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (exitcond_flatten_reg_453 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_453)))) begin
        reg_205 <= b_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_453) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        tmp1_reg_674 <= grp_fu_439_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_453) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        tmp3_reg_679 <= grp_fu_446_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_453) & (1'b1 == ap_enable_reg_pp0_iter3))) begin
        tmp4_reg_669 <= grp_fu_432_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_453))) begin
        tmp_10_reg_569 <= tmp_10_fu_347_p2;
        tmp_9_reg_564 <= tmp_9_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_453 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0))) begin
        tmp_11_reg_509 <= tmp_11_fu_297_p2;
        tmp_8_reg_504 <= tmp_8_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_453))) begin
        tmp_13_reg_614 <= tmp_13_fu_387_p2;
        tmp_16_reg_619 <= tmp_16_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_flatten_reg_453))) begin
        tmp_14_reg_549 <= tmp_14_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter3_exitcond_flatten_reg_453))) begin
        tmp_2_1_reg_654 <= grp_fu_362_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter2_exitcond_flatten_reg_453))) begin
        tmp_2_4_reg_649 <= grp_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_453))) begin
        tmp_3_4_reg_684 <= tmp_3_4_fu_424_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        a_address0 = tmp_7_cast_fu_380_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        a_address0 = tmp_9_cast_fu_368_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        a_address0 = tmp_8_cast_fu_315_p1;
    end else begin
        a_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        a_address1 = tmp_10_cast_fu_372_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        a_address1 = tmp_11_cast_fu_319_p1;
    end else begin
        a_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        a_ce0 = 1'b1;
    end else begin
        a_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)))) begin
        a_ce1 = 1'b1;
    end else begin
        a_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_214_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2) & (1'b0 == ap_enable_reg_pp0_iter3) & (1'b0 == ap_enable_reg_pp0_iter4))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        b_address0 = j_cast5_fu_376_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        b_address0 = tmp_14_cast_fu_352_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        b_address0 = tmp_15_cast_fu_306_p1;
    end else begin
        b_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter3) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        b_address1 = tmp_13_cast_fu_404_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage2_flag00000000 == 1'b0))) begin
        b_address1 = tmp_12_cast_fu_302_p1;
    end else begin
        b_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2)))) begin
        b_ce0 = 1'b1;
    end else begin
        b_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter3)))) begin
        b_ce1 = 1'b1;
    end else begin
        b_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_453 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        i_phi_fu_187_p4 = i_cast6_mid2_v_reg_471;
    end else begin
        i_phi_fu_187_p4 = i_reg_183;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_453 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        indvar_flatten_phi_fu_176_p4 = indvar_flatten_next_reg_457;
    end else begin
        indvar_flatten_phi_fu_176_p4 = indvar_flatten_reg_172;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (exitcond_flatten_reg_453 == 1'd0) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        j_phi_fu_198_p4 = j_1_reg_524;
    end else begin
        j_phi_fu_198_p4 = j_reg_194;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4))) begin
        prod_ce0 = 1'b1;
    end else begin
        prod_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter4) & (1'd0 == ap_reg_pp0_iter4_exitcond_flatten_reg_453))) begin
        prod_we0 = 1'b1;
    end else begin
        prod_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_flatten_fu_214_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & ~((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter4) & (ap_block_pp0_stage2_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_214_p2 = ((indvar_flatten_phi_fu_176_p4 == 5'd25) ? 1'b1 : 1'b0);

assign exitcond_fu_232_p2 = ((j_phi_fu_198_p4 == 3'd5) ? 1'b1 : 1'b0);

assign i_1_fu_226_p2 = (i_phi_fu_187_p4 + 3'd1);

assign i_cast6_mid2_cast_fu_254_p1 = i_cast6_mid2_v_reg_471;

assign i_cast6_mid2_v_fu_246_p3 = ((exitcond_fu_232_p2[0:0] === 1'b1) ? i_1_fu_226_p2 : i_phi_fu_187_p4);

assign indvar_flatten_next_fu_220_p2 = (indvar_flatten_phi_fu_176_p4 + 5'd1);

assign j_1_fu_310_p2 = (j_mid2_reg_462 + 3'd1);

assign j_cast5_cast3_fu_274_p1 = j_mid2_reg_462;

assign j_cast5_cast4_fu_384_p1 = ap_reg_pp0_iter2_j_mid2_reg_462;

assign j_cast5_cast_fu_277_p1 = j_mid2_reg_462;

assign j_cast5_fu_376_p1 = ap_reg_pp0_iter2_j_mid2_reg_462;

assign j_mid2_fu_238_p3 = ((exitcond_fu_232_p2[0:0] === 1'b1) ? 3'd0 : j_phi_fu_198_p4);

assign p_shl_cast_fu_264_p1 = tmp_fu_257_p3;

assign prod_address0 = tmp_16_cast_fu_428_p1;

assign prod_d0 = tmp_3_4_reg_684;

assign tmp_10_cast_fu_372_p1 = $signed(tmp_10_reg_569);

assign tmp_10_fu_347_p2 = (ap_reg_pp0_iter1_tmp_7_reg_478 + 6'd3);

assign tmp_11_cast_fu_319_p1 = $signed(tmp_11_reg_509);

assign tmp_11_fu_297_p2 = (tmp_7_reg_478 + 6'd4);

assign tmp_12_cast_fu_302_p1 = tmp_12_reg_494;

assign tmp_12_fu_280_p2 = (j_cast5_cast_fu_277_p1 + 4'd5);

assign tmp_13_cast_fu_404_p1 = tmp_13_reg_614;

assign tmp_13_fu_387_p2 = (ap_reg_pp0_iter2_j_cast5_cast3_reg_488 + 5'd10);

assign tmp_14_cast_fu_352_p1 = tmp_14_reg_549;

assign tmp_14_fu_323_p2 = (ap_reg_pp0_iter1_j_cast5_cast3_reg_488 + 5'd15);

assign tmp_15_cast_fu_306_p1 = tmp_15_reg_499;

assign tmp_15_fu_286_p2 = ($signed(j_cast5_cast3_fu_274_p1) + $signed(5'd20));

assign tmp_16_cast_fu_428_p1 = ap_reg_pp0_iter3_tmp_16_reg_619;

assign tmp_16_fu_392_p2 = (ap_reg_pp0_iter2_tmp_7_reg_478 + j_cast5_cast4_fu_384_p1);

assign tmp_3_4_fu_424_p2 = ($signed(tmp1_reg_674) + $signed(tmp3_reg_679));

assign tmp_7_cast_fu_380_p1 = ap_reg_pp0_iter2_tmp_7_reg_478;

assign tmp_7_fu_268_p2 = (i_cast6_mid2_cast_fu_254_p1 + p_shl_cast_fu_264_p1);

assign tmp_8_cast_fu_315_p1 = tmp_8_reg_504;

assign tmp_8_fu_292_p2 = (tmp_7_reg_478 + 6'd1);

assign tmp_9_cast_fu_368_p1 = $signed(tmp_9_reg_564);

assign tmp_9_fu_342_p2 = (ap_reg_pp0_iter1_tmp_7_reg_478 + 6'd2);

assign tmp_fu_257_p3 = {{i_cast6_mid2_v_reg_471}, {2'd0}};

always @ (posedge ap_clk) begin
    j_cast5_cast3_reg_488[4:3] <= 2'b00;
    ap_reg_pp0_iter1_j_cast5_cast3_reg_488[4:3] <= 2'b00;
    ap_reg_pp0_iter2_j_cast5_cast3_reg_488[4:3] <= 2'b00;
end

endmodule //matrix_mult
