-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity axi_interfaces is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    d_o_0_TREADY : IN STD_LOGIC;
    d_o_1_TREADY : IN STD_LOGIC;
    d_o_2_TREADY : IN STD_LOGIC;
    d_o_3_TREADY : IN STD_LOGIC;
    d_o_4_TREADY : IN STD_LOGIC;
    d_o_5_TREADY : IN STD_LOGIC;
    d_o_6_TREADY : IN STD_LOGIC;
    d_o_7_TREADY : IN STD_LOGIC;
    d_o_0_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_0_TVALID : OUT STD_LOGIC;
    d_o_1_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_1_TVALID : OUT STD_LOGIC;
    d_o_2_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_2_TVALID : OUT STD_LOGIC;
    d_o_3_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_3_TVALID : OUT STD_LOGIC;
    d_o_4_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_4_TVALID : OUT STD_LOGIC;
    d_o_5_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_5_TVALID : OUT STD_LOGIC;
    d_o_6_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_6_TVALID : OUT STD_LOGIC;
    d_o_7_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    d_o_7_TVALID : OUT STD_LOGIC;
    d_i_0_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_0_TVALID : IN STD_LOGIC;
    d_i_0_TREADY : OUT STD_LOGIC;
    d_i_1_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_1_TVALID : IN STD_LOGIC;
    d_i_1_TREADY : OUT STD_LOGIC;
    d_i_2_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_2_TVALID : IN STD_LOGIC;
    d_i_2_TREADY : OUT STD_LOGIC;
    d_i_3_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_3_TVALID : IN STD_LOGIC;
    d_i_3_TREADY : OUT STD_LOGIC;
    d_i_4_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_4_TVALID : IN STD_LOGIC;
    d_i_4_TREADY : OUT STD_LOGIC;
    d_i_5_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_5_TVALID : IN STD_LOGIC;
    d_i_5_TREADY : OUT STD_LOGIC;
    d_i_6_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_6_TVALID : IN STD_LOGIC;
    d_i_6_TREADY : OUT STD_LOGIC;
    d_i_7_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    d_i_7_TVALID : IN STD_LOGIC;
    d_i_7_TREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of axi_interfaces is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "axi_interfaces,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.162500,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2139,HLS_SYN_LUT=1196}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal exitcond_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal d_i_0_0_vld_out : STD_LOGIC;
    signal d_i_1_0_vld_out : STD_LOGIC;
    signal d_i_2_0_vld_out : STD_LOGIC;
    signal d_i_3_0_vld_out : STD_LOGIC;
    signal d_i_4_0_vld_out : STD_LOGIC;
    signal d_i_5_0_vld_out : STD_LOGIC;
    signal d_i_6_0_vld_out : STD_LOGIC;
    signal d_i_7_0_vld_out : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal d_o_0_1_ack_in : STD_LOGIC;
    signal d_o_1_1_ack_in : STD_LOGIC;
    signal d_o_2_1_ack_in : STD_LOGIC;
    signal d_o_3_1_ack_in : STD_LOGIC;
    signal d_o_4_1_ack_in : STD_LOGIC;
    signal d_o_5_1_ack_in : STD_LOGIC;
    signal d_o_6_1_ack_in : STD_LOGIC;
    signal d_o_7_1_ack_in : STD_LOGIC;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal d_o_0_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_0_1_vld_in : STD_LOGIC;
    signal d_o_0_1_vld_out : STD_LOGIC;
    signal d_o_0_1_ack_out : STD_LOGIC;
    signal d_o_0_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_0_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_0_1_sel_rd : STD_LOGIC := '0';
    signal d_o_0_1_sel_wr : STD_LOGIC := '0';
    signal d_o_0_1_sel : STD_LOGIC;
    signal d_o_0_1_load_A : STD_LOGIC;
    signal d_o_0_1_load_B : STD_LOGIC;
    signal d_o_0_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_0_1_state_cmp_full : STD_LOGIC;
    signal d_o_1_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_1_1_vld_in : STD_LOGIC;
    signal d_o_1_1_vld_out : STD_LOGIC;
    signal d_o_1_1_ack_out : STD_LOGIC;
    signal d_o_1_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_1_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_1_1_sel_rd : STD_LOGIC := '0';
    signal d_o_1_1_sel_wr : STD_LOGIC := '0';
    signal d_o_1_1_sel : STD_LOGIC;
    signal d_o_1_1_load_A : STD_LOGIC;
    signal d_o_1_1_load_B : STD_LOGIC;
    signal d_o_1_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_1_1_state_cmp_full : STD_LOGIC;
    signal d_o_2_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_2_1_vld_in : STD_LOGIC;
    signal d_o_2_1_vld_out : STD_LOGIC;
    signal d_o_2_1_ack_out : STD_LOGIC;
    signal d_o_2_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_2_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_2_1_sel_rd : STD_LOGIC := '0';
    signal d_o_2_1_sel_wr : STD_LOGIC := '0';
    signal d_o_2_1_sel : STD_LOGIC;
    signal d_o_2_1_load_A : STD_LOGIC;
    signal d_o_2_1_load_B : STD_LOGIC;
    signal d_o_2_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_2_1_state_cmp_full : STD_LOGIC;
    signal d_o_3_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_3_1_vld_in : STD_LOGIC;
    signal d_o_3_1_vld_out : STD_LOGIC;
    signal d_o_3_1_ack_out : STD_LOGIC;
    signal d_o_3_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_3_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_3_1_sel_rd : STD_LOGIC := '0';
    signal d_o_3_1_sel_wr : STD_LOGIC := '0';
    signal d_o_3_1_sel : STD_LOGIC;
    signal d_o_3_1_load_A : STD_LOGIC;
    signal d_o_3_1_load_B : STD_LOGIC;
    signal d_o_3_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_3_1_state_cmp_full : STD_LOGIC;
    signal d_o_4_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_4_1_vld_in : STD_LOGIC;
    signal d_o_4_1_vld_out : STD_LOGIC;
    signal d_o_4_1_ack_out : STD_LOGIC;
    signal d_o_4_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_4_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_4_1_sel_rd : STD_LOGIC := '0';
    signal d_o_4_1_sel_wr : STD_LOGIC := '0';
    signal d_o_4_1_sel : STD_LOGIC;
    signal d_o_4_1_load_A : STD_LOGIC;
    signal d_o_4_1_load_B : STD_LOGIC;
    signal d_o_4_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_4_1_state_cmp_full : STD_LOGIC;
    signal d_o_5_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_5_1_vld_in : STD_LOGIC;
    signal d_o_5_1_vld_out : STD_LOGIC;
    signal d_o_5_1_ack_out : STD_LOGIC;
    signal d_o_5_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_5_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_5_1_sel_rd : STD_LOGIC := '0';
    signal d_o_5_1_sel_wr : STD_LOGIC := '0';
    signal d_o_5_1_sel : STD_LOGIC;
    signal d_o_5_1_load_A : STD_LOGIC;
    signal d_o_5_1_load_B : STD_LOGIC;
    signal d_o_5_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_5_1_state_cmp_full : STD_LOGIC;
    signal d_o_6_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_6_1_vld_in : STD_LOGIC;
    signal d_o_6_1_vld_out : STD_LOGIC;
    signal d_o_6_1_ack_out : STD_LOGIC;
    signal d_o_6_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_6_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_6_1_sel_rd : STD_LOGIC := '0';
    signal d_o_6_1_sel_wr : STD_LOGIC := '0';
    signal d_o_6_1_sel : STD_LOGIC;
    signal d_o_6_1_load_A : STD_LOGIC;
    signal d_o_6_1_load_B : STD_LOGIC;
    signal d_o_6_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_6_1_state_cmp_full : STD_LOGIC;
    signal d_o_7_1_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_7_1_vld_in : STD_LOGIC;
    signal d_o_7_1_vld_out : STD_LOGIC;
    signal d_o_7_1_ack_out : STD_LOGIC;
    signal d_o_7_1_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_7_1_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_o_7_1_sel_rd : STD_LOGIC := '0';
    signal d_o_7_1_sel_wr : STD_LOGIC := '0';
    signal d_o_7_1_sel : STD_LOGIC;
    signal d_o_7_1_load_A : STD_LOGIC;
    signal d_o_7_1_load_B : STD_LOGIC;
    signal d_o_7_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_o_7_1_state_cmp_full : STD_LOGIC;
    signal d_i_0_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_0_vld_in : STD_LOGIC;
    signal d_i_0_0_ack_in : STD_LOGIC;
    signal d_i_0_0_ack_out : STD_LOGIC;
    signal d_i_0_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_0_0_sel_rd : STD_LOGIC := '0';
    signal d_i_0_0_sel_wr : STD_LOGIC := '0';
    signal d_i_0_0_sel : STD_LOGIC;
    signal d_i_0_0_load_A : STD_LOGIC;
    signal d_i_0_0_load_B : STD_LOGIC;
    signal d_i_0_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_0_0_state_cmp_full : STD_LOGIC;
    signal d_i_1_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_0_vld_in : STD_LOGIC;
    signal d_i_1_0_ack_in : STD_LOGIC;
    signal d_i_1_0_ack_out : STD_LOGIC;
    signal d_i_1_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_1_0_sel_rd : STD_LOGIC := '0';
    signal d_i_1_0_sel_wr : STD_LOGIC := '0';
    signal d_i_1_0_sel : STD_LOGIC;
    signal d_i_1_0_load_A : STD_LOGIC;
    signal d_i_1_0_load_B : STD_LOGIC;
    signal d_i_1_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_1_0_state_cmp_full : STD_LOGIC;
    signal d_i_2_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_2_0_vld_in : STD_LOGIC;
    signal d_i_2_0_ack_in : STD_LOGIC;
    signal d_i_2_0_ack_out : STD_LOGIC;
    signal d_i_2_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_2_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_2_0_sel_rd : STD_LOGIC := '0';
    signal d_i_2_0_sel_wr : STD_LOGIC := '0';
    signal d_i_2_0_sel : STD_LOGIC;
    signal d_i_2_0_load_A : STD_LOGIC;
    signal d_i_2_0_load_B : STD_LOGIC;
    signal d_i_2_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_2_0_state_cmp_full : STD_LOGIC;
    signal d_i_3_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_3_0_vld_in : STD_LOGIC;
    signal d_i_3_0_ack_in : STD_LOGIC;
    signal d_i_3_0_ack_out : STD_LOGIC;
    signal d_i_3_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_3_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_3_0_sel_rd : STD_LOGIC := '0';
    signal d_i_3_0_sel_wr : STD_LOGIC := '0';
    signal d_i_3_0_sel : STD_LOGIC;
    signal d_i_3_0_load_A : STD_LOGIC;
    signal d_i_3_0_load_B : STD_LOGIC;
    signal d_i_3_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_3_0_state_cmp_full : STD_LOGIC;
    signal d_i_4_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_4_0_vld_in : STD_LOGIC;
    signal d_i_4_0_ack_in : STD_LOGIC;
    signal d_i_4_0_ack_out : STD_LOGIC;
    signal d_i_4_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_4_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_4_0_sel_rd : STD_LOGIC := '0';
    signal d_i_4_0_sel_wr : STD_LOGIC := '0';
    signal d_i_4_0_sel : STD_LOGIC;
    signal d_i_4_0_load_A : STD_LOGIC;
    signal d_i_4_0_load_B : STD_LOGIC;
    signal d_i_4_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_4_0_state_cmp_full : STD_LOGIC;
    signal d_i_5_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_5_0_vld_in : STD_LOGIC;
    signal d_i_5_0_ack_in : STD_LOGIC;
    signal d_i_5_0_ack_out : STD_LOGIC;
    signal d_i_5_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_5_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_5_0_sel_rd : STD_LOGIC := '0';
    signal d_i_5_0_sel_wr : STD_LOGIC := '0';
    signal d_i_5_0_sel : STD_LOGIC;
    signal d_i_5_0_load_A : STD_LOGIC;
    signal d_i_5_0_load_B : STD_LOGIC;
    signal d_i_5_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_5_0_state_cmp_full : STD_LOGIC;
    signal d_i_6_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_6_0_vld_in : STD_LOGIC;
    signal d_i_6_0_ack_in : STD_LOGIC;
    signal d_i_6_0_ack_out : STD_LOGIC;
    signal d_i_6_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_6_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_6_0_sel_rd : STD_LOGIC := '0';
    signal d_i_6_0_sel_wr : STD_LOGIC := '0';
    signal d_i_6_0_sel : STD_LOGIC;
    signal d_i_6_0_load_A : STD_LOGIC;
    signal d_i_6_0_load_B : STD_LOGIC;
    signal d_i_6_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_6_0_state_cmp_full : STD_LOGIC;
    signal d_i_7_0_data_out : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_7_0_vld_in : STD_LOGIC;
    signal d_i_7_0_ack_in : STD_LOGIC;
    signal d_i_7_0_ack_out : STD_LOGIC;
    signal d_i_7_0_payload_A : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_7_0_payload_B : STD_LOGIC_VECTOR (15 downto 0);
    signal d_i_7_0_sel_rd : STD_LOGIC := '0';
    signal d_i_7_0_sel_wr : STD_LOGIC := '0';
    signal d_i_7_0_sel : STD_LOGIC;
    signal d_i_7_0_load_A : STD_LOGIC;
    signal d_i_7_0_load_B : STD_LOGIC;
    signal d_i_7_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal d_i_7_0_state_cmp_full : STD_LOGIC;
    signal acc_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal acc_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal d_o_0_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal d_o_1_TDATA_blk_n : STD_LOGIC;
    signal d_o_2_TDATA_blk_n : STD_LOGIC;
    signal d_o_3_TDATA_blk_n : STD_LOGIC;
    signal d_o_4_TDATA_blk_n : STD_LOGIC;
    signal d_o_5_TDATA_blk_n : STD_LOGIC;
    signal d_o_6_TDATA_blk_n : STD_LOGIC;
    signal d_o_7_TDATA_blk_n : STD_LOGIC;
    signal d_i_0_TDATA_blk_n : STD_LOGIC;
    signal d_i_1_TDATA_blk_n : STD_LOGIC;
    signal d_i_2_TDATA_blk_n : STD_LOGIC;
    signal d_i_3_TDATA_blk_n : STD_LOGIC;
    signal d_i_4_TDATA_blk_n : STD_LOGIC;
    signal d_i_5_TDATA_blk_n : STD_LOGIC;
    signal d_i_6_TDATA_blk_n : STD_LOGIC;
    signal d_i_7_TDATA_blk_n : STD_LOGIC;
    signal i1_reg_218 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_242_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_reg_502 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_278_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_1_fu_309_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_2_fu_340_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_3_fu_371_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_4_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_5_fu_433_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_6_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_7_fu_495_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal i1_phi_fu_222_p6 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_3_fu_359_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_4_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_6_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_7_fu_483_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00001001 : BOOLEAN;
    signal i1_cast_fu_232_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_7_fu_236_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp1_fu_258_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_262_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_324_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_355_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_386_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_417_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_444_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_448_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1051 : BOOLEAN;

    component axi_interfaces_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    axi_interfaces_AXILiteS_s_axi_U : component axi_interfaces_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_i_0_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_0_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_0_0_ack_out) and (ap_const_logic_1 = d_i_0_0_vld_out))) then 
                                        d_i_0_0_sel_rd <= not(d_i_0_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_0_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_0_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_0_0_vld_in) and (ap_const_logic_1 = d_i_0_0_ack_in))) then 
                                        d_i_0_0_sel_wr <= not(d_i_0_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_0_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_0_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_0_0_vld_in) and (ap_const_logic_1 = d_i_0_0_ack_out) and (ap_const_lv2_3 = d_i_0_0_state)) or ((ap_const_logic_0 = d_i_0_0_vld_in) and (ap_const_lv2_2 = d_i_0_0_state)))) then 
                    d_i_0_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_0_0_vld_in) and (ap_const_logic_0 = d_i_0_0_ack_out) and (ap_const_lv2_3 = d_i_0_0_state)) or ((ap_const_logic_0 = d_i_0_0_ack_out) and (ap_const_lv2_1 = d_i_0_0_state)))) then 
                    d_i_0_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_0_0_vld_in) and (ap_const_lv2_2 = d_i_0_0_state)) or ((ap_const_logic_1 = d_i_0_0_ack_out) and (ap_const_lv2_1 = d_i_0_0_state)) or ((ap_const_lv2_3 = d_i_0_0_state) and not(((ap_const_logic_1 = d_i_0_0_vld_in) and (ap_const_logic_0 = d_i_0_0_ack_out))) and not(((ap_const_logic_0 = d_i_0_0_vld_in) and (ap_const_logic_1 = d_i_0_0_ack_out)))))) then 
                    d_i_0_0_state <= ap_const_lv2_3;
                else 
                    d_i_0_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_1_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_1_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_1_0_ack_out) and (ap_const_logic_1 = d_i_1_0_vld_out))) then 
                                        d_i_1_0_sel_rd <= not(d_i_1_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_1_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_1_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_1_0_vld_in) and (ap_const_logic_1 = d_i_1_0_ack_in))) then 
                                        d_i_1_0_sel_wr <= not(d_i_1_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_1_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_1_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_1_0_vld_in) and (ap_const_logic_1 = d_i_1_0_ack_out) and (ap_const_lv2_3 = d_i_1_0_state)) or ((ap_const_logic_0 = d_i_1_0_vld_in) and (ap_const_lv2_2 = d_i_1_0_state)))) then 
                    d_i_1_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_1_0_vld_in) and (ap_const_logic_0 = d_i_1_0_ack_out) and (ap_const_lv2_3 = d_i_1_0_state)) or ((ap_const_logic_0 = d_i_1_0_ack_out) and (ap_const_lv2_1 = d_i_1_0_state)))) then 
                    d_i_1_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_1_0_vld_in) and (ap_const_lv2_2 = d_i_1_0_state)) or ((ap_const_logic_1 = d_i_1_0_ack_out) and (ap_const_lv2_1 = d_i_1_0_state)) or ((ap_const_lv2_3 = d_i_1_0_state) and not(((ap_const_logic_1 = d_i_1_0_vld_in) and (ap_const_logic_0 = d_i_1_0_ack_out))) and not(((ap_const_logic_0 = d_i_1_0_vld_in) and (ap_const_logic_1 = d_i_1_0_ack_out)))))) then 
                    d_i_1_0_state <= ap_const_lv2_3;
                else 
                    d_i_1_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_2_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_2_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_2_0_ack_out) and (ap_const_logic_1 = d_i_2_0_vld_out))) then 
                                        d_i_2_0_sel_rd <= not(d_i_2_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_2_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_2_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_2_0_vld_in) and (ap_const_logic_1 = d_i_2_0_ack_in))) then 
                                        d_i_2_0_sel_wr <= not(d_i_2_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_2_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_2_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_2_0_vld_in) and (ap_const_logic_1 = d_i_2_0_ack_out) and (ap_const_lv2_3 = d_i_2_0_state)) or ((ap_const_logic_0 = d_i_2_0_vld_in) and (ap_const_lv2_2 = d_i_2_0_state)))) then 
                    d_i_2_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_2_0_vld_in) and (ap_const_logic_0 = d_i_2_0_ack_out) and (ap_const_lv2_3 = d_i_2_0_state)) or ((ap_const_logic_0 = d_i_2_0_ack_out) and (ap_const_lv2_1 = d_i_2_0_state)))) then 
                    d_i_2_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_2_0_vld_in) and (ap_const_lv2_2 = d_i_2_0_state)) or ((ap_const_logic_1 = d_i_2_0_ack_out) and (ap_const_lv2_1 = d_i_2_0_state)) or ((ap_const_lv2_3 = d_i_2_0_state) and not(((ap_const_logic_1 = d_i_2_0_vld_in) and (ap_const_logic_0 = d_i_2_0_ack_out))) and not(((ap_const_logic_0 = d_i_2_0_vld_in) and (ap_const_logic_1 = d_i_2_0_ack_out)))))) then 
                    d_i_2_0_state <= ap_const_lv2_3;
                else 
                    d_i_2_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_3_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_3_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_3_0_ack_out) and (ap_const_logic_1 = d_i_3_0_vld_out))) then 
                                        d_i_3_0_sel_rd <= not(d_i_3_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_3_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_3_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_3_0_vld_in) and (ap_const_logic_1 = d_i_3_0_ack_in))) then 
                                        d_i_3_0_sel_wr <= not(d_i_3_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_3_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_3_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_3_0_vld_in) and (ap_const_logic_1 = d_i_3_0_ack_out) and (ap_const_lv2_3 = d_i_3_0_state)) or ((ap_const_logic_0 = d_i_3_0_vld_in) and (ap_const_lv2_2 = d_i_3_0_state)))) then 
                    d_i_3_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_3_0_vld_in) and (ap_const_logic_0 = d_i_3_0_ack_out) and (ap_const_lv2_3 = d_i_3_0_state)) or ((ap_const_logic_0 = d_i_3_0_ack_out) and (ap_const_lv2_1 = d_i_3_0_state)))) then 
                    d_i_3_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_3_0_vld_in) and (ap_const_lv2_2 = d_i_3_0_state)) or ((ap_const_logic_1 = d_i_3_0_ack_out) and (ap_const_lv2_1 = d_i_3_0_state)) or ((ap_const_lv2_3 = d_i_3_0_state) and not(((ap_const_logic_1 = d_i_3_0_vld_in) and (ap_const_logic_0 = d_i_3_0_ack_out))) and not(((ap_const_logic_0 = d_i_3_0_vld_in) and (ap_const_logic_1 = d_i_3_0_ack_out)))))) then 
                    d_i_3_0_state <= ap_const_lv2_3;
                else 
                    d_i_3_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_4_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_4_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_4_0_ack_out) and (ap_const_logic_1 = d_i_4_0_vld_out))) then 
                                        d_i_4_0_sel_rd <= not(d_i_4_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_4_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_4_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_4_0_vld_in) and (ap_const_logic_1 = d_i_4_0_ack_in))) then 
                                        d_i_4_0_sel_wr <= not(d_i_4_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_4_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_4_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_4_0_vld_in) and (ap_const_logic_1 = d_i_4_0_ack_out) and (ap_const_lv2_3 = d_i_4_0_state)) or ((ap_const_logic_0 = d_i_4_0_vld_in) and (ap_const_lv2_2 = d_i_4_0_state)))) then 
                    d_i_4_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_4_0_vld_in) and (ap_const_logic_0 = d_i_4_0_ack_out) and (ap_const_lv2_3 = d_i_4_0_state)) or ((ap_const_logic_0 = d_i_4_0_ack_out) and (ap_const_lv2_1 = d_i_4_0_state)))) then 
                    d_i_4_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_4_0_vld_in) and (ap_const_lv2_2 = d_i_4_0_state)) or ((ap_const_logic_1 = d_i_4_0_ack_out) and (ap_const_lv2_1 = d_i_4_0_state)) or ((ap_const_lv2_3 = d_i_4_0_state) and not(((ap_const_logic_1 = d_i_4_0_vld_in) and (ap_const_logic_0 = d_i_4_0_ack_out))) and not(((ap_const_logic_0 = d_i_4_0_vld_in) and (ap_const_logic_1 = d_i_4_0_ack_out)))))) then 
                    d_i_4_0_state <= ap_const_lv2_3;
                else 
                    d_i_4_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_5_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_5_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_5_0_ack_out) and (ap_const_logic_1 = d_i_5_0_vld_out))) then 
                                        d_i_5_0_sel_rd <= not(d_i_5_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_5_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_5_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_5_0_vld_in) and (ap_const_logic_1 = d_i_5_0_ack_in))) then 
                                        d_i_5_0_sel_wr <= not(d_i_5_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_5_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_5_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_5_0_vld_in) and (ap_const_logic_1 = d_i_5_0_ack_out) and (ap_const_lv2_3 = d_i_5_0_state)) or ((ap_const_logic_0 = d_i_5_0_vld_in) and (ap_const_lv2_2 = d_i_5_0_state)))) then 
                    d_i_5_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_5_0_vld_in) and (ap_const_logic_0 = d_i_5_0_ack_out) and (ap_const_lv2_3 = d_i_5_0_state)) or ((ap_const_logic_0 = d_i_5_0_ack_out) and (ap_const_lv2_1 = d_i_5_0_state)))) then 
                    d_i_5_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_5_0_vld_in) and (ap_const_lv2_2 = d_i_5_0_state)) or ((ap_const_logic_1 = d_i_5_0_ack_out) and (ap_const_lv2_1 = d_i_5_0_state)) or ((ap_const_lv2_3 = d_i_5_0_state) and not(((ap_const_logic_1 = d_i_5_0_vld_in) and (ap_const_logic_0 = d_i_5_0_ack_out))) and not(((ap_const_logic_0 = d_i_5_0_vld_in) and (ap_const_logic_1 = d_i_5_0_ack_out)))))) then 
                    d_i_5_0_state <= ap_const_lv2_3;
                else 
                    d_i_5_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_6_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_6_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_6_0_ack_out) and (ap_const_logic_1 = d_i_6_0_vld_out))) then 
                                        d_i_6_0_sel_rd <= not(d_i_6_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_6_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_6_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_6_0_vld_in) and (ap_const_logic_1 = d_i_6_0_ack_in))) then 
                                        d_i_6_0_sel_wr <= not(d_i_6_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_6_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_6_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_6_0_vld_in) and (ap_const_logic_1 = d_i_6_0_ack_out) and (ap_const_lv2_3 = d_i_6_0_state)) or ((ap_const_logic_0 = d_i_6_0_vld_in) and (ap_const_lv2_2 = d_i_6_0_state)))) then 
                    d_i_6_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_6_0_vld_in) and (ap_const_logic_0 = d_i_6_0_ack_out) and (ap_const_lv2_3 = d_i_6_0_state)) or ((ap_const_logic_0 = d_i_6_0_ack_out) and (ap_const_lv2_1 = d_i_6_0_state)))) then 
                    d_i_6_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_6_0_vld_in) and (ap_const_lv2_2 = d_i_6_0_state)) or ((ap_const_logic_1 = d_i_6_0_ack_out) and (ap_const_lv2_1 = d_i_6_0_state)) or ((ap_const_lv2_3 = d_i_6_0_state) and not(((ap_const_logic_1 = d_i_6_0_vld_in) and (ap_const_logic_0 = d_i_6_0_ack_out))) and not(((ap_const_logic_0 = d_i_6_0_vld_in) and (ap_const_logic_1 = d_i_6_0_ack_out)))))) then 
                    d_i_6_0_state <= ap_const_lv2_3;
                else 
                    d_i_6_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_i_7_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_7_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_7_0_ack_out) and (ap_const_logic_1 = d_i_7_0_vld_out))) then 
                                        d_i_7_0_sel_rd <= not(d_i_7_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_i_7_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_7_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_i_7_0_vld_in) and (ap_const_logic_1 = d_i_7_0_ack_in))) then 
                                        d_i_7_0_sel_wr <= not(d_i_7_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_i_7_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_i_7_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_i_7_0_vld_in) and (ap_const_logic_1 = d_i_7_0_ack_out) and (ap_const_lv2_3 = d_i_7_0_state)) or ((ap_const_logic_0 = d_i_7_0_vld_in) and (ap_const_lv2_2 = d_i_7_0_state)))) then 
                    d_i_7_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_i_7_0_vld_in) and (ap_const_logic_0 = d_i_7_0_ack_out) and (ap_const_lv2_3 = d_i_7_0_state)) or ((ap_const_logic_0 = d_i_7_0_ack_out) and (ap_const_lv2_1 = d_i_7_0_state)))) then 
                    d_i_7_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_i_7_0_vld_in) and (ap_const_lv2_2 = d_i_7_0_state)) or ((ap_const_logic_1 = d_i_7_0_ack_out) and (ap_const_lv2_1 = d_i_7_0_state)) or ((ap_const_lv2_3 = d_i_7_0_state) and not(((ap_const_logic_1 = d_i_7_0_vld_in) and (ap_const_logic_0 = d_i_7_0_ack_out))) and not(((ap_const_logic_0 = d_i_7_0_vld_in) and (ap_const_logic_1 = d_i_7_0_ack_out)))))) then 
                    d_i_7_0_state <= ap_const_lv2_3;
                else 
                    d_i_7_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_0_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_0_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_0_1_ack_out) and (ap_const_logic_1 = d_o_0_1_vld_out))) then 
                                        d_o_0_1_sel_rd <= not(d_o_0_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_0_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_0_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_0_1_vld_in) and (ap_const_logic_1 = d_o_0_1_ack_in))) then 
                                        d_o_0_1_sel_wr <= not(d_o_0_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_0_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_0_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_0_1_vld_in) and (ap_const_logic_1 = d_o_0_1_ack_out) and (d_o_0_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = d_o_0_1_vld_in) and (d_o_0_1_state = ap_const_lv2_2)))) then 
                    d_o_0_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_0_1_vld_in) and (ap_const_logic_0 = d_o_0_1_ack_out) and (d_o_0_1_state = ap_const_lv2_3)) or ((ap_const_logic_0 = d_o_0_1_ack_out) and (d_o_0_1_state = ap_const_lv2_1)))) then 
                    d_o_0_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_0_1_vld_in) and (d_o_0_1_state = ap_const_lv2_2)) or ((ap_const_logic_1 = d_o_0_1_ack_out) and (d_o_0_1_state = ap_const_lv2_1)) or ((d_o_0_1_state = ap_const_lv2_3) and not(((ap_const_logic_1 = d_o_0_1_vld_in) and (ap_const_logic_0 = d_o_0_1_ack_out))) and not(((ap_const_logic_0 = d_o_0_1_vld_in) and (ap_const_logic_1 = d_o_0_1_ack_out)))))) then 
                    d_o_0_1_state <= ap_const_lv2_3;
                else 
                    d_o_0_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_1_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_1_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_1_1_ack_out) and (ap_const_logic_1 = d_o_1_1_vld_out))) then 
                                        d_o_1_1_sel_rd <= not(d_o_1_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_1_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_1_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_1_1_vld_in) and (ap_const_logic_1 = d_o_1_1_ack_in))) then 
                                        d_o_1_1_sel_wr <= not(d_o_1_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_1_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_1_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_1_1_vld_in) and (ap_const_logic_1 = d_o_1_1_ack_out) and (ap_const_lv2_3 = d_o_1_1_state)) or ((ap_const_logic_0 = d_o_1_1_vld_in) and (ap_const_lv2_2 = d_o_1_1_state)))) then 
                    d_o_1_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_1_1_vld_in) and (ap_const_logic_0 = d_o_1_1_ack_out) and (ap_const_lv2_3 = d_o_1_1_state)) or ((ap_const_logic_0 = d_o_1_1_ack_out) and (ap_const_lv2_1 = d_o_1_1_state)))) then 
                    d_o_1_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_1_1_vld_in) and (ap_const_lv2_2 = d_o_1_1_state)) or ((ap_const_logic_1 = d_o_1_1_ack_out) and (ap_const_lv2_1 = d_o_1_1_state)) or ((ap_const_lv2_3 = d_o_1_1_state) and not(((ap_const_logic_1 = d_o_1_1_vld_in) and (ap_const_logic_0 = d_o_1_1_ack_out))) and not(((ap_const_logic_0 = d_o_1_1_vld_in) and (ap_const_logic_1 = d_o_1_1_ack_out)))))) then 
                    d_o_1_1_state <= ap_const_lv2_3;
                else 
                    d_o_1_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_2_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_2_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_2_1_ack_out) and (ap_const_logic_1 = d_o_2_1_vld_out))) then 
                                        d_o_2_1_sel_rd <= not(d_o_2_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_2_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_2_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_2_1_vld_in) and (ap_const_logic_1 = d_o_2_1_ack_in))) then 
                                        d_o_2_1_sel_wr <= not(d_o_2_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_2_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_2_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_2_1_vld_in) and (ap_const_logic_1 = d_o_2_1_ack_out) and (ap_const_lv2_3 = d_o_2_1_state)) or ((ap_const_logic_0 = d_o_2_1_vld_in) and (ap_const_lv2_2 = d_o_2_1_state)))) then 
                    d_o_2_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_2_1_vld_in) and (ap_const_logic_0 = d_o_2_1_ack_out) and (ap_const_lv2_3 = d_o_2_1_state)) or ((ap_const_logic_0 = d_o_2_1_ack_out) and (ap_const_lv2_1 = d_o_2_1_state)))) then 
                    d_o_2_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_2_1_vld_in) and (ap_const_lv2_2 = d_o_2_1_state)) or ((ap_const_logic_1 = d_o_2_1_ack_out) and (ap_const_lv2_1 = d_o_2_1_state)) or ((ap_const_lv2_3 = d_o_2_1_state) and not(((ap_const_logic_1 = d_o_2_1_vld_in) and (ap_const_logic_0 = d_o_2_1_ack_out))) and not(((ap_const_logic_0 = d_o_2_1_vld_in) and (ap_const_logic_1 = d_o_2_1_ack_out)))))) then 
                    d_o_2_1_state <= ap_const_lv2_3;
                else 
                    d_o_2_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_3_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_3_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_3_1_ack_out) and (ap_const_logic_1 = d_o_3_1_vld_out))) then 
                                        d_o_3_1_sel_rd <= not(d_o_3_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_3_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_3_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_3_1_vld_in) and (ap_const_logic_1 = d_o_3_1_ack_in))) then 
                                        d_o_3_1_sel_wr <= not(d_o_3_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_3_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_3_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_3_1_vld_in) and (ap_const_logic_1 = d_o_3_1_ack_out) and (ap_const_lv2_3 = d_o_3_1_state)) or ((ap_const_logic_0 = d_o_3_1_vld_in) and (ap_const_lv2_2 = d_o_3_1_state)))) then 
                    d_o_3_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_3_1_vld_in) and (ap_const_logic_0 = d_o_3_1_ack_out) and (ap_const_lv2_3 = d_o_3_1_state)) or ((ap_const_logic_0 = d_o_3_1_ack_out) and (ap_const_lv2_1 = d_o_3_1_state)))) then 
                    d_o_3_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_3_1_vld_in) and (ap_const_lv2_2 = d_o_3_1_state)) or ((ap_const_logic_1 = d_o_3_1_ack_out) and (ap_const_lv2_1 = d_o_3_1_state)) or ((ap_const_lv2_3 = d_o_3_1_state) and not(((ap_const_logic_1 = d_o_3_1_vld_in) and (ap_const_logic_0 = d_o_3_1_ack_out))) and not(((ap_const_logic_0 = d_o_3_1_vld_in) and (ap_const_logic_1 = d_o_3_1_ack_out)))))) then 
                    d_o_3_1_state <= ap_const_lv2_3;
                else 
                    d_o_3_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_4_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_4_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_4_1_ack_out) and (ap_const_logic_1 = d_o_4_1_vld_out))) then 
                                        d_o_4_1_sel_rd <= not(d_o_4_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_4_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_4_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_4_1_vld_in) and (ap_const_logic_1 = d_o_4_1_ack_in))) then 
                                        d_o_4_1_sel_wr <= not(d_o_4_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_4_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_4_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_4_1_vld_in) and (ap_const_logic_1 = d_o_4_1_ack_out) and (ap_const_lv2_3 = d_o_4_1_state)) or ((ap_const_logic_0 = d_o_4_1_vld_in) and (ap_const_lv2_2 = d_o_4_1_state)))) then 
                    d_o_4_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_4_1_vld_in) and (ap_const_logic_0 = d_o_4_1_ack_out) and (ap_const_lv2_3 = d_o_4_1_state)) or ((ap_const_logic_0 = d_o_4_1_ack_out) and (ap_const_lv2_1 = d_o_4_1_state)))) then 
                    d_o_4_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_4_1_vld_in) and (ap_const_lv2_2 = d_o_4_1_state)) or ((ap_const_logic_1 = d_o_4_1_ack_out) and (ap_const_lv2_1 = d_o_4_1_state)) or ((ap_const_lv2_3 = d_o_4_1_state) and not(((ap_const_logic_1 = d_o_4_1_vld_in) and (ap_const_logic_0 = d_o_4_1_ack_out))) and not(((ap_const_logic_0 = d_o_4_1_vld_in) and (ap_const_logic_1 = d_o_4_1_ack_out)))))) then 
                    d_o_4_1_state <= ap_const_lv2_3;
                else 
                    d_o_4_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_5_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_5_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_5_1_ack_out) and (ap_const_logic_1 = d_o_5_1_vld_out))) then 
                                        d_o_5_1_sel_rd <= not(d_o_5_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_5_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_5_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_5_1_vld_in) and (ap_const_logic_1 = d_o_5_1_ack_in))) then 
                                        d_o_5_1_sel_wr <= not(d_o_5_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_5_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_5_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_5_1_vld_in) and (ap_const_logic_1 = d_o_5_1_ack_out) and (ap_const_lv2_3 = d_o_5_1_state)) or ((ap_const_logic_0 = d_o_5_1_vld_in) and (ap_const_lv2_2 = d_o_5_1_state)))) then 
                    d_o_5_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_5_1_vld_in) and (ap_const_logic_0 = d_o_5_1_ack_out) and (ap_const_lv2_3 = d_o_5_1_state)) or ((ap_const_logic_0 = d_o_5_1_ack_out) and (ap_const_lv2_1 = d_o_5_1_state)))) then 
                    d_o_5_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_5_1_vld_in) and (ap_const_lv2_2 = d_o_5_1_state)) or ((ap_const_logic_1 = d_o_5_1_ack_out) and (ap_const_lv2_1 = d_o_5_1_state)) or ((ap_const_lv2_3 = d_o_5_1_state) and not(((ap_const_logic_1 = d_o_5_1_vld_in) and (ap_const_logic_0 = d_o_5_1_ack_out))) and not(((ap_const_logic_0 = d_o_5_1_vld_in) and (ap_const_logic_1 = d_o_5_1_ack_out)))))) then 
                    d_o_5_1_state <= ap_const_lv2_3;
                else 
                    d_o_5_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_6_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_6_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_6_1_ack_out) and (ap_const_logic_1 = d_o_6_1_vld_out))) then 
                                        d_o_6_1_sel_rd <= not(d_o_6_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_6_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_6_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_6_1_vld_in) and (ap_const_logic_1 = d_o_6_1_ack_in))) then 
                                        d_o_6_1_sel_wr <= not(d_o_6_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_6_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_6_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_6_1_vld_in) and (ap_const_logic_1 = d_o_6_1_ack_out) and (ap_const_lv2_3 = d_o_6_1_state)) or ((ap_const_logic_0 = d_o_6_1_vld_in) and (ap_const_lv2_2 = d_o_6_1_state)))) then 
                    d_o_6_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_6_1_vld_in) and (ap_const_logic_0 = d_o_6_1_ack_out) and (ap_const_lv2_3 = d_o_6_1_state)) or ((ap_const_logic_0 = d_o_6_1_ack_out) and (ap_const_lv2_1 = d_o_6_1_state)))) then 
                    d_o_6_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_6_1_vld_in) and (ap_const_lv2_2 = d_o_6_1_state)) or ((ap_const_logic_1 = d_o_6_1_ack_out) and (ap_const_lv2_1 = d_o_6_1_state)) or ((ap_const_lv2_3 = d_o_6_1_state) and not(((ap_const_logic_1 = d_o_6_1_vld_in) and (ap_const_logic_0 = d_o_6_1_ack_out))) and not(((ap_const_logic_0 = d_o_6_1_vld_in) and (ap_const_logic_1 = d_o_6_1_ack_out)))))) then 
                    d_o_6_1_state <= ap_const_lv2_3;
                else 
                    d_o_6_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    d_o_7_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_7_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_7_1_ack_out) and (ap_const_logic_1 = d_o_7_1_vld_out))) then 
                                        d_o_7_1_sel_rd <= not(d_o_7_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    d_o_7_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_7_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = d_o_7_1_vld_in) and (ap_const_logic_1 = d_o_7_1_ack_in))) then 
                                        d_o_7_1_sel_wr <= not(d_o_7_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    d_o_7_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                d_o_7_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = d_o_7_1_vld_in) and (ap_const_logic_1 = d_o_7_1_ack_out) and (ap_const_lv2_3 = d_o_7_1_state)) or ((ap_const_logic_0 = d_o_7_1_vld_in) and (ap_const_lv2_2 = d_o_7_1_state)))) then 
                    d_o_7_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = d_o_7_1_vld_in) and (ap_const_logic_0 = d_o_7_1_ack_out) and (ap_const_lv2_3 = d_o_7_1_state)) or ((ap_const_logic_0 = d_o_7_1_ack_out) and (ap_const_lv2_1 = d_o_7_1_state)))) then 
                    d_o_7_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = d_o_7_1_vld_in) and (ap_const_lv2_2 = d_o_7_1_state)) or ((ap_const_logic_1 = d_o_7_1_ack_out) and (ap_const_lv2_1 = d_o_7_1_state)) or ((ap_const_lv2_3 = d_o_7_1_state) and not(((ap_const_logic_1 = d_o_7_1_vld_in) and (ap_const_logic_0 = d_o_7_1_ack_out))) and not(((ap_const_logic_0 = d_o_7_1_vld_in) and (ap_const_logic_1 = d_o_7_1_ack_out)))))) then 
                    d_o_7_1_state <= ap_const_lv2_3;
                else 
                    d_o_7_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_reg_507))) then 
                i1_reg_218 <= tmp_17_reg_502;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_reg_507)))) then 
                i1_reg_218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                acc_0 <= tmp_1_fu_266_p2;
                acc_1 <= tmp_1_1_fu_297_p2;
                acc_2 <= tmp_1_2_fu_328_p2;
                acc_3 <= tmp_1_3_fu_359_p2;
                acc_4 <= tmp_1_4_fu_390_p2;
                acc_5 <= tmp_1_5_fu_421_p2;
                acc_6 <= tmp_1_6_fu_452_p2;
                acc_7 <= tmp_1_7_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_reg_507 <= exitcond_reg_507;
                exitcond_reg_507 <= exitcond_fu_246_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_0_0_load_A)) then
                d_i_0_0_payload_A <= d_i_0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_0_0_load_B)) then
                d_i_0_0_payload_B <= d_i_0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_1_0_load_A)) then
                d_i_1_0_payload_A <= d_i_1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_1_0_load_B)) then
                d_i_1_0_payload_B <= d_i_1_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_2_0_load_A)) then
                d_i_2_0_payload_A <= d_i_2_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_2_0_load_B)) then
                d_i_2_0_payload_B <= d_i_2_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_3_0_load_A)) then
                d_i_3_0_payload_A <= d_i_3_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_3_0_load_B)) then
                d_i_3_0_payload_B <= d_i_3_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_4_0_load_A)) then
                d_i_4_0_payload_A <= d_i_4_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_4_0_load_B)) then
                d_i_4_0_payload_B <= d_i_4_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_5_0_load_A)) then
                d_i_5_0_payload_A <= d_i_5_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_5_0_load_B)) then
                d_i_5_0_payload_B <= d_i_5_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_6_0_load_A)) then
                d_i_6_0_payload_A <= d_i_6_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_6_0_load_B)) then
                d_i_6_0_payload_B <= d_i_6_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_7_0_load_A)) then
                d_i_7_0_payload_A <= d_i_7_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_i_7_0_load_B)) then
                d_i_7_0_payload_B <= d_i_7_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_0_1_load_A)) then
                d_o_0_1_payload_A <= tmp_8_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_0_1_load_B)) then
                d_o_0_1_payload_B <= tmp_8_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_1_1_load_A)) then
                d_o_1_1_payload_A <= tmp_2_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_1_1_load_B)) then
                d_o_1_1_payload_B <= tmp_2_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_2_1_load_A)) then
                d_o_2_1_payload_A <= tmp_2_2_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_2_1_load_B)) then
                d_o_2_1_payload_B <= tmp_2_2_fu_340_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_3_1_load_A)) then
                d_o_3_1_payload_A <= tmp_2_3_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_3_1_load_B)) then
                d_o_3_1_payload_B <= tmp_2_3_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_4_1_load_A)) then
                d_o_4_1_payload_A <= tmp_2_4_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_4_1_load_B)) then
                d_o_4_1_payload_B <= tmp_2_4_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_5_1_load_A)) then
                d_o_5_1_payload_A <= tmp_2_5_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_5_1_load_B)) then
                d_o_5_1_payload_B <= tmp_2_5_fu_433_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_6_1_load_A)) then
                d_o_6_1_payload_A <= tmp_2_6_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_6_1_load_B)) then
                d_o_6_1_payload_B <= tmp_2_6_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_7_1_load_A)) then
                d_o_7_1_payload_A <= tmp_2_7_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = d_o_7_1_load_B)) then
                d_o_7_1_payload_B <= tmp_2_7_fu_495_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                tmp_17_reg_502 <= tmp_17_fu_242_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage0_flag00011011, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_reset_idle_pp0 = ap_const_logic_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_reset_idle_pp0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_flag00001001_assign_proc : process(d_i_0_0_vld_out, d_i_1_0_vld_out, d_i_2_0_vld_out, d_i_3_0_vld_out, d_i_4_0_vld_out, d_i_5_0_vld_out, d_i_6_0_vld_out, d_i_7_0_vld_out, d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_flag00001001 <= ((((ap_const_logic_0 = d_i_0_0_vld_out) or (ap_const_logic_0 = d_i_1_0_vld_out) or (ap_const_logic_0 = d_i_2_0_vld_out) or (ap_const_logic_0 = d_i_3_0_vld_out) or (ap_const_logic_0 = d_i_4_0_vld_out) or (ap_const_logic_0 = d_i_5_0_vld_out) or (ap_const_logic_0 = d_i_6_0_vld_out) or (ap_const_logic_0 = d_i_7_0_vld_out)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or (((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;


    ap_block_pp0_stage0_flag00011001_assign_proc : process(d_i_0_0_vld_out, d_i_1_0_vld_out, d_i_2_0_vld_out, d_i_3_0_vld_out, d_i_4_0_vld_out, d_i_5_0_vld_out, d_i_6_0_vld_out, d_i_7_0_vld_out, d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in, ap_block_state4_io, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_flag00011001 <= ((((ap_const_logic_0 = d_i_0_0_vld_out) or (ap_const_logic_0 = d_i_1_0_vld_out) or (ap_const_logic_0 = d_i_2_0_vld_out) or (ap_const_logic_0 = d_i_3_0_vld_out) or (ap_const_logic_0 = d_i_4_0_vld_out) or (ap_const_logic_0 = d_i_5_0_vld_out) or (ap_const_logic_0 = d_i_6_0_vld_out) or (ap_const_logic_0 = d_i_7_0_vld_out) or (ap_const_boolean_1 = ap_block_state4_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or (((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in) or (ap_const_boolean_1 = ap_block_state3_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;


    ap_block_pp0_stage0_flag00011011_assign_proc : process(d_i_0_0_vld_out, d_i_1_0_vld_out, d_i_2_0_vld_out, d_i_3_0_vld_out, d_i_4_0_vld_out, d_i_5_0_vld_out, d_i_6_0_vld_out, d_i_7_0_vld_out, d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in, ap_block_state4_io, ap_enable_reg_pp0_iter1, ap_block_state3_io, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_flag00011011 <= ((((ap_const_logic_0 = d_i_0_0_vld_out) or (ap_const_logic_0 = d_i_1_0_vld_out) or (ap_const_logic_0 = d_i_2_0_vld_out) or (ap_const_logic_0 = d_i_3_0_vld_out) or (ap_const_logic_0 = d_i_4_0_vld_out) or (ap_const_logic_0 = d_i_5_0_vld_out) or (ap_const_logic_0 = d_i_6_0_vld_out) or (ap_const_logic_0 = d_i_7_0_vld_out) or (ap_const_boolean_1 = ap_block_state4_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)) or (((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in) or (ap_const_boolean_1 = ap_block_state3_io)) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in));
    end process;


    ap_block_state4_io_assign_proc : process(d_o_0_1_ack_in, d_o_1_1_ack_in, d_o_2_1_ack_in, d_o_3_1_ack_in, d_o_4_1_ack_in, d_o_5_1_ack_in, d_o_6_1_ack_in, d_o_7_1_ack_in)
    begin
                ap_block_state4_io <= ((ap_const_logic_0 = d_o_0_1_ack_in) or (ap_const_logic_0 = d_o_1_1_ack_in) or (ap_const_logic_0 = d_o_2_1_ack_in) or (ap_const_logic_0 = d_o_3_1_ack_in) or (ap_const_logic_0 = d_o_4_1_ack_in) or (ap_const_logic_0 = d_o_5_1_ack_in) or (ap_const_logic_0 = d_o_6_1_ack_in) or (ap_const_logic_0 = d_o_7_1_ack_in));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(d_i_0_0_vld_out, d_i_1_0_vld_out, d_i_2_0_vld_out, d_i_3_0_vld_out, d_i_4_0_vld_out, d_i_5_0_vld_out, d_i_6_0_vld_out, d_i_7_0_vld_out)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((ap_const_logic_0 = d_i_0_0_vld_out) or (ap_const_logic_0 = d_i_1_0_vld_out) or (ap_const_logic_0 = d_i_2_0_vld_out) or (ap_const_logic_0 = d_i_3_0_vld_out) or (ap_const_logic_0 = d_i_4_0_vld_out) or (ap_const_logic_0 = d_i_5_0_vld_out) or (ap_const_logic_0 = d_i_6_0_vld_out) or (ap_const_logic_0 = d_i_7_0_vld_out));
    end process;


    ap_condition_1051_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
                ap_condition_1051 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_flag00011001, ap_reg_pp0_iter1_exitcond_reg_507)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_1 = ap_reg_pp0_iter1_exitcond_reg_507))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_fu_246_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_flag00011001)
    begin
        if (((exitcond_fu_246_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_idle_pp0_0to1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    d_i_0_0_ack_in <= d_i_0_0_state(1);

    d_i_0_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_0_0_ack_out <= ap_const_logic_1;
        else 
            d_i_0_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_0_0_data_out_assign_proc : process(d_i_0_0_payload_A, d_i_0_0_payload_B, d_i_0_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_0_0_sel)) then 
            d_i_0_0_data_out <= d_i_0_0_payload_B;
        else 
            d_i_0_0_data_out <= d_i_0_0_payload_A;
        end if; 
    end process;

    d_i_0_0_load_A <= (d_i_0_0_state_cmp_full and not(d_i_0_0_sel_wr));
    d_i_0_0_load_B <= (d_i_0_0_sel_wr and d_i_0_0_state_cmp_full);
    d_i_0_0_sel <= d_i_0_0_sel_rd;
    d_i_0_0_state_cmp_full <= '0' when (d_i_0_0_state = ap_const_lv2_1) else '1';
    d_i_0_0_vld_in <= d_i_0_TVALID;
    d_i_0_0_vld_out <= d_i_0_0_state(0);

    d_i_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_0_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_0_TDATA_blk_n <= d_i_0_0_state(0);
        else 
            d_i_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_0_TREADY <= d_i_0_0_state(1);
    d_i_1_0_ack_in <= d_i_1_0_state(1);

    d_i_1_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_1_0_ack_out <= ap_const_logic_1;
        else 
            d_i_1_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_1_0_data_out_assign_proc : process(d_i_1_0_payload_A, d_i_1_0_payload_B, d_i_1_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_1_0_sel)) then 
            d_i_1_0_data_out <= d_i_1_0_payload_B;
        else 
            d_i_1_0_data_out <= d_i_1_0_payload_A;
        end if; 
    end process;

    d_i_1_0_load_A <= (d_i_1_0_state_cmp_full and not(d_i_1_0_sel_wr));
    d_i_1_0_load_B <= (d_i_1_0_sel_wr and d_i_1_0_state_cmp_full);
    d_i_1_0_sel <= d_i_1_0_sel_rd;
    d_i_1_0_state_cmp_full <= '0' when (d_i_1_0_state = ap_const_lv2_1) else '1';
    d_i_1_0_vld_in <= d_i_1_TVALID;
    d_i_1_0_vld_out <= d_i_1_0_state(0);

    d_i_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_1_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_1_TDATA_blk_n <= d_i_1_0_state(0);
        else 
            d_i_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_1_TREADY <= d_i_1_0_state(1);
    d_i_2_0_ack_in <= d_i_2_0_state(1);

    d_i_2_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_2_0_ack_out <= ap_const_logic_1;
        else 
            d_i_2_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_2_0_data_out_assign_proc : process(d_i_2_0_payload_A, d_i_2_0_payload_B, d_i_2_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_2_0_sel)) then 
            d_i_2_0_data_out <= d_i_2_0_payload_B;
        else 
            d_i_2_0_data_out <= d_i_2_0_payload_A;
        end if; 
    end process;

    d_i_2_0_load_A <= (d_i_2_0_state_cmp_full and not(d_i_2_0_sel_wr));
    d_i_2_0_load_B <= (d_i_2_0_sel_wr and d_i_2_0_state_cmp_full);
    d_i_2_0_sel <= d_i_2_0_sel_rd;
    d_i_2_0_state_cmp_full <= '0' when (d_i_2_0_state = ap_const_lv2_1) else '1';
    d_i_2_0_vld_in <= d_i_2_TVALID;
    d_i_2_0_vld_out <= d_i_2_0_state(0);

    d_i_2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_2_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_2_TDATA_blk_n <= d_i_2_0_state(0);
        else 
            d_i_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_2_TREADY <= d_i_2_0_state(1);
    d_i_3_0_ack_in <= d_i_3_0_state(1);

    d_i_3_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_3_0_ack_out <= ap_const_logic_1;
        else 
            d_i_3_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_3_0_data_out_assign_proc : process(d_i_3_0_payload_A, d_i_3_0_payload_B, d_i_3_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_3_0_sel)) then 
            d_i_3_0_data_out <= d_i_3_0_payload_B;
        else 
            d_i_3_0_data_out <= d_i_3_0_payload_A;
        end if; 
    end process;

    d_i_3_0_load_A <= (d_i_3_0_state_cmp_full and not(d_i_3_0_sel_wr));
    d_i_3_0_load_B <= (d_i_3_0_sel_wr and d_i_3_0_state_cmp_full);
    d_i_3_0_sel <= d_i_3_0_sel_rd;
    d_i_3_0_state_cmp_full <= '0' when (d_i_3_0_state = ap_const_lv2_1) else '1';
    d_i_3_0_vld_in <= d_i_3_TVALID;
    d_i_3_0_vld_out <= d_i_3_0_state(0);

    d_i_3_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_3_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_3_TDATA_blk_n <= d_i_3_0_state(0);
        else 
            d_i_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_3_TREADY <= d_i_3_0_state(1);
    d_i_4_0_ack_in <= d_i_4_0_state(1);

    d_i_4_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_4_0_ack_out <= ap_const_logic_1;
        else 
            d_i_4_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_4_0_data_out_assign_proc : process(d_i_4_0_payload_A, d_i_4_0_payload_B, d_i_4_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_4_0_sel)) then 
            d_i_4_0_data_out <= d_i_4_0_payload_B;
        else 
            d_i_4_0_data_out <= d_i_4_0_payload_A;
        end if; 
    end process;

    d_i_4_0_load_A <= (d_i_4_0_state_cmp_full and not(d_i_4_0_sel_wr));
    d_i_4_0_load_B <= (d_i_4_0_sel_wr and d_i_4_0_state_cmp_full);
    d_i_4_0_sel <= d_i_4_0_sel_rd;
    d_i_4_0_state_cmp_full <= '0' when (d_i_4_0_state = ap_const_lv2_1) else '1';
    d_i_4_0_vld_in <= d_i_4_TVALID;
    d_i_4_0_vld_out <= d_i_4_0_state(0);

    d_i_4_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_4_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_4_TDATA_blk_n <= d_i_4_0_state(0);
        else 
            d_i_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_4_TREADY <= d_i_4_0_state(1);
    d_i_5_0_ack_in <= d_i_5_0_state(1);

    d_i_5_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_5_0_ack_out <= ap_const_logic_1;
        else 
            d_i_5_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_5_0_data_out_assign_proc : process(d_i_5_0_payload_A, d_i_5_0_payload_B, d_i_5_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_5_0_sel)) then 
            d_i_5_0_data_out <= d_i_5_0_payload_B;
        else 
            d_i_5_0_data_out <= d_i_5_0_payload_A;
        end if; 
    end process;

    d_i_5_0_load_A <= (d_i_5_0_state_cmp_full and not(d_i_5_0_sel_wr));
    d_i_5_0_load_B <= (d_i_5_0_sel_wr and d_i_5_0_state_cmp_full);
    d_i_5_0_sel <= d_i_5_0_sel_rd;
    d_i_5_0_state_cmp_full <= '0' when (d_i_5_0_state = ap_const_lv2_1) else '1';
    d_i_5_0_vld_in <= d_i_5_TVALID;
    d_i_5_0_vld_out <= d_i_5_0_state(0);

    d_i_5_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_5_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_5_TDATA_blk_n <= d_i_5_0_state(0);
        else 
            d_i_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_5_TREADY <= d_i_5_0_state(1);
    d_i_6_0_ack_in <= d_i_6_0_state(1);

    d_i_6_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_6_0_ack_out <= ap_const_logic_1;
        else 
            d_i_6_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_6_0_data_out_assign_proc : process(d_i_6_0_payload_A, d_i_6_0_payload_B, d_i_6_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_6_0_sel)) then 
            d_i_6_0_data_out <= d_i_6_0_payload_B;
        else 
            d_i_6_0_data_out <= d_i_6_0_payload_A;
        end if; 
    end process;

    d_i_6_0_load_A <= (d_i_6_0_state_cmp_full and not(d_i_6_0_sel_wr));
    d_i_6_0_load_B <= (d_i_6_0_sel_wr and d_i_6_0_state_cmp_full);
    d_i_6_0_sel <= d_i_6_0_sel_rd;
    d_i_6_0_state_cmp_full <= '0' when (d_i_6_0_state = ap_const_lv2_1) else '1';
    d_i_6_0_vld_in <= d_i_6_TVALID;
    d_i_6_0_vld_out <= d_i_6_0_state(0);

    d_i_6_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_6_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_6_TDATA_blk_n <= d_i_6_0_state(0);
        else 
            d_i_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_6_TREADY <= d_i_6_0_state(1);
    d_i_7_0_ack_in <= d_i_7_0_state(1);

    d_i_7_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_i_7_0_ack_out <= ap_const_logic_1;
        else 
            d_i_7_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    d_i_7_0_data_out_assign_proc : process(d_i_7_0_payload_A, d_i_7_0_payload_B, d_i_7_0_sel)
    begin
        if ((ap_const_logic_1 = d_i_7_0_sel)) then 
            d_i_7_0_data_out <= d_i_7_0_payload_B;
        else 
            d_i_7_0_data_out <= d_i_7_0_payload_A;
        end if; 
    end process;

    d_i_7_0_load_A <= (d_i_7_0_state_cmp_full and not(d_i_7_0_sel_wr));
    d_i_7_0_load_B <= (d_i_7_0_sel_wr and d_i_7_0_state_cmp_full);
    d_i_7_0_sel <= d_i_7_0_sel_rd;
    d_i_7_0_state_cmp_full <= '0' when (d_i_7_0_state = ap_const_lv2_1) else '1';
    d_i_7_0_vld_in <= d_i_7_TVALID;
    d_i_7_0_vld_out <= d_i_7_0_state(0);

    d_i_7_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, d_i_7_0_state, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            d_i_7_TDATA_blk_n <= d_i_7_0_state(0);
        else 
            d_i_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_i_7_TREADY <= d_i_7_0_state(1);
    d_o_0_1_ack_in <= d_o_0_1_state(1);
    d_o_0_1_ack_out <= d_o_0_TREADY;

    d_o_0_1_data_out_assign_proc : process(d_o_0_1_payload_A, d_o_0_1_payload_B, d_o_0_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_0_1_sel)) then 
            d_o_0_1_data_out <= d_o_0_1_payload_B;
        else 
            d_o_0_1_data_out <= d_o_0_1_payload_A;
        end if; 
    end process;

    d_o_0_1_load_A <= (d_o_0_1_state_cmp_full and not(d_o_0_1_sel_wr));
    d_o_0_1_load_B <= (d_o_0_1_sel_wr and d_o_0_1_state_cmp_full);
    d_o_0_1_sel <= d_o_0_1_sel_rd;
    d_o_0_1_state_cmp_full <= '0' when (d_o_0_1_state = ap_const_lv2_1) else '1';

    d_o_0_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_0_1_vld_in <= ap_const_logic_1;
        else 
            d_o_0_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_0_1_vld_out <= d_o_0_1_state(0);
    d_o_0_TDATA <= d_o_0_1_data_out;

    d_o_0_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_0_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_0_TDATA_blk_n <= d_o_0_1_state(1);
        else 
            d_o_0_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_0_TVALID <= d_o_0_1_state(0);
    d_o_1_1_ack_in <= d_o_1_1_state(1);
    d_o_1_1_ack_out <= d_o_1_TREADY;

    d_o_1_1_data_out_assign_proc : process(d_o_1_1_payload_A, d_o_1_1_payload_B, d_o_1_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_1_1_sel)) then 
            d_o_1_1_data_out <= d_o_1_1_payload_B;
        else 
            d_o_1_1_data_out <= d_o_1_1_payload_A;
        end if; 
    end process;

    d_o_1_1_load_A <= (d_o_1_1_state_cmp_full and not(d_o_1_1_sel_wr));
    d_o_1_1_load_B <= (d_o_1_1_sel_wr and d_o_1_1_state_cmp_full);
    d_o_1_1_sel <= d_o_1_1_sel_rd;
    d_o_1_1_state_cmp_full <= '0' when (d_o_1_1_state = ap_const_lv2_1) else '1';

    d_o_1_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_1_1_vld_in <= ap_const_logic_1;
        else 
            d_o_1_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_1_1_vld_out <= d_o_1_1_state(0);
    d_o_1_TDATA <= d_o_1_1_data_out;

    d_o_1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_1_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_1_TDATA_blk_n <= d_o_1_1_state(1);
        else 
            d_o_1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_1_TVALID <= d_o_1_1_state(0);
    d_o_2_1_ack_in <= d_o_2_1_state(1);
    d_o_2_1_ack_out <= d_o_2_TREADY;

    d_o_2_1_data_out_assign_proc : process(d_o_2_1_payload_A, d_o_2_1_payload_B, d_o_2_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_2_1_sel)) then 
            d_o_2_1_data_out <= d_o_2_1_payload_B;
        else 
            d_o_2_1_data_out <= d_o_2_1_payload_A;
        end if; 
    end process;

    d_o_2_1_load_A <= (d_o_2_1_state_cmp_full and not(d_o_2_1_sel_wr));
    d_o_2_1_load_B <= (d_o_2_1_sel_wr and d_o_2_1_state_cmp_full);
    d_o_2_1_sel <= d_o_2_1_sel_rd;
    d_o_2_1_state_cmp_full <= '0' when (d_o_2_1_state = ap_const_lv2_1) else '1';

    d_o_2_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_2_1_vld_in <= ap_const_logic_1;
        else 
            d_o_2_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_2_1_vld_out <= d_o_2_1_state(0);
    d_o_2_TDATA <= d_o_2_1_data_out;

    d_o_2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_2_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_2_TDATA_blk_n <= d_o_2_1_state(1);
        else 
            d_o_2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_2_TVALID <= d_o_2_1_state(0);
    d_o_3_1_ack_in <= d_o_3_1_state(1);
    d_o_3_1_ack_out <= d_o_3_TREADY;

    d_o_3_1_data_out_assign_proc : process(d_o_3_1_payload_A, d_o_3_1_payload_B, d_o_3_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_3_1_sel)) then 
            d_o_3_1_data_out <= d_o_3_1_payload_B;
        else 
            d_o_3_1_data_out <= d_o_3_1_payload_A;
        end if; 
    end process;

    d_o_3_1_load_A <= (d_o_3_1_state_cmp_full and not(d_o_3_1_sel_wr));
    d_o_3_1_load_B <= (d_o_3_1_sel_wr and d_o_3_1_state_cmp_full);
    d_o_3_1_sel <= d_o_3_1_sel_rd;
    d_o_3_1_state_cmp_full <= '0' when (d_o_3_1_state = ap_const_lv2_1) else '1';

    d_o_3_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_3_1_vld_in <= ap_const_logic_1;
        else 
            d_o_3_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_3_1_vld_out <= d_o_3_1_state(0);
    d_o_3_TDATA <= d_o_3_1_data_out;

    d_o_3_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_3_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_3_TDATA_blk_n <= d_o_3_1_state(1);
        else 
            d_o_3_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_3_TVALID <= d_o_3_1_state(0);
    d_o_4_1_ack_in <= d_o_4_1_state(1);
    d_o_4_1_ack_out <= d_o_4_TREADY;

    d_o_4_1_data_out_assign_proc : process(d_o_4_1_payload_A, d_o_4_1_payload_B, d_o_4_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_4_1_sel)) then 
            d_o_4_1_data_out <= d_o_4_1_payload_B;
        else 
            d_o_4_1_data_out <= d_o_4_1_payload_A;
        end if; 
    end process;

    d_o_4_1_load_A <= (d_o_4_1_state_cmp_full and not(d_o_4_1_sel_wr));
    d_o_4_1_load_B <= (d_o_4_1_sel_wr and d_o_4_1_state_cmp_full);
    d_o_4_1_sel <= d_o_4_1_sel_rd;
    d_o_4_1_state_cmp_full <= '0' when (d_o_4_1_state = ap_const_lv2_1) else '1';

    d_o_4_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_4_1_vld_in <= ap_const_logic_1;
        else 
            d_o_4_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_4_1_vld_out <= d_o_4_1_state(0);
    d_o_4_TDATA <= d_o_4_1_data_out;

    d_o_4_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_4_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_4_TDATA_blk_n <= d_o_4_1_state(1);
        else 
            d_o_4_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_4_TVALID <= d_o_4_1_state(0);
    d_o_5_1_ack_in <= d_o_5_1_state(1);
    d_o_5_1_ack_out <= d_o_5_TREADY;

    d_o_5_1_data_out_assign_proc : process(d_o_5_1_payload_A, d_o_5_1_payload_B, d_o_5_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_5_1_sel)) then 
            d_o_5_1_data_out <= d_o_5_1_payload_B;
        else 
            d_o_5_1_data_out <= d_o_5_1_payload_A;
        end if; 
    end process;

    d_o_5_1_load_A <= (d_o_5_1_state_cmp_full and not(d_o_5_1_sel_wr));
    d_o_5_1_load_B <= (d_o_5_1_sel_wr and d_o_5_1_state_cmp_full);
    d_o_5_1_sel <= d_o_5_1_sel_rd;
    d_o_5_1_state_cmp_full <= '0' when (d_o_5_1_state = ap_const_lv2_1) else '1';

    d_o_5_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_5_1_vld_in <= ap_const_logic_1;
        else 
            d_o_5_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_5_1_vld_out <= d_o_5_1_state(0);
    d_o_5_TDATA <= d_o_5_1_data_out;

    d_o_5_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_5_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_5_TDATA_blk_n <= d_o_5_1_state(1);
        else 
            d_o_5_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_5_TVALID <= d_o_5_1_state(0);
    d_o_6_1_ack_in <= d_o_6_1_state(1);
    d_o_6_1_ack_out <= d_o_6_TREADY;

    d_o_6_1_data_out_assign_proc : process(d_o_6_1_payload_A, d_o_6_1_payload_B, d_o_6_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_6_1_sel)) then 
            d_o_6_1_data_out <= d_o_6_1_payload_B;
        else 
            d_o_6_1_data_out <= d_o_6_1_payload_A;
        end if; 
    end process;

    d_o_6_1_load_A <= (d_o_6_1_state_cmp_full and not(d_o_6_1_sel_wr));
    d_o_6_1_load_B <= (d_o_6_1_sel_wr and d_o_6_1_state_cmp_full);
    d_o_6_1_sel <= d_o_6_1_sel_rd;
    d_o_6_1_state_cmp_full <= '0' when (d_o_6_1_state = ap_const_lv2_1) else '1';

    d_o_6_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_6_1_vld_in <= ap_const_logic_1;
        else 
            d_o_6_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_6_1_vld_out <= d_o_6_1_state(0);
    d_o_6_TDATA <= d_o_6_1_data_out;

    d_o_6_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_6_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_6_TDATA_blk_n <= d_o_6_1_state(1);
        else 
            d_o_6_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_6_TVALID <= d_o_6_1_state(0);
    d_o_7_1_ack_in <= d_o_7_1_state(1);
    d_o_7_1_ack_out <= d_o_7_TREADY;

    d_o_7_1_data_out_assign_proc : process(d_o_7_1_payload_A, d_o_7_1_payload_B, d_o_7_1_sel)
    begin
        if ((ap_const_logic_1 = d_o_7_1_sel)) then 
            d_o_7_1_data_out <= d_o_7_1_payload_B;
        else 
            d_o_7_1_data_out <= d_o_7_1_payload_A;
        end if; 
    end process;

    d_o_7_1_load_A <= (d_o_7_1_state_cmp_full and not(d_o_7_1_sel_wr));
    d_o_7_1_load_B <= (d_o_7_1_sel_wr and d_o_7_1_state_cmp_full);
    d_o_7_1_sel <= d_o_7_1_sel_rd;
    d_o_7_1_state_cmp_full <= '0' when (d_o_7_1_state = ap_const_lv2_1) else '1';

    d_o_7_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then 
            d_o_7_1_vld_in <= ap_const_logic_1;
        else 
            d_o_7_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    d_o_7_1_vld_out <= d_o_7_1_state(0);
    d_o_7_TDATA <= d_o_7_1_data_out;

    d_o_7_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, d_o_7_1_state, ap_block_pp0_stage0_flag00000000)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0)))) then 
            d_o_7_TDATA_blk_n <= d_o_7_1_state(1);
        else 
            d_o_7_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    d_o_7_TVALID <= d_o_7_1_state(0);
    exitcond_fu_246_p2 <= "1" when (i_1_7_fu_236_p2 = ap_const_lv6_20) else "0";
    i1_cast_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_phi_fu_222_p6),6));

    i1_phi_fu_222_p6_assign_proc : process(i1_reg_218, tmp_17_reg_502, exitcond_reg_507, ap_condition_1051)
    begin
        if ((ap_condition_1051 = ap_const_boolean_1)) then
            if ((ap_const_lv1_1 = exitcond_reg_507)) then 
                i1_phi_fu_222_p6 <= ap_const_lv5_0;
            elsif ((ap_const_lv1_0 = exitcond_reg_507)) then 
                i1_phi_fu_222_p6 <= tmp_17_reg_502;
            else 
                i1_phi_fu_222_p6 <= i1_reg_218;
            end if;
        else 
            i1_phi_fu_222_p6 <= i1_reg_218;
        end if; 
    end process;

    i_1_7_fu_236_p2 <= std_logic_vector(unsigned(ap_const_lv6_8) + unsigned(i1_cast_fu_232_p1));
        tmp1_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_0_0_data_out),32));

    tmp_10_fu_293_p1 <= acc_1(16 - 1 downto 0);
    tmp_11_fu_324_p1 <= acc_2(16 - 1 downto 0);
    tmp_12_fu_355_p1 <= acc_3(16 - 1 downto 0);
    tmp_13_fu_386_p1 <= acc_4(16 - 1 downto 0);
    tmp_14_fu_417_p1 <= acc_5(16 - 1 downto 0);
    tmp_15_fu_448_p1 <= acc_6(16 - 1 downto 0);
    tmp_16_fu_479_p1 <= acc_7(16 - 1 downto 0);
    tmp_17_fu_242_p1 <= i_1_7_fu_236_p2(5 - 1 downto 0);
    tmp_1_1_fu_297_p2 <= std_logic_vector(signed(tmp_s_fu_289_p1) + signed(acc_1));
    tmp_1_2_fu_328_p2 <= std_logic_vector(signed(tmp_9_fu_320_p1) + signed(acc_2));
    tmp_1_3_fu_359_p2 <= std_logic_vector(signed(tmp_3_fu_351_p1) + signed(acc_3));
    tmp_1_4_fu_390_p2 <= std_logic_vector(signed(tmp_4_fu_382_p1) + signed(acc_4));
    tmp_1_5_fu_421_p2 <= std_logic_vector(signed(tmp_5_fu_413_p1) + signed(acc_5));
    tmp_1_6_fu_452_p2 <= std_logic_vector(signed(tmp_6_fu_444_p1) + signed(acc_6));
    tmp_1_7_fu_483_p2 <= std_logic_vector(signed(tmp_7_fu_475_p1) + signed(acc_7));
    tmp_1_fu_266_p2 <= std_logic_vector(signed(tmp1_fu_258_p1) + signed(acc_0));
    tmp_2_1_fu_309_p2 <= std_logic_vector(unsigned(tmp_10_fu_293_p1) + unsigned(d_i_1_0_data_out));
    tmp_2_2_fu_340_p2 <= std_logic_vector(unsigned(tmp_11_fu_324_p1) + unsigned(d_i_2_0_data_out));
    tmp_2_3_fu_371_p2 <= std_logic_vector(unsigned(tmp_12_fu_355_p1) + unsigned(d_i_3_0_data_out));
    tmp_2_4_fu_402_p2 <= std_logic_vector(unsigned(tmp_13_fu_386_p1) + unsigned(d_i_4_0_data_out));
    tmp_2_5_fu_433_p2 <= std_logic_vector(unsigned(tmp_14_fu_417_p1) + unsigned(d_i_5_0_data_out));
    tmp_2_6_fu_464_p2 <= std_logic_vector(unsigned(tmp_15_fu_448_p1) + unsigned(d_i_6_0_data_out));
    tmp_2_7_fu_495_p2 <= std_logic_vector(unsigned(tmp_16_fu_479_p1) + unsigned(d_i_7_0_data_out));
    tmp_2_fu_262_p1 <= acc_0(16 - 1 downto 0);
        tmp_3_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_3_0_data_out),32));

        tmp_4_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_4_0_data_out),32));

        tmp_5_fu_413_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_5_0_data_out),32));

        tmp_6_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_6_0_data_out),32));

        tmp_7_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_7_0_data_out),32));

    tmp_8_fu_278_p2 <= std_logic_vector(unsigned(tmp_2_fu_262_p1) + unsigned(d_i_0_0_data_out));
        tmp_9_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_2_0_data_out),32));

        tmp_s_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(d_i_1_0_data_out),32));

end behav;
