// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adders_io,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=1.728000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=302,HLS_SYN_LUT=154}" *)

module adders_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1,
        in1_ap_vld,
        in2,
        in2_ap_ack,
        in_out1_i,
        in_out1_i_ap_vld,
        in_out1_i_ap_ack,
        in_out1_o,
        in_out1_o_ap_vld,
        in_out1_o_ap_ack
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in1;
input   in1_ap_vld;
input  [31:0] in2;
output   in2_ap_ack;
input  [31:0] in_out1_i;
input   in_out1_i_ap_vld;
output   in_out1_i_ap_ack;
output  [31:0] in_out1_o;
output   in_out1_o_ap_vld;
input   in_out1_o_ap_ack;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in2_ap_ack;
reg in_out1_i_ap_ack;
reg in_out1_o_ap_vld;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] in1_preg;
reg   [31:0] in1_in_sig;
reg    in1_ap_vld_preg;
reg    in1_ap_vld_in_sig;
reg    in1_blk_n;
reg    in_out1_i_blk_n;
reg    in_out1_o_blk_n;
wire    ap_CS_fsm_state2;
reg   [31:0] in_out1_read_reg_68;
reg    ap_block_state1;
wire   [31:0] tmp1_fu_57_p2;
reg   [31:0] tmp1_reg_73;
reg    ap_reg_ioackin_in_out1_o_ap_ack;
reg    ap_sig_ioackin_in_out1_o_ap_ack;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 in1_preg = 32'd0;
#0 in1_ap_vld_preg = 1'b0;
#0 ap_reg_ioackin_in_out1_o_ap_ack = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_in_out1_o_ap_ack <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_in_out1_o_ap_ack == 1'b1)) begin
                ap_reg_ioackin_in_out1_o_ap_ack <= 1'b0;
            end else if ((1'b1 == in_out1_o_ap_ack)) begin
                ap_reg_ioackin_in_out1_o_ap_ack <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in1_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_in_out1_o_ap_ack == 1'b1))) begin
            in1_ap_vld_preg <= 1'b0;
        end else if (((1'b1 == in1_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            in1_ap_vld_preg <= in1_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        in1_preg <= 32'd0;
    end else begin
        if (((1'b1 == in1_ap_vld) & ~((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)))) begin
            in1_preg <= in1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == in1_ap_vld_in_sig) | (1'b0 == in_out1_i_ap_vld)))) begin
        in_out1_read_reg_68 <= in_out1_i;
        tmp1_reg_73 <= tmp1_fu_57_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_in_out1_o_ap_ack == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_in_out1_o_ap_ack == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_in_out1_o_ap_ack)) begin
        ap_sig_ioackin_in_out1_o_ap_ack = in_out1_o_ap_ack;
    end else begin
        ap_sig_ioackin_in_out1_o_ap_ack = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == in1_ap_vld)) begin
        in1_ap_vld_in_sig = in1_ap_vld;
    end else begin
        in1_ap_vld_in_sig = in1_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in1_blk_n = in1_ap_vld;
    end else begin
        in1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == in1_ap_vld)) begin
        in1_in_sig = in1;
    end else begin
        in1_in_sig = in1_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == in1_ap_vld_in_sig) | (1'b0 == in_out1_i_ap_vld)))) begin
        in2_ap_ack = 1'b1;
    end else begin
        in2_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == in1_ap_vld_in_sig) | (1'b0 == in_out1_i_ap_vld)))) begin
        in_out1_i_ap_ack = 1'b1;
    end else begin
        in_out1_i_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_out1_i_blk_n = in_out1_i_ap_vld;
    end else begin
        in_out1_i_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_in_out1_o_ap_ack))) begin
        in_out1_o_ap_vld = 1'b1;
    end else begin
        in_out1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_out1_o_blk_n = in_out1_o_ap_ack;
    end else begin
        in_out1_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & ~((1'b0 == ap_start) | (1'b0 == in1_ap_vld_in_sig) | (1'b0 == in_out1_i_ap_vld)))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_in_out1_o_ap_ack == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((1'b0 == ap_start) | (1'b0 == in1_ap_vld_in_sig) | (1'b0 == in_out1_i_ap_vld));
end

assign in_out1_o = (tmp1_reg_73 + in_out1_read_reg_68);

assign tmp1_fu_57_p2 = (in2 + in1_in_sig);

endmodule //adders_io
