// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="convolve_kernel,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.174000,HLS_SYN_LAT=25351,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=1218,HLS_SYN_LUT=1185}" *)

module convolve_kernel (
        ap_clk,
        ap_rst_n,
        bufw_Addr_A,
        bufw_EN_A,
        bufw_WEN_A,
        bufw_Din_A,
        bufw_Dout_A,
        bufw_Clk_A,
        bufw_Rst_A,
        bufi_Addr_A,
        bufi_EN_A,
        bufi_WEN_A,
        bufi_Din_A,
        bufi_Dout_A,
        bufi_Clk_A,
        bufi_Rst_A,
        bufo_Addr_A,
        bufo_EN_A,
        bufo_WEN_A,
        bufo_Din_A,
        bufo_Dout_A,
        bufo_Clk_A,
        bufo_Rst_A,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] bufw_Addr_A;
output   bufw_EN_A;
output  [3:0] bufw_WEN_A;
output  [31:0] bufw_Din_A;
input  [31:0] bufw_Dout_A;
output   bufw_Clk_A;
output   bufw_Rst_A;
output  [31:0] bufi_Addr_A;
output   bufi_EN_A;
output  [3:0] bufi_WEN_A;
output  [31:0] bufi_Din_A;
input  [31:0] bufi_Dout_A;
output   bufi_Clk_A;
output   bufi_Rst_A;
output  [31:0] bufo_Addr_A;
output   bufo_EN_A;
output  [3:0] bufo_WEN_A;
output  [31:0] bufo_Din_A;
input  [31:0] bufo_Dout_A;
output   bufo_Clk_A;
output   bufo_Rst_A;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

reg bufw_EN_A;
reg bufi_EN_A;
reg bufo_EN_A;
reg[3:0] bufo_WEN_A;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [5:0] row_b_cast6_cast_fu_169_p1;
reg   [5:0] row_b_cast6_cast_reg_503;
wire    ap_CS_fsm_state2;
wire   [1:0] row_b_1_fu_179_p2;
reg   [1:0] row_b_1_reg_511;
wire   [3:0] tmp_1_cast_fu_193_p1;
reg   [3:0] tmp_1_cast_reg_516;
wire   [0:0] tmp_fu_173_p2;
wire   [5:0] col_b_cast5_cast_fu_197_p1;
reg   [5:0] col_b_cast5_cast_reg_521;
wire    ap_CS_fsm_state3;
wire   [1:0] col_b_1_fu_207_p2;
reg   [1:0] col_b_1_reg_529;
wire   [3:0] tmp_4_cast_fu_221_p1;
reg   [3:0] tmp_4_cast_reg_534;
wire   [0:0] tmp_2_fu_201_p2;
wire  signed [5:0] tmp_12_cast_fu_247_p1;
reg  signed [5:0] tmp_12_cast_reg_539;
wire    ap_CS_fsm_state4;
reg   [4:0] bufo_addr_reg_544;
wire   [1:0] to_b_1_fu_284_p2;
reg   [1:0] to_b_1_reg_552;
wire   [31:0] tmp_19_fu_315_p2;
reg   [31:0] tmp_19_reg_557;
wire    ap_CS_fsm_state5;
wire   [5:0] tmp_22_fu_345_p2;
reg   [5:0] tmp_22_reg_562;
wire   [1:0] ti_b_1_fu_357_p2;
reg   [1:0] ti_b_1_reg_570;
wire   [8:0] tmp_25_fu_388_p2;
reg   [8:0] tmp_25_reg_575;
wire    ap_CS_fsm_state6;
wire   [2:0] i_1_fu_404_p2;
reg   [2:0] i_1_reg_583;
wire   [9:0] tmp_29_fu_448_p2;
reg   [9:0] tmp_29_reg_588;
wire   [0:0] tmp_9_fu_398_p2;
wire    ap_CS_fsm_state7;
wire   [2:0] j_1_fu_478_p2;
reg   [2:0] j_1_reg_601;
wire   [0:0] tmp_3_fu_472_p2;
reg   [31:0] bufw_load_reg_611;
wire    ap_CS_fsm_state8;
reg   [31:0] bufi_load_reg_616;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] tmp_8_reg_621;
wire    ap_CS_fsm_state12;
reg   [31:0] bufo_load_reg_626;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] tmp_10_reg_631;
wire    ap_CS_fsm_state17;
reg   [1:0] row_b_reg_95;
reg   [1:0] col_b_reg_106;
wire   [0:0] tmp_5_fu_278_p2;
reg   [1:0] to_b_reg_117;
wire   [0:0] tmp_7_fu_351_p2;
reg   [1:0] ti_b_reg_128;
reg   [2:0] i_reg_139;
reg   [2:0] j_reg_150;
wire    ap_CS_fsm_state18;
wire   [31:0] tmp_16_cast_fu_273_p1;
wire   [31:0] tmp_30_cast_fu_463_p1;
wire   [31:0] tmp_31_cast_fu_498_p1;
wire    ap_CS_fsm_state11;
wire   [31:0] bufo_Addr_A_orig;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state9;
wire   [2:0] tmp_1_fu_185_p3;
wire   [2:0] tmp_4_fu_213_p3;
wire   [3:0] tmp_11_fu_229_p3;
wire   [4:0] p_shl1_cast_fu_237_p1;
wire   [4:0] to_b_cast4_cast_fu_225_p1;
wire   [4:0] tmp_12_fu_241_p2;
wire   [5:0] tmp_13_fu_251_p2;
wire   [5:0] tmp_14_fu_256_p2;
wire   [5:0] tmp_15_fu_262_p2;
wire   [5:0] tmp_16_fu_268_p2;
wire   [5:0] ti_b_cast3_cast_fu_290_p1;
wire   [5:0] tmp_17_fu_294_p2;
wire   [7:0] tmp_18_fu_303_p3;
wire  signed [31:0] tmp_17_cast_fu_299_p1;
wire  signed [31:0] p_shl4_fu_311_p1;
wire   [4:0] tmp_20_fu_321_p3;
wire   [2:0] tmp_21_fu_333_p3;
wire   [5:0] p_shl3_cast_fu_341_p1;
wire   [5:0] p_shl2_cast_fu_329_p1;
wire   [31:0] i_cast2_fu_363_p1;
wire   [31:0] tmp_23_fu_367_p2;
wire   [6:0] tmp_27_fu_376_p1;
wire   [8:0] tmp_24_fu_372_p1;
wire   [8:0] p_shl5_cast_fu_380_p3;
wire   [3:0] i_cast_fu_394_p1;
wire   [3:0] tmp_s_fu_410_p2;
wire   [5:0] tmp_cast_cast_fu_415_p1;
wire   [5:0] tmp_26_fu_419_p2;
wire   [8:0] tmp_28_fu_424_p3;
wire   [6:0] tmp_32_fu_436_p3;
wire   [9:0] p_shl6_cast_fu_432_p1;
wire   [9:0] p_shl7_cast_fu_444_p1;
wire   [8:0] j_cast1_cast_fu_454_p1;
wire   [8:0] tmp_30_fu_458_p2;
wire   [3:0] j_cast_fu_468_p1;
wire   [3:0] tmp_6_fu_484_p2;
wire   [9:0] tmp_6_cast_cast_fu_489_p1;
wire   [9:0] tmp_31_fu_493_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

convolve_kernel_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
convolve_kernel_control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

convolve_kernel_fbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fbkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bufo_load_reg_626),
    .din1(tmp_8_reg_621),
    .ce(1'b1),
    .dout(grp_fu_161_p2)
);

convolve_kernel_fcud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
convolve_kernel_fcud_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(bufw_load_reg_611),
    .din1(bufi_load_reg_616),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_5_fu_278_p2))) begin
        col_b_reg_106 <= col_b_1_reg_529;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_173_p2 == 1'd0))) begin
        col_b_reg_106 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == tmp_7_fu_351_p2))) begin
        i_reg_139 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (tmp_3_fu_472_p2 == 1'd1))) begin
        i_reg_139 <= i_1_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_9_fu_398_p2))) begin
        j_reg_150 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        j_reg_150 <= j_1_reg_601;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_201_p2 == 1'd1))) begin
        row_b_reg_95 <= row_b_1_reg_511;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        row_b_reg_95 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == tmp_5_fu_278_p2))) begin
        ti_b_reg_128 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_398_p2 == 1'd1))) begin
        ti_b_reg_128 <= ti_b_1_reg_570;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_7_fu_351_p2))) begin
        to_b_reg_117 <= to_b_1_reg_552;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_2_fu_201_p2))) begin
        to_b_reg_117 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        bufi_load_reg_616 <= bufi_Dout_A;
        bufw_load_reg_611 <= bufw_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bufo_addr_reg_544 <= tmp_16_cast_fu_273_p1;
        tmp_12_cast_reg_539 <= tmp_12_cast_fu_247_p1;
        to_b_1_reg_552 <= to_b_1_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        bufo_load_reg_626 <= bufo_Dout_A;
        tmp_8_reg_621 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        col_b_1_reg_529 <= col_b_1_fu_207_p2;
        col_b_cast5_cast_reg_521[1 : 0] <= col_b_cast5_cast_fu_197_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_583 <= i_1_fu_404_p2;
        tmp_25_reg_575 <= tmp_25_fu_388_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_1_reg_601 <= j_1_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        row_b_1_reg_511 <= row_b_1_fu_179_p2;
        row_b_cast6_cast_reg_503[1 : 0] <= row_b_cast6_cast_fu_169_p1[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ti_b_1_reg_570 <= ti_b_1_fu_357_p2;
        tmp_19_reg_557 <= tmp_19_fu_315_p2;
        tmp_22_reg_562[5 : 1] <= tmp_22_fu_345_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        tmp_10_reg_631 <= grp_fu_161_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_173_p2 == 1'd0))) begin
        tmp_1_cast_reg_516[2 : 1] <= tmp_1_cast_fu_193_p1[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == tmp_9_fu_398_p2))) begin
        tmp_29_reg_588[9 : 1] <= tmp_29_fu_448_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_2_fu_201_p2))) begin
        tmp_4_cast_reg_534[2 : 1] <= tmp_4_cast_fu_221_p1[2 : 1];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_173_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_173_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bufi_EN_A = 1'b1;
    end else begin
        bufi_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state11))) begin
        bufo_EN_A = 1'b1;
    end else begin
        bufo_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        bufo_WEN_A = 4'd15;
    end else begin
        bufo_WEN_A = 4'd0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        bufw_EN_A = 1'b1;
    end else begin
        bufw_EN_A = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_fu_173_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_201_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_5_fu_278_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == tmp_7_fu_351_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_9_fu_398_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_3_fu_472_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bufi_Addr_A = tmp_31_cast_fu_498_p1 << 32'd2;

assign bufi_Clk_A = ap_clk;

assign bufi_Din_A = 32'd0;

assign bufi_Rst_A = ap_rst_n_inv;

assign bufi_WEN_A = 4'd0;

assign bufo_Addr_A = bufo_Addr_A_orig << 32'd2;

assign bufo_Addr_A_orig = bufo_addr_reg_544;

assign bufo_Clk_A = ap_clk;

assign bufo_Din_A = tmp_10_reg_631;

assign bufo_Rst_A = ap_rst_n_inv;

assign bufw_Addr_A = tmp_30_cast_fu_463_p1 << 32'd2;

assign bufw_Clk_A = ap_clk;

assign bufw_Din_A = 32'd0;

assign bufw_Rst_A = ap_rst_n_inv;

assign bufw_WEN_A = 4'd0;

assign col_b_1_fu_207_p2 = (col_b_reg_106 + 2'd1);

assign col_b_cast5_cast_fu_197_p1 = col_b_reg_106;

assign i_1_fu_404_p2 = (3'd1 + i_reg_139);

assign i_cast2_fu_363_p1 = i_reg_139;

assign i_cast_fu_394_p1 = i_reg_139;

assign j_1_fu_478_p2 = (j_reg_150 + 3'd1);

assign j_cast1_cast_fu_454_p1 = j_reg_150;

assign j_cast_fu_468_p1 = j_reg_150;

assign p_shl1_cast_fu_237_p1 = tmp_11_fu_229_p3;

assign p_shl2_cast_fu_329_p1 = tmp_20_fu_321_p3;

assign p_shl3_cast_fu_341_p1 = tmp_21_fu_333_p3;

assign p_shl4_fu_311_p1 = $signed(tmp_18_fu_303_p3);

assign p_shl5_cast_fu_380_p3 = {{tmp_27_fu_376_p1}, {2'd0}};

assign p_shl6_cast_fu_432_p1 = tmp_28_fu_424_p3;

assign p_shl7_cast_fu_444_p1 = tmp_32_fu_436_p3;

assign row_b_1_fu_179_p2 = (row_b_reg_95 + 2'd1);

assign row_b_cast6_cast_fu_169_p1 = row_b_reg_95;

assign ti_b_1_fu_357_p2 = (ti_b_reg_128 + 2'd1);

assign ti_b_cast3_cast_fu_290_p1 = ti_b_reg_128;

assign tmp_11_fu_229_p3 = {{to_b_reg_117}, {2'd0}};

assign tmp_12_cast_fu_247_p1 = $signed(tmp_12_fu_241_p2);

assign tmp_12_fu_241_p2 = (p_shl1_cast_fu_237_p1 - to_b_cast4_cast_fu_225_p1);

assign tmp_13_fu_251_p2 = ($signed(row_b_cast6_cast_reg_503) + $signed(tmp_12_cast_fu_247_p1));

assign tmp_14_fu_256_p2 = tmp_13_fu_251_p2 << 6'd2;

assign tmp_15_fu_262_p2 = (tmp_14_fu_256_p2 - tmp_13_fu_251_p2);

assign tmp_16_cast_fu_273_p1 = tmp_16_fu_268_p2;

assign tmp_16_fu_268_p2 = (col_b_cast5_cast_reg_521 + tmp_15_fu_262_p2);

assign tmp_17_cast_fu_299_p1 = $signed(tmp_17_fu_294_p2);

assign tmp_17_fu_294_p2 = ($signed(tmp_12_cast_reg_539) + $signed(ti_b_cast3_cast_fu_290_p1));

assign tmp_18_fu_303_p3 = {{tmp_17_fu_294_p2}, {2'd0}};

assign tmp_19_fu_315_p2 = ($signed(tmp_17_cast_fu_299_p1) + $signed(p_shl4_fu_311_p1));

assign tmp_1_cast_fu_193_p1 = tmp_1_fu_185_p3;

assign tmp_1_fu_185_p3 = {{row_b_reg_95}, {1'd0}};

assign tmp_20_fu_321_p3 = {{ti_b_reg_128}, {3'd0}};

assign tmp_21_fu_333_p3 = {{ti_b_reg_128}, {1'd0}};

assign tmp_22_fu_345_p2 = (p_shl3_cast_fu_341_p1 + p_shl2_cast_fu_329_p1);

assign tmp_23_fu_367_p2 = (tmp_19_reg_557 + i_cast2_fu_363_p1);

assign tmp_24_fu_372_p1 = tmp_23_fu_367_p2[8:0];

assign tmp_25_fu_388_p2 = (tmp_24_fu_372_p1 + p_shl5_cast_fu_380_p3);

assign tmp_26_fu_419_p2 = (tmp_cast_cast_fu_415_p1 + tmp_22_reg_562);

assign tmp_27_fu_376_p1 = tmp_23_fu_367_p2[6:0];

assign tmp_28_fu_424_p3 = {{tmp_26_fu_419_p2}, {3'd0}};

assign tmp_29_fu_448_p2 = (p_shl6_cast_fu_432_p1 + p_shl7_cast_fu_444_p1);

assign tmp_2_fu_201_p2 = ((col_b_reg_106 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_30_cast_fu_463_p1 = tmp_30_fu_458_p2;

assign tmp_30_fu_458_p2 = (tmp_25_reg_575 + j_cast1_cast_fu_454_p1);

assign tmp_31_cast_fu_498_p1 = tmp_31_fu_493_p2;

assign tmp_31_fu_493_p2 = (tmp_29_reg_588 + tmp_6_cast_cast_fu_489_p1);

assign tmp_32_fu_436_p3 = {{tmp_26_fu_419_p2}, {1'd0}};

assign tmp_3_fu_472_p2 = ((j_reg_150 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_221_p1 = tmp_4_fu_213_p3;

assign tmp_4_fu_213_p3 = {{col_b_reg_106}, {1'd0}};

assign tmp_5_fu_278_p2 = ((to_b_reg_117 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_6_cast_cast_fu_489_p1 = tmp_6_fu_484_p2;

assign tmp_6_fu_484_p2 = (tmp_4_cast_reg_534 + j_cast_fu_468_p1);

assign tmp_7_fu_351_p2 = ((ti_b_reg_128 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_9_fu_398_p2 = ((i_reg_139 == 3'd5) ? 1'b1 : 1'b0);

assign tmp_cast_cast_fu_415_p1 = tmp_s_fu_410_p2;

assign tmp_fu_173_p2 = ((row_b_reg_95 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_s_fu_410_p2 = (i_cast_fu_394_p1 + tmp_1_cast_reg_516);

assign to_b_1_fu_284_p2 = (2'd1 + to_b_reg_117);

assign to_b_cast4_cast_fu_225_p1 = to_b_reg_117;

always @ (posedge ap_clk) begin
    row_b_cast6_cast_reg_503[5:2] <= 4'b0000;
    tmp_1_cast_reg_516[0] <= 1'b0;
    tmp_1_cast_reg_516[3] <= 1'b0;
    col_b_cast5_cast_reg_521[5:2] <= 4'b0000;
    tmp_4_cast_reg_534[0] <= 1'b0;
    tmp_4_cast_reg_534[3] <= 1'b0;
    tmp_22_reg_562[0] <= 1'b0;
    tmp_29_reg_588[0] <= 1'b0;
end

endmodule //convolve_kernel
